typedef uint32 u32;
typedef uint16 u16;
typedef float  f32;

typedef struct {
    f32 x;
    f32 y;
    f32 z;
} vec3<read=vec3Read>;

string vec3Read( vec3 &v ) {
    string s;
    SPrintf(s, "x: %.2f, y: %.2f, z: %.2f", v.x, v.y, v.z);
    return s;
}

typedef struct {
    f32 _00; f32 _01; f32 _02;
    f32 _10; f32 _11; f32 _12;
    f32 _20; f32 _21; f32 _22;
} mat3<read=mat3Read>;

string mat3Read( mat3 &m ) {
    string s;
    SPrintf(s, "%.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f", 
            m._00, m._01, m._02, m._10, m._11, m._12, m._20, m._21, m._22);
    return s;
}

typedef struct {
    u32 value;
} b32<read=b32Read>;

string b32Read( b32 &b ) {
    if(b.value != 0){
        return "true";
    }else{
        return "false";
    }
}

struct{
    char magic[4]; //DESH
    u32  flags;
    u32  entity_count;
    u32  entity_array_offset;
    u32  texture_count;
    u32  texture_array_offset;
    u32  material_count;
    u32  material_array_offset;
    u32  mesh_count;
    u32  mesh_array_offset;
    u32  component_type_count;
    u32  component_type_header_array_offset;
} header;

struct{
    u32  id;
    char name[64];
    vec3 position;
    vec3 rotation;
    vec3 scale;
} entities[header.entity_count];

struct{
    u32  type;
    char name[64];
} textures[header.texture_count];

struct{
    u32 shader;
    u32 albedo_texture_id;
    u32 normal_texture_id;
    u32 specular_texture_id;
    u32 light_texture_id;
    char name[64];
} materials[header.material_count];

struct{
    u32 material_id;
    b32 base;
    char name[64];
} meshes[header.mesh_count];

struct{
    u32 type;
    u32 size;
    u32 count;
    u32 array_offset;
} component_type_headers[header.component_type_count];

//// component arrays ////

struct{
    u32  entity_id;
    u32  comp_id;
    vec3 position;
    vec3 velocity;
    vec3 orientation;
} audio_listeners[component_type_headers[0].count];

struct{
    u32  entity_id;
    u32  comp_id;
} audio_sources[component_type_headers[1].count];

struct{
    u32  entity_id;
    u32  comp_id;
    u32  collision_layer;
    mat3 inertia_tensor;
    vec3 half_dimensions;
} box_colliders[component_type_headers[2].count];

struct{
    u32  entity_id;
    u32  comp_id;
    u32  collision_layer;
    mat3 inertia_tensor;
    vec3 half_dimensions;
} aabb_colliders[component_type_headers[3].count];

struct{
    u32  entity_id;
    u32  comp_id;
    u32  collision_layer;
    mat3 inertia_tensor;
    f32  half_dimensions;
} sphere_colliders[component_type_headers[4].count];

struct{
    u32  entity_id;
    u32  comp_id;
    vec3 position;
    vec3 direction;
    f32  strength;
} lights[component_type_headers[5].count];

struct{
    u32 entity_id;
    u32  comp_id;
    u32 instance_id;
    u32 mesh_id;
    b32 mesh_visible;
    b32 entity_control;
} mesh_comps[component_type_headers[6].count];

struct{
    u32  entity_id;
    u32  comp_id;
    vec3 position;
    vec3 rotation;
    vec3 velocity;
    vec3 acceleration;
    vec3 rot_velocity;
    vec3 rot_acceleration;
    f32  elasticity;
    f32  mass;
    b32  is_static;
} physics[component_type_headers[7].count];

struct{
    u32  entity_id;
    u32  comp_id;
    vec3 inputs;
    f32  gndAccel;
    f32  airAccel;
    f32  maxWalkingSpeed;
    b32  jump;
} movement[component_type_headers[8].count];

struct{
    u32 entity_id;
    u32  comp_id;
    u32 health;
} player[component_type_headers[8].count];