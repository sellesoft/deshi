/**
 * Loader generated by glad 2.0.4 on Sun May 28 22:29:57 2023
 *
 * SPDX-License-Identifier: (WTFPL OR CC0-1.0) AND Apache-2.0
 *
 * Generator: C/C++
 * Specification: glx
 * Extensions: 66
 *
 * APIs:
 *  - glx=1.4
 *
 * Options:
 *  - ALIAS = False
 *  - DEBUG = True
 *  - HEADER_ONLY = True
 *  - LOADER = True
 *  - MX = False
 *  - ON_DEMAND = False
 *
 * Commandline:
 *    --api='glx=1.4' --extensions='GLX_3DFX_multisample,GLX_AMD_gpu_association,GLX_ARB_context_flush_control,GLX_ARB_create_context,GLX_ARB_create_context_no_error,GLX_ARB_create_context_profile,GLX_ARB_create_context_robustness,GLX_ARB_fbconfig_float,GLX_ARB_framebuffer_sRGB,GLX_ARB_get_proc_address,GLX_ARB_multisample,GLX_ARB_robustness_application_isolation,GLX_ARB_robustness_share_group_isolation,GLX_ARB_vertex_buffer_object,GLX_EXT_buffer_age,GLX_EXT_context_priority,GLX_EXT_create_context_es2_profile,GLX_EXT_create_context_es_profile,GLX_EXT_fbconfig_packed_float,GLX_EXT_framebuffer_sRGB,GLX_EXT_get_drawable_type,GLX_EXT_import_context,GLX_EXT_libglvnd,GLX_EXT_no_config_context,GLX_EXT_stereo_tree,GLX_EXT_swap_control,GLX_EXT_swap_control_tear,GLX_EXT_texture_from_pixmap,GLX_EXT_visual_info,GLX_EXT_visual_rating,GLX_INTEL_swap_event,GLX_MESA_agp_offset,GLX_MESA_copy_sub_buffer,GLX_MESA_pixmap_colormap,GLX_MESA_query_renderer,GLX_MESA_release_buffers,GLX_MESA_set_3dfx_mode,GLX_MESA_swap_control,GLX_NV_copy_buffer,GLX_NV_copy_image,GLX_NV_delay_before_swap,GLX_NV_float_buffer,GLX_NV_multigpu_context,GLX_NV_multisample_coverage,GLX_NV_present_video,GLX_NV_robustness_video_memory_purge,GLX_NV_swap_group,GLX_NV_video_capture,GLX_NV_video_out,GLX_OML_swap_method,GLX_OML_sync_control,GLX_SGIS_blended_overlay,GLX_SGIS_multisample,GLX_SGIS_shared_multisample,GLX_SGIX_fbconfig,GLX_SGIX_hyperpipe,GLX_SGIX_pbuffer,GLX_SGIX_swap_barrier,GLX_SGIX_swap_group,GLX_SGIX_video_resize,GLX_SGIX_visual_select_group,GLX_SGI_cushion,GLX_SGI_make_current_read,GLX_SGI_swap_control,GLX_SGI_video_sync,GLX_SUN_get_transparent_index' c --debug --header-only --loader
 *
 * Online:
 *    http://glad.sh/#api=glx%3D1.4&extensions=GLX_3DFX_multisample%2CGLX_AMD_gpu_association%2CGLX_ARB_context_flush_control%2CGLX_ARB_create_context%2CGLX_ARB_create_context_no_error%2CGLX_ARB_create_context_profile%2CGLX_ARB_create_context_robustness%2CGLX_ARB_fbconfig_float%2CGLX_ARB_framebuffer_sRGB%2CGLX_ARB_get_proc_address%2CGLX_ARB_multisample%2CGLX_ARB_robustness_application_isolation%2CGLX_ARB_robustness_share_group_isolation%2CGLX_ARB_vertex_buffer_object%2CGLX_EXT_buffer_age%2CGLX_EXT_context_priority%2CGLX_EXT_create_context_es2_profile%2CGLX_EXT_create_context_es_profile%2CGLX_EXT_fbconfig_packed_float%2CGLX_EXT_framebuffer_sRGB%2CGLX_EXT_get_drawable_type%2CGLX_EXT_import_context%2CGLX_EXT_libglvnd%2CGLX_EXT_no_config_context%2CGLX_EXT_stereo_tree%2CGLX_EXT_swap_control%2CGLX_EXT_swap_control_tear%2CGLX_EXT_texture_from_pixmap%2CGLX_EXT_visual_info%2CGLX_EXT_visual_rating%2CGLX_INTEL_swap_event%2CGLX_MESA_agp_offset%2CGLX_MESA_copy_sub_buffer%2CGLX_MESA_pixmap_colormap%2CGLX_MESA_query_renderer%2CGLX_MESA_release_buffers%2CGLX_MESA_set_3dfx_mode%2CGLX_MESA_swap_control%2CGLX_NV_copy_buffer%2CGLX_NV_copy_image%2CGLX_NV_delay_before_swap%2CGLX_NV_float_buffer%2CGLX_NV_multigpu_context%2CGLX_NV_multisample_coverage%2CGLX_NV_present_video%2CGLX_NV_robustness_video_memory_purge%2CGLX_NV_swap_group%2CGLX_NV_video_capture%2CGLX_NV_video_out%2CGLX_OML_swap_method%2CGLX_OML_sync_control%2CGLX_SGIS_blended_overlay%2CGLX_SGIS_multisample%2CGLX_SGIS_shared_multisample%2CGLX_SGIX_fbconfig%2CGLX_SGIX_hyperpipe%2CGLX_SGIX_pbuffer%2CGLX_SGIX_swap_barrier%2CGLX_SGIX_swap_group%2CGLX_SGIX_video_resize%2CGLX_SGIX_visual_select_group%2CGLX_SGI_cushion%2CGLX_SGI_make_current_read%2CGLX_SGI_swap_control%2CGLX_SGI_video_sync%2CGLX_SUN_get_transparent_index&generator=c&options=DEBUG%2CHEADER_ONLY%2CLOADER
 *
 */

#ifndef GLAD_GLX_H_
#define GLAD_GLX_H_

#ifdef GLX_H
  #error GLX header already included (API: glx), remove previous include!
#endif
#define GLX_H 1


#include <X11/X.h>
#include <X11/Xlib.h>
#include <X11/Xutil.h>

#include <glad/gl.h>

#define GLAD_GLX
#define GLAD_OPTION_GLX_DEBUG
#define GLAD_OPTION_GLX_HEADER_ONLY
#define GLAD_OPTION_GLX_LOADER

#ifdef __cplusplus
extern "C" {
#endif

#ifndef GLAD_PLATFORM_H_
#define GLAD_PLATFORM_H_

#ifndef GLAD_PLATFORM_WIN32
  #if defined(_WIN32) || defined(__WIN32__) || defined(WIN32) || defined(__MINGW32__)
    #define GLAD_PLATFORM_WIN32 1
  #else
    #define GLAD_PLATFORM_WIN32 0
  #endif
#endif

#ifndef GLAD_PLATFORM_APPLE
  #ifdef __APPLE__
    #define GLAD_PLATFORM_APPLE 1
  #else
    #define GLAD_PLATFORM_APPLE 0
  #endif
#endif

#ifndef GLAD_PLATFORM_EMSCRIPTEN
  #ifdef __EMSCRIPTEN__
    #define GLAD_PLATFORM_EMSCRIPTEN 1
  #else
    #define GLAD_PLATFORM_EMSCRIPTEN 0
  #endif
#endif

#ifndef GLAD_PLATFORM_UWP
  #if defined(_MSC_VER) && !defined(GLAD_INTERNAL_HAVE_WINAPIFAMILY)
    #ifdef __has_include
      #if __has_include(<winapifamily.h>)
        #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
      #endif
    #elif _MSC_VER >= 1700 && !_USING_V110_SDK71_
      #define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
    #endif
  #endif

  #ifdef GLAD_INTERNAL_HAVE_WINAPIFAMILY
    #include <winapifamily.h>
    #if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
      #define GLAD_PLATFORM_UWP 1
    #endif
  #endif

  #ifndef GLAD_PLATFORM_UWP
    #define GLAD_PLATFORM_UWP 0
  #endif
#endif

#ifdef __GNUC__
  #define GLAD_GNUC_EXTENSION __extension__
#else
  #define GLAD_GNUC_EXTENSION
#endif

#define GLAD_UNUSED(x) (void)(x)

#ifndef GLAD_API_CALL
  #if defined(GLAD_API_CALL_EXPORT)
    #if GLAD_PLATFORM_WIN32 || defined(__CYGWIN__)
      #if defined(GLAD_API_CALL_EXPORT_BUILD)
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllexport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllexport) extern
        #endif
      #else
        #if defined(__GNUC__)
          #define GLAD_API_CALL __attribute__ ((dllimport)) extern
        #else
          #define GLAD_API_CALL __declspec(dllimport) extern
        #endif
      #endif
    #elif defined(__GNUC__) && defined(GLAD_API_CALL_EXPORT_BUILD)
      #define GLAD_API_CALL __attribute__ ((visibility ("default"))) extern
    #else
      #define GLAD_API_CALL extern
    #endif
  #else
    #define GLAD_API_CALL extern
  #endif
#endif

#ifdef APIENTRY
  #define GLAD_API_PTR APIENTRY
#elif GLAD_PLATFORM_WIN32
  #define GLAD_API_PTR __stdcall
#else
  #define GLAD_API_PTR
#endif

#ifndef GLAPI
#define GLAPI GLAD_API_CALL
#endif

#ifndef GLAPIENTRY
#define GLAPIENTRY GLAD_API_PTR
#endif

#define GLAD_MAKE_VERSION(major, minor) (major * 10000 + minor)
#define GLAD_VERSION_MAJOR(version) (version / 10000)
#define GLAD_VERSION_MINOR(version) (version % 10000)

#define GLAD_GENERATOR_VERSION "2.0.4"

typedef void (*GLADapiproc)(void);

typedef GLADapiproc (*GLADloadfunc)(const char *name);
typedef GLADapiproc (*GLADuserptrloadfunc)(void *userptr, const char *name);

typedef void (*GLADprecallback)(const char *name, GLADapiproc apiproc, int len_args, ...);
typedef void (*GLADpostcallback)(void *ret, const char *name, GLADapiproc apiproc, int len_args, ...);

#endif /* GLAD_PLATFORM_H_ */

#define GLX_3DFX_FULLSCREEN_MODE_MESA 0x2
#define GLX_3DFX_WINDOW_MODE_MESA 0x1
#define GLX_ACCUM_ALPHA_SIZE 17
#define GLX_ACCUM_BLUE_SIZE 16
#define GLX_ACCUM_BUFFER_BIT 0x00000080
#define GLX_ACCUM_BUFFER_BIT_SGIX 0x00000080
#define GLX_ACCUM_GREEN_SIZE 15
#define GLX_ACCUM_RED_SIZE 14
#define GLX_ALPHA_SIZE 11
#define GLX_AUX0_EXT 0x20E2
#define GLX_AUX1_EXT 0x20E3
#define GLX_AUX2_EXT 0x20E4
#define GLX_AUX3_EXT 0x20E5
#define GLX_AUX4_EXT 0x20E6
#define GLX_AUX5_EXT 0x20E7
#define GLX_AUX6_EXT 0x20E8
#define GLX_AUX7_EXT 0x20E9
#define GLX_AUX8_EXT 0x20EA
#define GLX_AUX9_EXT 0x20EB
#define GLX_AUX_BUFFERS 7
#define GLX_AUX_BUFFERS_BIT 0x00000010
#define GLX_AUX_BUFFERS_BIT_SGIX 0x00000010
#define GLX_BACK_BUFFER_AGE_EXT 0x20F4
#define GLX_BACK_EXT 0x20E0
#define GLX_BACK_LEFT_BUFFER_BIT 0x00000004
#define GLX_BACK_LEFT_BUFFER_BIT_SGIX 0x00000004
#define GLX_BACK_LEFT_EXT 0x20E0
#define GLX_BACK_RIGHT_BUFFER_BIT 0x00000008
#define GLX_BACK_RIGHT_BUFFER_BIT_SGIX 0x00000008
#define GLX_BACK_RIGHT_EXT 0x20E1
#define GLX_BAD_ATTRIBUTE 2
#define GLX_BAD_CONTEXT 5
#define GLX_BAD_ENUM 7
#define GLX_BAD_HYPERPIPE_CONFIG_SGIX 91
#define GLX_BAD_HYPERPIPE_SGIX 92
#define GLX_BAD_SCREEN 1
#define GLX_BAD_VALUE 6
#define GLX_BAD_VISUAL 4
#define GLX_BIND_TO_MIPMAP_TEXTURE_EXT 0x20D2
#define GLX_BIND_TO_TEXTURE_RGBA_EXT 0x20D1
#define GLX_BIND_TO_TEXTURE_RGB_EXT 0x20D0
#define GLX_BIND_TO_TEXTURE_TARGETS_EXT 0x20D3
#define GLX_BLENDED_RGBA_SGIS 0x8025
#define GLX_BLUE_SIZE 10
#define GLX_BUFFER_CLOBBER_MASK_SGIX 0x08000000
#define GLX_BUFFER_SIZE 2
#define GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK 0x04000000
#define GLX_BufferSwapComplete 1
#define GLX_COLOR_INDEX_BIT 0x00000002
#define GLX_COLOR_INDEX_BIT_SGIX 0x00000002
#define GLX_COLOR_INDEX_TYPE 0x8015
#define GLX_COLOR_INDEX_TYPE_SGIX 0x8015
#define GLX_COLOR_SAMPLES_NV 0x20B3
#define GLX_CONFIG_CAVEAT 0x20
#define GLX_CONTEXT_ALLOW_BUFFER_BYTE_ORDER_MISMATCH_ARB 0x2095
#define GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB 0x00000002
#define GLX_CONTEXT_CORE_PROFILE_BIT_ARB 0x00000001
#define GLX_CONTEXT_DEBUG_BIT_ARB 0x00000001
#define GLX_CONTEXT_ES2_PROFILE_BIT_EXT 0x00000004
#define GLX_CONTEXT_ES_PROFILE_BIT_EXT 0x00000004
#define GLX_CONTEXT_FLAGS_ARB 0x2094
#define GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB 0x00000002
#define GLX_CONTEXT_MAJOR_VERSION_ARB 0x2091
#define GLX_CONTEXT_MINOR_VERSION_ARB 0x2092
#define GLX_CONTEXT_MULTIGPU_ATTRIB_AFR_NV 0x20AC
#define GLX_CONTEXT_MULTIGPU_ATTRIB_MULTICAST_NV 0x20AD
#define GLX_CONTEXT_MULTIGPU_ATTRIB_MULTI_DISPLAY_MULTICAST_NV 0x20AE
#define GLX_CONTEXT_MULTIGPU_ATTRIB_NV 0x20AA
#define GLX_CONTEXT_MULTIGPU_ATTRIB_SINGLE_NV 0x20AB
#define GLX_CONTEXT_OPENGL_NO_ERROR_ARB 0x31B3
#define GLX_CONTEXT_PRIORITY_HIGH_EXT 0x3101
#define GLX_CONTEXT_PRIORITY_LEVEL_EXT 0x3100
#define GLX_CONTEXT_PRIORITY_LOW_EXT 0x3103
#define GLX_CONTEXT_PRIORITY_MEDIUM_EXT 0x3102
#define GLX_CONTEXT_PROFILE_MASK_ARB 0x9126
#define GLX_CONTEXT_RELEASE_BEHAVIOR_ARB 0x2097
#define GLX_CONTEXT_RELEASE_BEHAVIOR_FLUSH_ARB 0x2098
#define GLX_CONTEXT_RELEASE_BEHAVIOR_NONE_ARB 0
#define GLX_CONTEXT_RESET_ISOLATION_BIT_ARB 0x00000008
#define GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
#define GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB 0x00000004
#define GLX_COPY_COMPLETE_INTEL 0x8181
#define GLX_COVERAGE_SAMPLES_NV 100001
#define GLX_DAMAGED 0x8020
#define GLX_DAMAGED_SGIX 0x8020
#define GLX_DEPTH_BUFFER_BIT 0x00000020
#define GLX_DEPTH_BUFFER_BIT_SGIX 0x00000020
#define GLX_DEPTH_SIZE 12
#define GLX_DEVICE_ID_NV 0x20CD
#define GLX_DIRECT_COLOR 0x8003
#define GLX_DIRECT_COLOR_EXT 0x8003
#define GLX_DONT_CARE 0xFFFFFFFF
#define GLX_DOUBLEBUFFER 5
#define GLX_DRAWABLE_TYPE 0x8010
#define GLX_DRAWABLE_TYPE_SGIX 0x8010
#define GLX_EVENT_MASK 0x801F
#define GLX_EVENT_MASK_SGIX 0x801F
#define GLX_EXCHANGE_COMPLETE_INTEL 0x8180
#define GLX_EXTENSIONS 0x3
#define GLX_EXTENSION_NAME "GLX"
#define GLX_FBCONFIG_ID 0x8013
#define GLX_FBCONFIG_ID_SGIX 0x8013
#define GLX_FLIP_COMPLETE_INTEL 0x8182
#define GLX_FLOAT_COMPONENTS_NV 0x20B0
#define GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB 0x20B2
#define GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x20B2
#define GLX_FRONT_EXT 0x20DE
#define GLX_FRONT_LEFT_BUFFER_BIT 0x00000001
#define GLX_FRONT_LEFT_BUFFER_BIT_SGIX 0x00000001
#define GLX_FRONT_LEFT_EXT 0x20DE
#define GLX_FRONT_RIGHT_BUFFER_BIT 0x00000002
#define GLX_FRONT_RIGHT_BUFFER_BIT_SGIX 0x00000002
#define GLX_FRONT_RIGHT_EXT 0x20DF
#define GLX_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV 0x20F7
#define GLX_GPU_CLOCK_AMD 0x21A4
#define GLX_GPU_FASTEST_TARGET_GPUS_AMD 0x21A2
#define GLX_GPU_NUM_PIPES_AMD 0x21A5
#define GLX_GPU_NUM_RB_AMD 0x21A7
#define GLX_GPU_NUM_SIMD_AMD 0x21A6
#define GLX_GPU_NUM_SPI_AMD 0x21A8
#define GLX_GPU_OPENGL_VERSION_STRING_AMD 0x1F02
#define GLX_GPU_RAM_AMD 0x21A3
#define GLX_GPU_RENDERER_STRING_AMD 0x1F01
#define GLX_GPU_VENDOR_AMD 0x1F00
#define GLX_GRAY_SCALE 0x8006
#define GLX_GRAY_SCALE_EXT 0x8006
#define GLX_GREEN_SIZE 9
#define GLX_HEIGHT 0x801E
#define GLX_HEIGHT_SGIX 0x801E
#define GLX_HYPERPIPE_DISPLAY_PIPE_SGIX 0x00000001
#define GLX_HYPERPIPE_ID_SGIX 0x8030
#define GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX 80
#define GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX 0x00000004
#define GLX_HYPERPIPE_RENDER_PIPE_SGIX 0x00000002
#define GLX_HYPERPIPE_STEREO_SGIX 0x00000003
#define GLX_LARGEST_PBUFFER 0x801C
#define GLX_LARGEST_PBUFFER_SGIX 0x801C
#define GLX_LATE_SWAPS_TEAR_EXT 0x20F3
#define GLX_LEVEL 3
#define GLX_LOSE_CONTEXT_ON_RESET_ARB 0x8252
#define GLX_MAX_PBUFFER_HEIGHT 0x8017
#define GLX_MAX_PBUFFER_HEIGHT_SGIX 0x8017
#define GLX_MAX_PBUFFER_PIXELS 0x8018
#define GLX_MAX_PBUFFER_PIXELS_SGIX 0x8018
#define GLX_MAX_PBUFFER_WIDTH 0x8016
#define GLX_MAX_PBUFFER_WIDTH_SGIX 0x8016
#define GLX_MAX_SWAP_INTERVAL_EXT 0x20F2
#define GLX_MIPMAP_TEXTURE_EXT 0x20D7
#define GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS 0x8027
#define GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS 0x8026
#define GLX_NONE 0x8000
#define GLX_NONE_EXT 0x8000
#define GLX_NON_CONFORMANT_CONFIG 0x800D
#define GLX_NON_CONFORMANT_VISUAL_EXT 0x800D
#define GLX_NO_EXTENSION 3
#define GLX_NO_RESET_NOTIFICATION_ARB 0x8261
#define GLX_NUM_VIDEO_CAPTURE_SLOTS_NV 0x20CF
#define GLX_NUM_VIDEO_SLOTS_NV 0x20F0
#define GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX 0x801A
#define GLX_OPTIMAL_PBUFFER_WIDTH_SGIX 0x8019
#define GLX_PBUFFER 0x8023
#define GLX_PBUFFER_BIT 0x00000004
#define GLX_PBUFFER_BIT_SGIX 0x00000004
#define GLX_PBUFFER_CLOBBER_MASK 0x08000000
#define GLX_PBUFFER_HEIGHT 0x8040
#define GLX_PBUFFER_SGIX 0x8023
#define GLX_PBUFFER_WIDTH 0x8041
#define GLX_PIPE_RECT_LIMITS_SGIX 0x00000002
#define GLX_PIPE_RECT_SGIX 0x00000001
#define GLX_PIXMAP_BIT 0x00000002
#define GLX_PIXMAP_BIT_SGIX 0x00000002
#define GLX_PRESERVED_CONTENTS 0x801B
#define GLX_PRESERVED_CONTENTS_SGIX 0x801B
#define GLX_PSEUDO_COLOR 0x8004
#define GLX_PSEUDO_COLOR_EXT 0x8004
#define GLX_PbufferClobber 0
#define GLX_RED_SIZE 8
#define GLX_RENDERER_ACCELERATED_MESA 0x8186
#define GLX_RENDERER_DEVICE_ID_MESA 0x8184
#define GLX_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION_MESA 0x818B
#define GLX_RENDERER_OPENGL_CORE_PROFILE_VERSION_MESA 0x818A
#define GLX_RENDERER_OPENGL_ES2_PROFILE_VERSION_MESA 0x818D
#define GLX_RENDERER_OPENGL_ES_PROFILE_VERSION_MESA 0x818C
#define GLX_RENDERER_PREFERRED_PROFILE_MESA 0x8189
#define GLX_RENDERER_UNIFIED_MEMORY_ARCHITECTURE_MESA 0x8188
#define GLX_RENDERER_VENDOR_ID_MESA 0x8183
#define GLX_RENDERER_VERSION_MESA 0x8185
#define GLX_RENDERER_VIDEO_MEMORY_MESA 0x8187
#define GLX_RENDER_TYPE 0x8011
#define GLX_RENDER_TYPE_SGIX 0x8011
#define GLX_RGBA 4
#define GLX_RGBA_BIT 0x00000001
#define GLX_RGBA_BIT_SGIX 0x00000001
#define GLX_RGBA_FLOAT_BIT_ARB 0x00000004
#define GLX_RGBA_FLOAT_TYPE_ARB 0x20B9
#define GLX_RGBA_TYPE 0x8014
#define GLX_RGBA_TYPE_SGIX 0x8014
#define GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT 0x00000008
#define GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT 0x20B1
#define GLX_SAMPLES 100001
#define GLX_SAMPLES_3DFX 0x8051
#define GLX_SAMPLES_ARB 100001
#define GLX_SAMPLES_SGIS 100001
#define GLX_SAMPLE_BUFFERS 100000
#define GLX_SAMPLE_BUFFERS_3DFX 0x8050
#define GLX_SAMPLE_BUFFERS_ARB 100000
#define GLX_SAMPLE_BUFFERS_BIT_SGIX 0x00000100
#define GLX_SAMPLE_BUFFERS_SGIS 100000
#define GLX_SAVED 0x8021
#define GLX_SAVED_SGIX 0x8021
#define GLX_SCREEN 0x800C
#define GLX_SCREEN_EXT 0x800C
#define GLX_SHARE_CONTEXT_EXT 0x800A
#define GLX_SLOW_CONFIG 0x8001
#define GLX_SLOW_VISUAL_EXT 0x8001
#define GLX_STATIC_COLOR 0x8005
#define GLX_STATIC_COLOR_EXT 0x8005
#define GLX_STATIC_GRAY 0x8007
#define GLX_STATIC_GRAY_EXT 0x8007
#define GLX_STENCIL_BUFFER_BIT 0x00000040
#define GLX_STENCIL_BUFFER_BIT_SGIX 0x00000040
#define GLX_STENCIL_SIZE 13
#define GLX_STEREO 6
#define GLX_STEREO_NOTIFY_EXT 0x00000000
#define GLX_STEREO_NOTIFY_MASK_EXT 0x00000001
#define GLX_STEREO_TREE_EXT 0x20F5
#define GLX_SWAP_COPY_OML 0x8062
#define GLX_SWAP_EXCHANGE_OML 0x8061
#define GLX_SWAP_INTERVAL_EXT 0x20F1
#define GLX_SWAP_METHOD_OML 0x8060
#define GLX_SWAP_UNDEFINED_OML 0x8063
#define GLX_SYNC_FRAME_SGIX 0x00000000
#define GLX_SYNC_SWAP_SGIX 0x00000001
#define GLX_TEXTURE_1D_BIT_EXT 0x00000001
#define GLX_TEXTURE_1D_EXT 0x20DB
#define GLX_TEXTURE_2D_BIT_EXT 0x00000002
#define GLX_TEXTURE_2D_EXT 0x20DC
#define GLX_TEXTURE_FORMAT_EXT 0x20D5
#define GLX_TEXTURE_FORMAT_NONE_EXT 0x20D8
#define GLX_TEXTURE_FORMAT_RGBA_EXT 0x20DA
#define GLX_TEXTURE_FORMAT_RGB_EXT 0x20D9
#define GLX_TEXTURE_RECTANGLE_BIT_EXT 0x00000004
#define GLX_TEXTURE_RECTANGLE_EXT 0x20DD
#define GLX_TEXTURE_TARGET_EXT 0x20D6
#define GLX_TRANSPARENT_ALPHA_VALUE 0x28
#define GLX_TRANSPARENT_ALPHA_VALUE_EXT 0x28
#define GLX_TRANSPARENT_BLUE_VALUE 0x27
#define GLX_TRANSPARENT_BLUE_VALUE_EXT 0x27
#define GLX_TRANSPARENT_GREEN_VALUE 0x26
#define GLX_TRANSPARENT_GREEN_VALUE_EXT 0x26
#define GLX_TRANSPARENT_INDEX 0x8009
#define GLX_TRANSPARENT_INDEX_EXT 0x8009
#define GLX_TRANSPARENT_INDEX_VALUE 0x24
#define GLX_TRANSPARENT_INDEX_VALUE_EXT 0x24
#define GLX_TRANSPARENT_RED_VALUE 0x25
#define GLX_TRANSPARENT_RED_VALUE_EXT 0x25
#define GLX_TRANSPARENT_RGB 0x8008
#define GLX_TRANSPARENT_RGB_EXT 0x8008
#define GLX_TRANSPARENT_TYPE 0x23
#define GLX_TRANSPARENT_TYPE_EXT 0x23
#define GLX_TRUE_COLOR 0x8002
#define GLX_TRUE_COLOR_EXT 0x8002
#define GLX_UNIQUE_ID_NV 0x20CE
#define GLX_USE_GL 1
#define GLX_VENDOR 0x1
#define GLX_VENDOR_NAMES_EXT 0x20F6
#define GLX_VERSION 0x2
#define GLX_VIDEO_OUT_ALPHA_NV 0x20C4
#define GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV 0x20C6
#define GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV 0x20C7
#define GLX_VIDEO_OUT_COLOR_NV 0x20C3
#define GLX_VIDEO_OUT_DEPTH_NV 0x20C5
#define GLX_VIDEO_OUT_FIELD_1_NV 0x20C9
#define GLX_VIDEO_OUT_FIELD_2_NV 0x20CA
#define GLX_VIDEO_OUT_FRAME_NV 0x20C8
#define GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV 0x20CB
#define GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV 0x20CC
#define GLX_VISUAL_CAVEAT_EXT 0x20
#define GLX_VISUAL_ID 0x800B
#define GLX_VISUAL_ID_EXT 0x800B
#define GLX_VISUAL_SELECT_GROUP_SGIX 0x8028
#define GLX_WIDTH 0x801D
#define GLX_WIDTH_SGIX 0x801D
#define GLX_WINDOW 0x8022
#define GLX_WINDOW_BIT 0x00000001
#define GLX_WINDOW_BIT_SGIX 0x00000001
#define GLX_WINDOW_SGIX 0x8022
#define GLX_X_RENDERABLE 0x8012
#define GLX_X_RENDERABLE_SGIX 0x8012
#define GLX_X_VISUAL_TYPE 0x22
#define GLX_X_VISUAL_TYPE_EXT 0x22
#define GLX_Y_INVERTED_EXT 0x20D4
#define __GLX_NUMBER_EVENTS 17


#ifndef GLEXT_64_TYPES_DEFINED
/* This code block is duplicated in glext.h, so must be protected */
#define GLEXT_64_TYPES_DEFINED
/* Define int32_t, int64_t, and uint64_t types for UST/MSC */
/* (as used in the GLX_OML_sync_control extension). */
#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
#elif defined(__sun__) || defined(__digital__)
#include <inttypes.h>
#if defined(__STDC__)
#if defined(__arch64__) || defined(_LP64)
typedef long int int64_t;
typedef unsigned long int uint64_t;
#else
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#endif /* __arch64__ */
#endif /* __STDC__ */
#elif defined( __VMS ) || defined(__sgi)
#include <inttypes.h>
#elif defined(__SCO__) || defined(__USLC__)
#include <stdint.h>
#elif defined(__UNIXOS2__) || defined(__SOL64__)
typedef long int int32_t;
typedef long long int int64_t;
typedef unsigned long long int uint64_t;
#elif defined(_WIN32) && defined(__GNUC__)
#include <stdint.h>
#elif defined(_WIN32)
typedef __int32 int32_t;
typedef __int64 int64_t;
typedef unsigned __int64 uint64_t;
#else
/* Fallback if nothing above works */
#include <inttypes.h>
#endif
#endif

















#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)

#else

#endif

#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)

#else

#endif







typedef XID GLXFBConfigID;
typedef struct __GLXFBConfigRec *GLXFBConfig;
typedef XID GLXContextID;
typedef struct __GLXcontextRec *GLXContext;
typedef XID GLXPixmap;
typedef XID GLXDrawable;
typedef XID GLXWindow;
typedef XID GLXPbuffer;
typedef void (GLAD_API_PTR *__GLXextFuncPtr)(void);
typedef XID GLXVideoCaptureDeviceNV;
typedef unsigned int GLXVideoDeviceNV;
typedef XID GLXVideoSourceSGIX;
typedef XID GLXFBConfigIDSGIX;
typedef struct __GLXFBConfigRec *GLXFBConfigSGIX;
typedef XID GLXPbufferSGIX;
typedef struct {
    int event_type;             /* GLX_DAMAGED or GLX_SAVED */
    int draw_type;              /* GLX_WINDOW or GLX_PBUFFER */
    unsigned long serial;       /* # of last request processed by server */
    Bool send_event;            /* true if this came for SendEvent request */
    Display *display;           /* display the event was read from */
    GLXDrawable drawable;       /* XID of Drawable */
    unsigned int buffer_mask;   /* mask indicating which buffers are affected */
    unsigned int aux_buffer;    /* which aux buffer was affected */
    int x, y;
    int width, height;
    int count;                  /* if nonzero, at least this many more */
} GLXPbufferClobberEvent;
typedef struct {
    int type;
    unsigned long serial;       /* # of last request processed by server */
    Bool send_event;            /* true if this came from a SendEvent request */
    Display *display;           /* Display the event was read from */
    GLXDrawable drawable;       /* drawable on which event was requested in event mask */
    int event_type;
    int64_t ust;
    int64_t msc;
    int64_t sbc;
} GLXBufferSwapComplete;
typedef union __GLXEvent {
    GLXPbufferClobberEvent glxpbufferclobber;
    GLXBufferSwapComplete glxbufferswapcomplete;
    long pad[24];
} GLXEvent;
typedef struct {
    int type;
    unsigned long serial;
    Bool send_event;
    Display *display;
    int extension;
    int evtype;
    GLXDrawable window;
    Bool stereo_tree;
} GLXStereoNotifyEventEXT;
typedef struct {
    int type;
    unsigned long serial;   /* # of last request processed by server */
    Bool send_event;        /* true if this came for SendEvent request */
    Display *display;       /* display the event was read from */
    GLXDrawable drawable;   /* i.d. of Drawable */
    int event_type;         /* GLX_DAMAGED_SGIX or GLX_SAVED_SGIX */
    int draw_type;          /* GLX_WINDOW_SGIX or GLX_PBUFFER_SGIX */
    unsigned int mask;      /* mask indicating which buffers are affected*/
    int x, y;
    int width, height;
    int count;              /* if nonzero, at least this many more */
} GLXBufferClobberEventSGIX;
typedef struct {
    char    pipeName[80]; /* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] */
    int     networkId;
} GLXHyperpipeNetworkSGIX;
typedef struct {
    char    pipeName[80]; /* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] */
    int     channel;
    unsigned int participationType;
    int     timeSlice;
} GLXHyperpipeConfigSGIX;
typedef struct {
    char pipeName[80]; /* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] */
    int srcXOrigin, srcYOrigin, srcWidth, srcHeight;
    int destXOrigin, destYOrigin, destWidth, destHeight;
} GLXPipeRect;
typedef struct {
    char pipeName[80]; /* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] */
    int XOrigin, YOrigin, maxHeight, maxWidth;
} GLXPipeRectLimits;


#define GLX_VERSION_1_0 1
GLAD_API_CALL int GLAD_GLX_VERSION_1_0;
#define GLX_VERSION_1_1 1
GLAD_API_CALL int GLAD_GLX_VERSION_1_1;
#define GLX_VERSION_1_2 1
GLAD_API_CALL int GLAD_GLX_VERSION_1_2;
#define GLX_VERSION_1_3 1
GLAD_API_CALL int GLAD_GLX_VERSION_1_3;
#define GLX_VERSION_1_4 1
GLAD_API_CALL int GLAD_GLX_VERSION_1_4;
#define GLX_3DFX_multisample 1
GLAD_API_CALL int GLAD_GLX_3DFX_multisample;
#define GLX_AMD_gpu_association 1
GLAD_API_CALL int GLAD_GLX_AMD_gpu_association;
#define GLX_ARB_context_flush_control 1
GLAD_API_CALL int GLAD_GLX_ARB_context_flush_control;
#define GLX_ARB_create_context 1
GLAD_API_CALL int GLAD_GLX_ARB_create_context;
#define GLX_ARB_create_context_no_error 1
GLAD_API_CALL int GLAD_GLX_ARB_create_context_no_error;
#define GLX_ARB_create_context_profile 1
GLAD_API_CALL int GLAD_GLX_ARB_create_context_profile;
#define GLX_ARB_create_context_robustness 1
GLAD_API_CALL int GLAD_GLX_ARB_create_context_robustness;
#define GLX_ARB_fbconfig_float 1
GLAD_API_CALL int GLAD_GLX_ARB_fbconfig_float;
#define GLX_ARB_framebuffer_sRGB 1
GLAD_API_CALL int GLAD_GLX_ARB_framebuffer_sRGB;
#define GLX_ARB_get_proc_address 1
GLAD_API_CALL int GLAD_GLX_ARB_get_proc_address;
#define GLX_ARB_multisample 1
GLAD_API_CALL int GLAD_GLX_ARB_multisample;
#define GLX_ARB_robustness_application_isolation 1
GLAD_API_CALL int GLAD_GLX_ARB_robustness_application_isolation;
#define GLX_ARB_robustness_share_group_isolation 1
GLAD_API_CALL int GLAD_GLX_ARB_robustness_share_group_isolation;
#define GLX_ARB_vertex_buffer_object 1
GLAD_API_CALL int GLAD_GLX_ARB_vertex_buffer_object;
#define GLX_EXT_buffer_age 1
GLAD_API_CALL int GLAD_GLX_EXT_buffer_age;
#define GLX_EXT_context_priority 1
GLAD_API_CALL int GLAD_GLX_EXT_context_priority;
#define GLX_EXT_create_context_es2_profile 1
GLAD_API_CALL int GLAD_GLX_EXT_create_context_es2_profile;
#define GLX_EXT_create_context_es_profile 1
GLAD_API_CALL int GLAD_GLX_EXT_create_context_es_profile;
#define GLX_EXT_fbconfig_packed_float 1
GLAD_API_CALL int GLAD_GLX_EXT_fbconfig_packed_float;
#define GLX_EXT_framebuffer_sRGB 1
GLAD_API_CALL int GLAD_GLX_EXT_framebuffer_sRGB;
#define GLX_EXT_get_drawable_type 1
GLAD_API_CALL int GLAD_GLX_EXT_get_drawable_type;
#define GLX_EXT_import_context 1
GLAD_API_CALL int GLAD_GLX_EXT_import_context;
#define GLX_EXT_libglvnd 1
GLAD_API_CALL int GLAD_GLX_EXT_libglvnd;
#define GLX_EXT_no_config_context 1
GLAD_API_CALL int GLAD_GLX_EXT_no_config_context;
#define GLX_EXT_stereo_tree 1
GLAD_API_CALL int GLAD_GLX_EXT_stereo_tree;
#define GLX_EXT_swap_control 1
GLAD_API_CALL int GLAD_GLX_EXT_swap_control;
#define GLX_EXT_swap_control_tear 1
GLAD_API_CALL int GLAD_GLX_EXT_swap_control_tear;
#define GLX_EXT_texture_from_pixmap 1
GLAD_API_CALL int GLAD_GLX_EXT_texture_from_pixmap;
#define GLX_EXT_visual_info 1
GLAD_API_CALL int GLAD_GLX_EXT_visual_info;
#define GLX_EXT_visual_rating 1
GLAD_API_CALL int GLAD_GLX_EXT_visual_rating;
#define GLX_INTEL_swap_event 1
GLAD_API_CALL int GLAD_GLX_INTEL_swap_event;
#define GLX_MESA_agp_offset 1
GLAD_API_CALL int GLAD_GLX_MESA_agp_offset;
#define GLX_MESA_copy_sub_buffer 1
GLAD_API_CALL int GLAD_GLX_MESA_copy_sub_buffer;
#define GLX_MESA_pixmap_colormap 1
GLAD_API_CALL int GLAD_GLX_MESA_pixmap_colormap;
#define GLX_MESA_query_renderer 1
GLAD_API_CALL int GLAD_GLX_MESA_query_renderer;
#define GLX_MESA_release_buffers 1
GLAD_API_CALL int GLAD_GLX_MESA_release_buffers;
#define GLX_MESA_set_3dfx_mode 1
GLAD_API_CALL int GLAD_GLX_MESA_set_3dfx_mode;
#define GLX_MESA_swap_control 1
GLAD_API_CALL int GLAD_GLX_MESA_swap_control;
#define GLX_NV_copy_buffer 1
GLAD_API_CALL int GLAD_GLX_NV_copy_buffer;
#define GLX_NV_copy_image 1
GLAD_API_CALL int GLAD_GLX_NV_copy_image;
#define GLX_NV_delay_before_swap 1
GLAD_API_CALL int GLAD_GLX_NV_delay_before_swap;
#define GLX_NV_float_buffer 1
GLAD_API_CALL int GLAD_GLX_NV_float_buffer;
#define GLX_NV_multigpu_context 1
GLAD_API_CALL int GLAD_GLX_NV_multigpu_context;
#define GLX_NV_multisample_coverage 1
GLAD_API_CALL int GLAD_GLX_NV_multisample_coverage;
#define GLX_NV_present_video 1
GLAD_API_CALL int GLAD_GLX_NV_present_video;
#define GLX_NV_robustness_video_memory_purge 1
GLAD_API_CALL int GLAD_GLX_NV_robustness_video_memory_purge;
#define GLX_NV_swap_group 1
GLAD_API_CALL int GLAD_GLX_NV_swap_group;
#define GLX_NV_video_capture 1
GLAD_API_CALL int GLAD_GLX_NV_video_capture;
#define GLX_NV_video_out 1
GLAD_API_CALL int GLAD_GLX_NV_video_out;
#define GLX_OML_swap_method 1
GLAD_API_CALL int GLAD_GLX_OML_swap_method;
#define GLX_OML_sync_control 1
GLAD_API_CALL int GLAD_GLX_OML_sync_control;
#define GLX_SGIS_blended_overlay 1
GLAD_API_CALL int GLAD_GLX_SGIS_blended_overlay;
#define GLX_SGIS_multisample 1
GLAD_API_CALL int GLAD_GLX_SGIS_multisample;
#define GLX_SGIS_shared_multisample 1
GLAD_API_CALL int GLAD_GLX_SGIS_shared_multisample;
#define GLX_SGIX_fbconfig 1
GLAD_API_CALL int GLAD_GLX_SGIX_fbconfig;
#define GLX_SGIX_hyperpipe 1
GLAD_API_CALL int GLAD_GLX_SGIX_hyperpipe;
#define GLX_SGIX_pbuffer 1
GLAD_API_CALL int GLAD_GLX_SGIX_pbuffer;
#define GLX_SGIX_swap_barrier 1
GLAD_API_CALL int GLAD_GLX_SGIX_swap_barrier;
#define GLX_SGIX_swap_group 1
GLAD_API_CALL int GLAD_GLX_SGIX_swap_group;
#define GLX_SGIX_video_resize 1
GLAD_API_CALL int GLAD_GLX_SGIX_video_resize;
#define GLX_SGIX_visual_select_group 1
GLAD_API_CALL int GLAD_GLX_SGIX_visual_select_group;
#define GLX_SGI_cushion 1
GLAD_API_CALL int GLAD_GLX_SGI_cushion;
#define GLX_SGI_make_current_read 1
GLAD_API_CALL int GLAD_GLX_SGI_make_current_read;
#define GLX_SGI_swap_control 1
GLAD_API_CALL int GLAD_GLX_SGI_swap_control;
#define GLX_SGI_video_sync 1
GLAD_API_CALL int GLAD_GLX_SGI_video_sync;
#define GLX_SUN_get_transparent_index 1
GLAD_API_CALL int GLAD_GLX_SUN_get_transparent_index;


typedef int (GLAD_API_PTR *PFNGLXBINDCHANNELTOWINDOWSGIXPROC)(Display * display, int screen, int channel, Window window);
typedef int (GLAD_API_PTR *PFNGLXBINDHYPERPIPESGIXPROC)(Display * dpy, int hpId);
typedef Bool (GLAD_API_PTR *PFNGLXBINDSWAPBARRIERNVPROC)(Display * dpy, GLuint group, GLuint barrier);
typedef void (GLAD_API_PTR *PFNGLXBINDSWAPBARRIERSGIXPROC)(Display * dpy, GLXDrawable drawable, int barrier);
typedef void (GLAD_API_PTR *PFNGLXBINDTEXIMAGEEXTPROC)(Display * dpy, GLXDrawable drawable, int buffer, const int * attrib_list);
typedef int (GLAD_API_PTR *PFNGLXBINDVIDEOCAPTUREDEVICENVPROC)(Display * dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device);
typedef int (GLAD_API_PTR *PFNGLXBINDVIDEODEVICENVPROC)(Display * dpy, unsigned int video_slot, unsigned int video_device, const int * attrib_list);
typedef int (GLAD_API_PTR *PFNGLXBINDVIDEOIMAGENVPROC)(Display * dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer);
typedef void (GLAD_API_PTR *PFNGLXBLITCONTEXTFRAMEBUFFERAMDPROC)(GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
typedef int (GLAD_API_PTR *PFNGLXCHANNELRECTSGIXPROC)(Display * display, int screen, int channel, int x, int y, int w, int h);
typedef int (GLAD_API_PTR *PFNGLXCHANNELRECTSYNCSGIXPROC)(Display * display, int screen, int channel, GLenum synctype);
typedef GLXFBConfig * (GLAD_API_PTR *PFNGLXCHOOSEFBCONFIGPROC)(Display * dpy, int screen, const int * attrib_list, int * nelements);
typedef GLXFBConfigSGIX * (GLAD_API_PTR *PFNGLXCHOOSEFBCONFIGSGIXPROC)(Display * dpy, int screen, int * attrib_list, int * nelements);
typedef XVisualInfo * (GLAD_API_PTR *PFNGLXCHOOSEVISUALPROC)(Display * dpy, int screen, int * attribList);
typedef void (GLAD_API_PTR *PFNGLXCOPYBUFFERSUBDATANVPROC)(Display * dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef void (GLAD_API_PTR *PFNGLXCOPYCONTEXTPROC)(Display * dpy, GLXContext src, GLXContext dst, unsigned long mask);
typedef void (GLAD_API_PTR *PFNGLXCOPYIMAGESUBDATANVPROC)(Display * dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
typedef void (GLAD_API_PTR *PFNGLXCOPYSUBBUFFERMESAPROC)(Display * dpy, GLXDrawable drawable, int x, int y, int width, int height);
typedef GLXContext (GLAD_API_PTR *PFNGLXCREATEASSOCIATEDCONTEXTAMDPROC)(unsigned int id, GLXContext share_list);
typedef GLXContext (GLAD_API_PTR *PFNGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC)(unsigned int id, GLXContext share_context, const int * attribList);
typedef GLXContext (GLAD_API_PTR *PFNGLXCREATECONTEXTPROC)(Display * dpy, XVisualInfo * vis, GLXContext shareList, Bool direct);
typedef GLXContext (GLAD_API_PTR *PFNGLXCREATECONTEXTATTRIBSARBPROC)(Display * dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int * attrib_list);
typedef GLXContext (GLAD_API_PTR *PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC)(Display * dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, Bool direct);
typedef GLXPbufferSGIX (GLAD_API_PTR *PFNGLXCREATEGLXPBUFFERSGIXPROC)(Display * dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int * attrib_list);
typedef GLXPixmap (GLAD_API_PTR *PFNGLXCREATEGLXPIXMAPPROC)(Display * dpy, XVisualInfo * visual, Pixmap pixmap);
typedef GLXPixmap (GLAD_API_PTR *PFNGLXCREATEGLXPIXMAPMESAPROC)(Display * dpy, XVisualInfo * visual, Pixmap pixmap, Colormap cmap);
typedef GLXPixmap (GLAD_API_PTR *PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC)(Display * dpy, GLXFBConfigSGIX config, Pixmap pixmap);
typedef GLXContext (GLAD_API_PTR *PFNGLXCREATENEWCONTEXTPROC)(Display * dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct);
typedef GLXPbuffer (GLAD_API_PTR *PFNGLXCREATEPBUFFERPROC)(Display * dpy, GLXFBConfig config, const int * attrib_list);
typedef GLXPixmap (GLAD_API_PTR *PFNGLXCREATEPIXMAPPROC)(Display * dpy, GLXFBConfig config, Pixmap pixmap, const int * attrib_list);
typedef GLXWindow (GLAD_API_PTR *PFNGLXCREATEWINDOWPROC)(Display * dpy, GLXFBConfig config, Window win, const int * attrib_list);
typedef void (GLAD_API_PTR *PFNGLXCUSHIONSGIPROC)(Display * dpy, Window window, float cushion);
typedef Bool (GLAD_API_PTR *PFNGLXDELAYBEFORESWAPNVPROC)(Display * dpy, GLXDrawable drawable, GLfloat seconds);
typedef Bool (GLAD_API_PTR *PFNGLXDELETEASSOCIATEDCONTEXTAMDPROC)(GLXContext ctx);
typedef void (GLAD_API_PTR *PFNGLXDESTROYCONTEXTPROC)(Display * dpy, GLXContext ctx);
typedef void (GLAD_API_PTR *PFNGLXDESTROYGLXPBUFFERSGIXPROC)(Display * dpy, GLXPbufferSGIX pbuf);
typedef void (GLAD_API_PTR *PFNGLXDESTROYGLXPIXMAPPROC)(Display * dpy, GLXPixmap pixmap);
typedef int (GLAD_API_PTR *PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC)(Display * dpy, int hpId);
typedef void (GLAD_API_PTR *PFNGLXDESTROYPBUFFERPROC)(Display * dpy, GLXPbuffer pbuf);
typedef void (GLAD_API_PTR *PFNGLXDESTROYPIXMAPPROC)(Display * dpy, GLXPixmap pixmap);
typedef void (GLAD_API_PTR *PFNGLXDESTROYWINDOWPROC)(Display * dpy, GLXWindow win);
typedef GLXVideoCaptureDeviceNV * (GLAD_API_PTR *PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC)(Display * dpy, int screen, int * nelements);
typedef unsigned int * (GLAD_API_PTR *PFNGLXENUMERATEVIDEODEVICESNVPROC)(Display * dpy, int screen, int * nelements);
typedef void (GLAD_API_PTR *PFNGLXFREECONTEXTEXTPROC)(Display * dpy, GLXContext context);
typedef unsigned int (GLAD_API_PTR *PFNGLXGETAGPOFFSETMESAPROC)(const void * pointer);
typedef const char * (GLAD_API_PTR *PFNGLXGETCLIENTSTRINGPROC)(Display * dpy, int name);
typedef int (GLAD_API_PTR *PFNGLXGETCONFIGPROC)(Display * dpy, XVisualInfo * visual, int attrib, int * value);
typedef unsigned int (GLAD_API_PTR *PFNGLXGETCONTEXTGPUIDAMDPROC)(GLXContext ctx);
typedef GLXContextID (GLAD_API_PTR *PFNGLXGETCONTEXTIDEXTPROC)(const GLXContext context);
typedef GLXContext (GLAD_API_PTR *PFNGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC)(void);
typedef GLXContext (GLAD_API_PTR *PFNGLXGETCURRENTCONTEXTPROC)(void);
typedef Display * (GLAD_API_PTR *PFNGLXGETCURRENTDISPLAYPROC)(void);
typedef Display * (GLAD_API_PTR *PFNGLXGETCURRENTDISPLAYEXTPROC)(void);
typedef GLXDrawable (GLAD_API_PTR *PFNGLXGETCURRENTDRAWABLEPROC)(void);
typedef GLXDrawable (GLAD_API_PTR *PFNGLXGETCURRENTREADDRAWABLEPROC)(void);
typedef GLXDrawable (GLAD_API_PTR *PFNGLXGETCURRENTREADDRAWABLESGIPROC)(void);
typedef int (GLAD_API_PTR *PFNGLXGETFBCONFIGATTRIBPROC)(Display * dpy, GLXFBConfig config, int attribute, int * value);
typedef int (GLAD_API_PTR *PFNGLXGETFBCONFIGATTRIBSGIXPROC)(Display * dpy, GLXFBConfigSGIX config, int attribute, int * value);
typedef GLXFBConfigSGIX (GLAD_API_PTR *PFNGLXGETFBCONFIGFROMVISUALSGIXPROC)(Display * dpy, XVisualInfo * vis);
typedef GLXFBConfig * (GLAD_API_PTR *PFNGLXGETFBCONFIGSPROC)(Display * dpy, int screen, int * nelements);
typedef unsigned int (GLAD_API_PTR *PFNGLXGETGPUIDSAMDPROC)(unsigned int maxCount, unsigned int * ids);
typedef int (GLAD_API_PTR *PFNGLXGETGPUINFOAMDPROC)(unsigned int id, int property, GLenum dataType, unsigned int size, void * data);
typedef Bool (GLAD_API_PTR *PFNGLXGETMSCRATEOMLPROC)(Display * dpy, GLXDrawable drawable, int32_t * numerator, int32_t * denominator);
typedef __GLXextFuncPtr (GLAD_API_PTR *PFNGLXGETPROCADDRESSPROC)(const GLubyte * procName);
typedef __GLXextFuncPtr (GLAD_API_PTR *PFNGLXGETPROCADDRESSARBPROC)(const GLubyte * procName);
typedef void (GLAD_API_PTR *PFNGLXGETSELECTEDEVENTPROC)(Display * dpy, GLXDrawable draw, unsigned long * event_mask);
typedef void (GLAD_API_PTR *PFNGLXGETSELECTEDEVENTSGIXPROC)(Display * dpy, GLXDrawable drawable, unsigned long * mask);
typedef int (GLAD_API_PTR *PFNGLXGETSWAPINTERVALMESAPROC)(void);
typedef Bool (GLAD_API_PTR *PFNGLXGETSYNCVALUESOMLPROC)(Display * dpy, GLXDrawable drawable, int64_t * ust, int64_t * msc, int64_t * sbc);
typedef Status (GLAD_API_PTR *PFNGLXGETTRANSPARENTINDEXSUNPROC)(Display * dpy, Window overlay, Window underlay, unsigned long * pTransparentIndex);
typedef int (GLAD_API_PTR *PFNGLXGETVIDEODEVICENVPROC)(Display * dpy, int screen, int numVideoDevices, GLXVideoDeviceNV * pVideoDevice);
typedef int (GLAD_API_PTR *PFNGLXGETVIDEOINFONVPROC)(Display * dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long * pulCounterOutputPbuffer, unsigned long * pulCounterOutputVideo);
typedef int (GLAD_API_PTR *PFNGLXGETVIDEOSYNCSGIPROC)(unsigned int * count);
typedef XVisualInfo * (GLAD_API_PTR *PFNGLXGETVISUALFROMFBCONFIGPROC)(Display * dpy, GLXFBConfig config);
typedef XVisualInfo * (GLAD_API_PTR *PFNGLXGETVISUALFROMFBCONFIGSGIXPROC)(Display * dpy, GLXFBConfigSGIX config);
typedef int (GLAD_API_PTR *PFNGLXHYPERPIPEATTRIBSGIXPROC)(Display * dpy, int timeSlice, int attrib, int size, void * attribList);
typedef int (GLAD_API_PTR *PFNGLXHYPERPIPECONFIGSGIXPROC)(Display * dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX * cfg, int * hpId);
typedef GLXContext (GLAD_API_PTR *PFNGLXIMPORTCONTEXTEXTPROC)(Display * dpy, GLXContextID contextID);
typedef Bool (GLAD_API_PTR *PFNGLXISDIRECTPROC)(Display * dpy, GLXContext ctx);
typedef Bool (GLAD_API_PTR *PFNGLXJOINSWAPGROUPNVPROC)(Display * dpy, GLXDrawable drawable, GLuint group);
typedef void (GLAD_API_PTR *PFNGLXJOINSWAPGROUPSGIXPROC)(Display * dpy, GLXDrawable drawable, GLXDrawable member);
typedef void (GLAD_API_PTR *PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC)(Display * dpy, GLXVideoCaptureDeviceNV device);
typedef Bool (GLAD_API_PTR *PFNGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC)(GLXContext ctx);
typedef Bool (GLAD_API_PTR *PFNGLXMAKECONTEXTCURRENTPROC)(Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
typedef Bool (GLAD_API_PTR *PFNGLXMAKECURRENTPROC)(Display * dpy, GLXDrawable drawable, GLXContext ctx);
typedef Bool (GLAD_API_PTR *PFNGLXMAKECURRENTREADSGIPROC)(Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx);
typedef void (GLAD_API_PTR *PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC)(Display * dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
typedef int (GLAD_API_PTR *PFNGLXQUERYCHANNELDELTASSGIXPROC)(Display * display, int screen, int channel, int * x, int * y, int * w, int * h);
typedef int (GLAD_API_PTR *PFNGLXQUERYCHANNELRECTSGIXPROC)(Display * display, int screen, int channel, int * dx, int * dy, int * dw, int * dh);
typedef int (GLAD_API_PTR *PFNGLXQUERYCONTEXTPROC)(Display * dpy, GLXContext ctx, int attribute, int * value);
typedef int (GLAD_API_PTR *PFNGLXQUERYCONTEXTINFOEXTPROC)(Display * dpy, GLXContext context, int attribute, int * value);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC)(int attribute, unsigned int * value);
typedef const char * (GLAD_API_PTR *PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC)(int attribute);
typedef void (GLAD_API_PTR *PFNGLXQUERYDRAWABLEPROC)(Display * dpy, GLXDrawable draw, int attribute, unsigned int * value);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYEXTENSIONPROC)(Display * dpy, int * errorb, int * event);
typedef const char * (GLAD_API_PTR *PFNGLXQUERYEXTENSIONSSTRINGPROC)(Display * dpy, int screen);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYFRAMECOUNTNVPROC)(Display * dpy, int screen, GLuint * count);
typedef void (GLAD_API_PTR *PFNGLXQUERYGLXPBUFFERSGIXPROC)(Display * dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int * value);
typedef int (GLAD_API_PTR *PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC)(Display * dpy, int timeSlice, int attrib, int size, void * returnAttribList);
typedef int (GLAD_API_PTR *PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC)(Display * dpy, int timeSlice, int attrib, int size, void * attribList, void * returnAttribList);
typedef GLXHyperpipeConfigSGIX * (GLAD_API_PTR *PFNGLXQUERYHYPERPIPECONFIGSGIXPROC)(Display * dpy, int hpId, int * npipes);
typedef GLXHyperpipeNetworkSGIX * (GLAD_API_PTR *PFNGLXQUERYHYPERPIPENETWORKSGIXPROC)(Display * dpy, int * npipes);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC)(Display * dpy, int screen, int * max);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYMAXSWAPGROUPSNVPROC)(Display * dpy, int screen, GLuint * maxGroups, GLuint * maxBarriers);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYRENDERERINTEGERMESAPROC)(Display * dpy, int screen, int renderer, int attribute, unsigned int * value);
typedef const char * (GLAD_API_PTR *PFNGLXQUERYRENDERERSTRINGMESAPROC)(Display * dpy, int screen, int renderer, int attribute);
typedef const char * (GLAD_API_PTR *PFNGLXQUERYSERVERSTRINGPROC)(Display * dpy, int screen, int name);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYSWAPGROUPNVPROC)(Display * dpy, GLXDrawable drawable, GLuint * group, GLuint * barrier);
typedef Bool (GLAD_API_PTR *PFNGLXQUERYVERSIONPROC)(Display * dpy, int * maj, int * min);
typedef int (GLAD_API_PTR *PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC)(Display * dpy, GLXVideoCaptureDeviceNV device, int attribute, int * value);
typedef Bool (GLAD_API_PTR *PFNGLXRELEASEBUFFERSMESAPROC)(Display * dpy, GLXDrawable drawable);
typedef void (GLAD_API_PTR *PFNGLXRELEASETEXIMAGEEXTPROC)(Display * dpy, GLXDrawable drawable, int buffer);
typedef void (GLAD_API_PTR *PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC)(Display * dpy, GLXVideoCaptureDeviceNV device);
typedef int (GLAD_API_PTR *PFNGLXRELEASEVIDEODEVICENVPROC)(Display * dpy, int screen, GLXVideoDeviceNV VideoDevice);
typedef int (GLAD_API_PTR *PFNGLXRELEASEVIDEOIMAGENVPROC)(Display * dpy, GLXPbuffer pbuf);
typedef Bool (GLAD_API_PTR *PFNGLXRESETFRAMECOUNTNVPROC)(Display * dpy, int screen);
typedef void (GLAD_API_PTR *PFNGLXSELECTEVENTPROC)(Display * dpy, GLXDrawable draw, unsigned long event_mask);
typedef void (GLAD_API_PTR *PFNGLXSELECTEVENTSGIXPROC)(Display * dpy, GLXDrawable drawable, unsigned long mask);
typedef int (GLAD_API_PTR *PFNGLXSENDPBUFFERTOVIDEONVPROC)(Display * dpy, GLXPbuffer pbuf, int iBufferType, unsigned long * pulCounterPbuffer, GLboolean bBlock);
typedef GLboolean (GLAD_API_PTR *PFNGLXSET3DFXMODEMESAPROC)(GLint mode);
typedef void (GLAD_API_PTR *PFNGLXSWAPBUFFERSPROC)(Display * dpy, GLXDrawable drawable);
typedef int64_t (GLAD_API_PTR *PFNGLXSWAPBUFFERSMSCOMLPROC)(Display * dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder);
typedef void (GLAD_API_PTR *PFNGLXSWAPINTERVALEXTPROC)(Display * dpy, GLXDrawable drawable, int interval);
typedef int (GLAD_API_PTR *PFNGLXSWAPINTERVALMESAPROC)(unsigned int interval);
typedef int (GLAD_API_PTR *PFNGLXSWAPINTERVALSGIPROC)(int interval);
typedef void (GLAD_API_PTR *PFNGLXUSEXFONTPROC)(Font font, int first, int count, int list);
typedef Bool (GLAD_API_PTR *PFNGLXWAITFORMSCOMLPROC)(Display * dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t * ust, int64_t * msc, int64_t * sbc);
typedef Bool (GLAD_API_PTR *PFNGLXWAITFORSBCOMLPROC)(Display * dpy, GLXDrawable drawable, int64_t target_sbc, int64_t * ust, int64_t * msc, int64_t * sbc);
typedef void (GLAD_API_PTR *PFNGLXWAITGLPROC)(void);
typedef int (GLAD_API_PTR *PFNGLXWAITVIDEOSYNCSGIPROC)(int divisor, int remainder, unsigned int * count);
typedef void (GLAD_API_PTR *PFNGLXWAITXPROC)(void);

GLAD_API_CALL PFNGLXBINDCHANNELTOWINDOWSGIXPROC glad_glXBindChannelToWindowSGIX;
GLAD_API_CALL PFNGLXBINDCHANNELTOWINDOWSGIXPROC glad_debug_glXBindChannelToWindowSGIX;
#define glXBindChannelToWindowSGIX glad_debug_glXBindChannelToWindowSGIX
GLAD_API_CALL PFNGLXBINDHYPERPIPESGIXPROC glad_glXBindHyperpipeSGIX;
GLAD_API_CALL PFNGLXBINDHYPERPIPESGIXPROC glad_debug_glXBindHyperpipeSGIX;
#define glXBindHyperpipeSGIX glad_debug_glXBindHyperpipeSGIX
GLAD_API_CALL PFNGLXBINDSWAPBARRIERNVPROC glad_glXBindSwapBarrierNV;
GLAD_API_CALL PFNGLXBINDSWAPBARRIERNVPROC glad_debug_glXBindSwapBarrierNV;
#define glXBindSwapBarrierNV glad_debug_glXBindSwapBarrierNV
GLAD_API_CALL PFNGLXBINDSWAPBARRIERSGIXPROC glad_glXBindSwapBarrierSGIX;
GLAD_API_CALL PFNGLXBINDSWAPBARRIERSGIXPROC glad_debug_glXBindSwapBarrierSGIX;
#define glXBindSwapBarrierSGIX glad_debug_glXBindSwapBarrierSGIX
GLAD_API_CALL PFNGLXBINDTEXIMAGEEXTPROC glad_glXBindTexImageEXT;
GLAD_API_CALL PFNGLXBINDTEXIMAGEEXTPROC glad_debug_glXBindTexImageEXT;
#define glXBindTexImageEXT glad_debug_glXBindTexImageEXT
GLAD_API_CALL PFNGLXBINDVIDEOCAPTUREDEVICENVPROC glad_glXBindVideoCaptureDeviceNV;
GLAD_API_CALL PFNGLXBINDVIDEOCAPTUREDEVICENVPROC glad_debug_glXBindVideoCaptureDeviceNV;
#define glXBindVideoCaptureDeviceNV glad_debug_glXBindVideoCaptureDeviceNV
GLAD_API_CALL PFNGLXBINDVIDEODEVICENVPROC glad_glXBindVideoDeviceNV;
GLAD_API_CALL PFNGLXBINDVIDEODEVICENVPROC glad_debug_glXBindVideoDeviceNV;
#define glXBindVideoDeviceNV glad_debug_glXBindVideoDeviceNV
GLAD_API_CALL PFNGLXBINDVIDEOIMAGENVPROC glad_glXBindVideoImageNV;
GLAD_API_CALL PFNGLXBINDVIDEOIMAGENVPROC glad_debug_glXBindVideoImageNV;
#define glXBindVideoImageNV glad_debug_glXBindVideoImageNV
GLAD_API_CALL PFNGLXBLITCONTEXTFRAMEBUFFERAMDPROC glad_glXBlitContextFramebufferAMD;
GLAD_API_CALL PFNGLXBLITCONTEXTFRAMEBUFFERAMDPROC glad_debug_glXBlitContextFramebufferAMD;
#define glXBlitContextFramebufferAMD glad_debug_glXBlitContextFramebufferAMD
GLAD_API_CALL PFNGLXCHANNELRECTSGIXPROC glad_glXChannelRectSGIX;
GLAD_API_CALL PFNGLXCHANNELRECTSGIXPROC glad_debug_glXChannelRectSGIX;
#define glXChannelRectSGIX glad_debug_glXChannelRectSGIX
GLAD_API_CALL PFNGLXCHANNELRECTSYNCSGIXPROC glad_glXChannelRectSyncSGIX;
GLAD_API_CALL PFNGLXCHANNELRECTSYNCSGIXPROC glad_debug_glXChannelRectSyncSGIX;
#define glXChannelRectSyncSGIX glad_debug_glXChannelRectSyncSGIX
GLAD_API_CALL PFNGLXCHOOSEFBCONFIGPROC glad_glXChooseFBConfig;
GLAD_API_CALL PFNGLXCHOOSEFBCONFIGPROC glad_debug_glXChooseFBConfig;
#define glXChooseFBConfig glad_debug_glXChooseFBConfig
GLAD_API_CALL PFNGLXCHOOSEFBCONFIGSGIXPROC glad_glXChooseFBConfigSGIX;
GLAD_API_CALL PFNGLXCHOOSEFBCONFIGSGIXPROC glad_debug_glXChooseFBConfigSGIX;
#define glXChooseFBConfigSGIX glad_debug_glXChooseFBConfigSGIX
GLAD_API_CALL PFNGLXCHOOSEVISUALPROC glad_glXChooseVisual;
GLAD_API_CALL PFNGLXCHOOSEVISUALPROC glad_debug_glXChooseVisual;
#define glXChooseVisual glad_debug_glXChooseVisual
GLAD_API_CALL PFNGLXCOPYBUFFERSUBDATANVPROC glad_glXCopyBufferSubDataNV;
GLAD_API_CALL PFNGLXCOPYBUFFERSUBDATANVPROC glad_debug_glXCopyBufferSubDataNV;
#define glXCopyBufferSubDataNV glad_debug_glXCopyBufferSubDataNV
GLAD_API_CALL PFNGLXCOPYCONTEXTPROC glad_glXCopyContext;
GLAD_API_CALL PFNGLXCOPYCONTEXTPROC glad_debug_glXCopyContext;
#define glXCopyContext glad_debug_glXCopyContext
GLAD_API_CALL PFNGLXCOPYIMAGESUBDATANVPROC glad_glXCopyImageSubDataNV;
GLAD_API_CALL PFNGLXCOPYIMAGESUBDATANVPROC glad_debug_glXCopyImageSubDataNV;
#define glXCopyImageSubDataNV glad_debug_glXCopyImageSubDataNV
GLAD_API_CALL PFNGLXCOPYSUBBUFFERMESAPROC glad_glXCopySubBufferMESA;
GLAD_API_CALL PFNGLXCOPYSUBBUFFERMESAPROC glad_debug_glXCopySubBufferMESA;
#define glXCopySubBufferMESA glad_debug_glXCopySubBufferMESA
GLAD_API_CALL PFNGLXCREATEASSOCIATEDCONTEXTAMDPROC glad_glXCreateAssociatedContextAMD;
GLAD_API_CALL PFNGLXCREATEASSOCIATEDCONTEXTAMDPROC glad_debug_glXCreateAssociatedContextAMD;
#define glXCreateAssociatedContextAMD glad_debug_glXCreateAssociatedContextAMD
GLAD_API_CALL PFNGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC glad_glXCreateAssociatedContextAttribsAMD;
GLAD_API_CALL PFNGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC glad_debug_glXCreateAssociatedContextAttribsAMD;
#define glXCreateAssociatedContextAttribsAMD glad_debug_glXCreateAssociatedContextAttribsAMD
GLAD_API_CALL PFNGLXCREATECONTEXTPROC glad_glXCreateContext;
GLAD_API_CALL PFNGLXCREATECONTEXTPROC glad_debug_glXCreateContext;
#define glXCreateContext glad_debug_glXCreateContext
GLAD_API_CALL PFNGLXCREATECONTEXTATTRIBSARBPROC glad_glXCreateContextAttribsARB;
GLAD_API_CALL PFNGLXCREATECONTEXTATTRIBSARBPROC glad_debug_glXCreateContextAttribsARB;
#define glXCreateContextAttribsARB glad_debug_glXCreateContextAttribsARB
GLAD_API_CALL PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC glad_glXCreateContextWithConfigSGIX;
GLAD_API_CALL PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC glad_debug_glXCreateContextWithConfigSGIX;
#define glXCreateContextWithConfigSGIX glad_debug_glXCreateContextWithConfigSGIX
GLAD_API_CALL PFNGLXCREATEGLXPBUFFERSGIXPROC glad_glXCreateGLXPbufferSGIX;
GLAD_API_CALL PFNGLXCREATEGLXPBUFFERSGIXPROC glad_debug_glXCreateGLXPbufferSGIX;
#define glXCreateGLXPbufferSGIX glad_debug_glXCreateGLXPbufferSGIX
GLAD_API_CALL PFNGLXCREATEGLXPIXMAPPROC glad_glXCreateGLXPixmap;
GLAD_API_CALL PFNGLXCREATEGLXPIXMAPPROC glad_debug_glXCreateGLXPixmap;
#define glXCreateGLXPixmap glad_debug_glXCreateGLXPixmap
GLAD_API_CALL PFNGLXCREATEGLXPIXMAPMESAPROC glad_glXCreateGLXPixmapMESA;
GLAD_API_CALL PFNGLXCREATEGLXPIXMAPMESAPROC glad_debug_glXCreateGLXPixmapMESA;
#define glXCreateGLXPixmapMESA glad_debug_glXCreateGLXPixmapMESA
GLAD_API_CALL PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC glad_glXCreateGLXPixmapWithConfigSGIX;
GLAD_API_CALL PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC glad_debug_glXCreateGLXPixmapWithConfigSGIX;
#define glXCreateGLXPixmapWithConfigSGIX glad_debug_glXCreateGLXPixmapWithConfigSGIX
GLAD_API_CALL PFNGLXCREATENEWCONTEXTPROC glad_glXCreateNewContext;
GLAD_API_CALL PFNGLXCREATENEWCONTEXTPROC glad_debug_glXCreateNewContext;
#define glXCreateNewContext glad_debug_glXCreateNewContext
GLAD_API_CALL PFNGLXCREATEPBUFFERPROC glad_glXCreatePbuffer;
GLAD_API_CALL PFNGLXCREATEPBUFFERPROC glad_debug_glXCreatePbuffer;
#define glXCreatePbuffer glad_debug_glXCreatePbuffer
GLAD_API_CALL PFNGLXCREATEPIXMAPPROC glad_glXCreatePixmap;
GLAD_API_CALL PFNGLXCREATEPIXMAPPROC glad_debug_glXCreatePixmap;
#define glXCreatePixmap glad_debug_glXCreatePixmap
GLAD_API_CALL PFNGLXCREATEWINDOWPROC glad_glXCreateWindow;
GLAD_API_CALL PFNGLXCREATEWINDOWPROC glad_debug_glXCreateWindow;
#define glXCreateWindow glad_debug_glXCreateWindow
GLAD_API_CALL PFNGLXCUSHIONSGIPROC glad_glXCushionSGI;
GLAD_API_CALL PFNGLXCUSHIONSGIPROC glad_debug_glXCushionSGI;
#define glXCushionSGI glad_debug_glXCushionSGI
GLAD_API_CALL PFNGLXDELAYBEFORESWAPNVPROC glad_glXDelayBeforeSwapNV;
GLAD_API_CALL PFNGLXDELAYBEFORESWAPNVPROC glad_debug_glXDelayBeforeSwapNV;
#define glXDelayBeforeSwapNV glad_debug_glXDelayBeforeSwapNV
GLAD_API_CALL PFNGLXDELETEASSOCIATEDCONTEXTAMDPROC glad_glXDeleteAssociatedContextAMD;
GLAD_API_CALL PFNGLXDELETEASSOCIATEDCONTEXTAMDPROC glad_debug_glXDeleteAssociatedContextAMD;
#define glXDeleteAssociatedContextAMD glad_debug_glXDeleteAssociatedContextAMD
GLAD_API_CALL PFNGLXDESTROYCONTEXTPROC glad_glXDestroyContext;
GLAD_API_CALL PFNGLXDESTROYCONTEXTPROC glad_debug_glXDestroyContext;
#define glXDestroyContext glad_debug_glXDestroyContext
GLAD_API_CALL PFNGLXDESTROYGLXPBUFFERSGIXPROC glad_glXDestroyGLXPbufferSGIX;
GLAD_API_CALL PFNGLXDESTROYGLXPBUFFERSGIXPROC glad_debug_glXDestroyGLXPbufferSGIX;
#define glXDestroyGLXPbufferSGIX glad_debug_glXDestroyGLXPbufferSGIX
GLAD_API_CALL PFNGLXDESTROYGLXPIXMAPPROC glad_glXDestroyGLXPixmap;
GLAD_API_CALL PFNGLXDESTROYGLXPIXMAPPROC glad_debug_glXDestroyGLXPixmap;
#define glXDestroyGLXPixmap glad_debug_glXDestroyGLXPixmap
GLAD_API_CALL PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC glad_glXDestroyHyperpipeConfigSGIX;
GLAD_API_CALL PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC glad_debug_glXDestroyHyperpipeConfigSGIX;
#define glXDestroyHyperpipeConfigSGIX glad_debug_glXDestroyHyperpipeConfigSGIX
GLAD_API_CALL PFNGLXDESTROYPBUFFERPROC glad_glXDestroyPbuffer;
GLAD_API_CALL PFNGLXDESTROYPBUFFERPROC glad_debug_glXDestroyPbuffer;
#define glXDestroyPbuffer glad_debug_glXDestroyPbuffer
GLAD_API_CALL PFNGLXDESTROYPIXMAPPROC glad_glXDestroyPixmap;
GLAD_API_CALL PFNGLXDESTROYPIXMAPPROC glad_debug_glXDestroyPixmap;
#define glXDestroyPixmap glad_debug_glXDestroyPixmap
GLAD_API_CALL PFNGLXDESTROYWINDOWPROC glad_glXDestroyWindow;
GLAD_API_CALL PFNGLXDESTROYWINDOWPROC glad_debug_glXDestroyWindow;
#define glXDestroyWindow glad_debug_glXDestroyWindow
GLAD_API_CALL PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC glad_glXEnumerateVideoCaptureDevicesNV;
GLAD_API_CALL PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC glad_debug_glXEnumerateVideoCaptureDevicesNV;
#define glXEnumerateVideoCaptureDevicesNV glad_debug_glXEnumerateVideoCaptureDevicesNV
GLAD_API_CALL PFNGLXENUMERATEVIDEODEVICESNVPROC glad_glXEnumerateVideoDevicesNV;
GLAD_API_CALL PFNGLXENUMERATEVIDEODEVICESNVPROC glad_debug_glXEnumerateVideoDevicesNV;
#define glXEnumerateVideoDevicesNV glad_debug_glXEnumerateVideoDevicesNV
GLAD_API_CALL PFNGLXFREECONTEXTEXTPROC glad_glXFreeContextEXT;
GLAD_API_CALL PFNGLXFREECONTEXTEXTPROC glad_debug_glXFreeContextEXT;
#define glXFreeContextEXT glad_debug_glXFreeContextEXT
GLAD_API_CALL PFNGLXGETAGPOFFSETMESAPROC glad_glXGetAGPOffsetMESA;
GLAD_API_CALL PFNGLXGETAGPOFFSETMESAPROC glad_debug_glXGetAGPOffsetMESA;
#define glXGetAGPOffsetMESA glad_debug_glXGetAGPOffsetMESA
GLAD_API_CALL PFNGLXGETCLIENTSTRINGPROC glad_glXGetClientString;
GLAD_API_CALL PFNGLXGETCLIENTSTRINGPROC glad_debug_glXGetClientString;
#define glXGetClientString glad_debug_glXGetClientString
GLAD_API_CALL PFNGLXGETCONFIGPROC glad_glXGetConfig;
GLAD_API_CALL PFNGLXGETCONFIGPROC glad_debug_glXGetConfig;
#define glXGetConfig glad_debug_glXGetConfig
GLAD_API_CALL PFNGLXGETCONTEXTGPUIDAMDPROC glad_glXGetContextGPUIDAMD;
GLAD_API_CALL PFNGLXGETCONTEXTGPUIDAMDPROC glad_debug_glXGetContextGPUIDAMD;
#define glXGetContextGPUIDAMD glad_debug_glXGetContextGPUIDAMD
GLAD_API_CALL PFNGLXGETCONTEXTIDEXTPROC glad_glXGetContextIDEXT;
GLAD_API_CALL PFNGLXGETCONTEXTIDEXTPROC glad_debug_glXGetContextIDEXT;
#define glXGetContextIDEXT glad_debug_glXGetContextIDEXT
GLAD_API_CALL PFNGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC glad_glXGetCurrentAssociatedContextAMD;
GLAD_API_CALL PFNGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC glad_debug_glXGetCurrentAssociatedContextAMD;
#define glXGetCurrentAssociatedContextAMD glad_debug_glXGetCurrentAssociatedContextAMD
GLAD_API_CALL PFNGLXGETCURRENTCONTEXTPROC glad_glXGetCurrentContext;
GLAD_API_CALL PFNGLXGETCURRENTCONTEXTPROC glad_debug_glXGetCurrentContext;
#define glXGetCurrentContext glad_debug_glXGetCurrentContext
GLAD_API_CALL PFNGLXGETCURRENTDISPLAYPROC glad_glXGetCurrentDisplay;
GLAD_API_CALL PFNGLXGETCURRENTDISPLAYPROC glad_debug_glXGetCurrentDisplay;
#define glXGetCurrentDisplay glad_debug_glXGetCurrentDisplay
GLAD_API_CALL PFNGLXGETCURRENTDISPLAYEXTPROC glad_glXGetCurrentDisplayEXT;
GLAD_API_CALL PFNGLXGETCURRENTDISPLAYEXTPROC glad_debug_glXGetCurrentDisplayEXT;
#define glXGetCurrentDisplayEXT glad_debug_glXGetCurrentDisplayEXT
GLAD_API_CALL PFNGLXGETCURRENTDRAWABLEPROC glad_glXGetCurrentDrawable;
GLAD_API_CALL PFNGLXGETCURRENTDRAWABLEPROC glad_debug_glXGetCurrentDrawable;
#define glXGetCurrentDrawable glad_debug_glXGetCurrentDrawable
GLAD_API_CALL PFNGLXGETCURRENTREADDRAWABLEPROC glad_glXGetCurrentReadDrawable;
GLAD_API_CALL PFNGLXGETCURRENTREADDRAWABLEPROC glad_debug_glXGetCurrentReadDrawable;
#define glXGetCurrentReadDrawable glad_debug_glXGetCurrentReadDrawable
GLAD_API_CALL PFNGLXGETCURRENTREADDRAWABLESGIPROC glad_glXGetCurrentReadDrawableSGI;
GLAD_API_CALL PFNGLXGETCURRENTREADDRAWABLESGIPROC glad_debug_glXGetCurrentReadDrawableSGI;
#define glXGetCurrentReadDrawableSGI glad_debug_glXGetCurrentReadDrawableSGI
GLAD_API_CALL PFNGLXGETFBCONFIGATTRIBPROC glad_glXGetFBConfigAttrib;
GLAD_API_CALL PFNGLXGETFBCONFIGATTRIBPROC glad_debug_glXGetFBConfigAttrib;
#define glXGetFBConfigAttrib glad_debug_glXGetFBConfigAttrib
GLAD_API_CALL PFNGLXGETFBCONFIGATTRIBSGIXPROC glad_glXGetFBConfigAttribSGIX;
GLAD_API_CALL PFNGLXGETFBCONFIGATTRIBSGIXPROC glad_debug_glXGetFBConfigAttribSGIX;
#define glXGetFBConfigAttribSGIX glad_debug_glXGetFBConfigAttribSGIX
GLAD_API_CALL PFNGLXGETFBCONFIGFROMVISUALSGIXPROC glad_glXGetFBConfigFromVisualSGIX;
GLAD_API_CALL PFNGLXGETFBCONFIGFROMVISUALSGIXPROC glad_debug_glXGetFBConfigFromVisualSGIX;
#define glXGetFBConfigFromVisualSGIX glad_debug_glXGetFBConfigFromVisualSGIX
GLAD_API_CALL PFNGLXGETFBCONFIGSPROC glad_glXGetFBConfigs;
GLAD_API_CALL PFNGLXGETFBCONFIGSPROC glad_debug_glXGetFBConfigs;
#define glXGetFBConfigs glad_debug_glXGetFBConfigs
GLAD_API_CALL PFNGLXGETGPUIDSAMDPROC glad_glXGetGPUIDsAMD;
GLAD_API_CALL PFNGLXGETGPUIDSAMDPROC glad_debug_glXGetGPUIDsAMD;
#define glXGetGPUIDsAMD glad_debug_glXGetGPUIDsAMD
GLAD_API_CALL PFNGLXGETGPUINFOAMDPROC glad_glXGetGPUInfoAMD;
GLAD_API_CALL PFNGLXGETGPUINFOAMDPROC glad_debug_glXGetGPUInfoAMD;
#define glXGetGPUInfoAMD glad_debug_glXGetGPUInfoAMD
GLAD_API_CALL PFNGLXGETMSCRATEOMLPROC glad_glXGetMscRateOML;
GLAD_API_CALL PFNGLXGETMSCRATEOMLPROC glad_debug_glXGetMscRateOML;
#define glXGetMscRateOML glad_debug_glXGetMscRateOML
GLAD_API_CALL PFNGLXGETPROCADDRESSPROC glad_glXGetProcAddress;
GLAD_API_CALL PFNGLXGETPROCADDRESSPROC glad_debug_glXGetProcAddress;
#define glXGetProcAddress glad_debug_glXGetProcAddress
GLAD_API_CALL PFNGLXGETPROCADDRESSARBPROC glad_glXGetProcAddressARB;
GLAD_API_CALL PFNGLXGETPROCADDRESSARBPROC glad_debug_glXGetProcAddressARB;
#define glXGetProcAddressARB glad_debug_glXGetProcAddressARB
GLAD_API_CALL PFNGLXGETSELECTEDEVENTPROC glad_glXGetSelectedEvent;
GLAD_API_CALL PFNGLXGETSELECTEDEVENTPROC glad_debug_glXGetSelectedEvent;
#define glXGetSelectedEvent glad_debug_glXGetSelectedEvent
GLAD_API_CALL PFNGLXGETSELECTEDEVENTSGIXPROC glad_glXGetSelectedEventSGIX;
GLAD_API_CALL PFNGLXGETSELECTEDEVENTSGIXPROC glad_debug_glXGetSelectedEventSGIX;
#define glXGetSelectedEventSGIX glad_debug_glXGetSelectedEventSGIX
GLAD_API_CALL PFNGLXGETSWAPINTERVALMESAPROC glad_glXGetSwapIntervalMESA;
GLAD_API_CALL PFNGLXGETSWAPINTERVALMESAPROC glad_debug_glXGetSwapIntervalMESA;
#define glXGetSwapIntervalMESA glad_debug_glXGetSwapIntervalMESA
GLAD_API_CALL PFNGLXGETSYNCVALUESOMLPROC glad_glXGetSyncValuesOML;
GLAD_API_CALL PFNGLXGETSYNCVALUESOMLPROC glad_debug_glXGetSyncValuesOML;
#define glXGetSyncValuesOML glad_debug_glXGetSyncValuesOML
GLAD_API_CALL PFNGLXGETTRANSPARENTINDEXSUNPROC glad_glXGetTransparentIndexSUN;
GLAD_API_CALL PFNGLXGETTRANSPARENTINDEXSUNPROC glad_debug_glXGetTransparentIndexSUN;
#define glXGetTransparentIndexSUN glad_debug_glXGetTransparentIndexSUN
GLAD_API_CALL PFNGLXGETVIDEODEVICENVPROC glad_glXGetVideoDeviceNV;
GLAD_API_CALL PFNGLXGETVIDEODEVICENVPROC glad_debug_glXGetVideoDeviceNV;
#define glXGetVideoDeviceNV glad_debug_glXGetVideoDeviceNV
GLAD_API_CALL PFNGLXGETVIDEOINFONVPROC glad_glXGetVideoInfoNV;
GLAD_API_CALL PFNGLXGETVIDEOINFONVPROC glad_debug_glXGetVideoInfoNV;
#define glXGetVideoInfoNV glad_debug_glXGetVideoInfoNV
GLAD_API_CALL PFNGLXGETVIDEOSYNCSGIPROC glad_glXGetVideoSyncSGI;
GLAD_API_CALL PFNGLXGETVIDEOSYNCSGIPROC glad_debug_glXGetVideoSyncSGI;
#define glXGetVideoSyncSGI glad_debug_glXGetVideoSyncSGI
GLAD_API_CALL PFNGLXGETVISUALFROMFBCONFIGPROC glad_glXGetVisualFromFBConfig;
GLAD_API_CALL PFNGLXGETVISUALFROMFBCONFIGPROC glad_debug_glXGetVisualFromFBConfig;
#define glXGetVisualFromFBConfig glad_debug_glXGetVisualFromFBConfig
GLAD_API_CALL PFNGLXGETVISUALFROMFBCONFIGSGIXPROC glad_glXGetVisualFromFBConfigSGIX;
GLAD_API_CALL PFNGLXGETVISUALFROMFBCONFIGSGIXPROC glad_debug_glXGetVisualFromFBConfigSGIX;
#define glXGetVisualFromFBConfigSGIX glad_debug_glXGetVisualFromFBConfigSGIX
GLAD_API_CALL PFNGLXHYPERPIPEATTRIBSGIXPROC glad_glXHyperpipeAttribSGIX;
GLAD_API_CALL PFNGLXHYPERPIPEATTRIBSGIXPROC glad_debug_glXHyperpipeAttribSGIX;
#define glXHyperpipeAttribSGIX glad_debug_glXHyperpipeAttribSGIX
GLAD_API_CALL PFNGLXHYPERPIPECONFIGSGIXPROC glad_glXHyperpipeConfigSGIX;
GLAD_API_CALL PFNGLXHYPERPIPECONFIGSGIXPROC glad_debug_glXHyperpipeConfigSGIX;
#define glXHyperpipeConfigSGIX glad_debug_glXHyperpipeConfigSGIX
GLAD_API_CALL PFNGLXIMPORTCONTEXTEXTPROC glad_glXImportContextEXT;
GLAD_API_CALL PFNGLXIMPORTCONTEXTEXTPROC glad_debug_glXImportContextEXT;
#define glXImportContextEXT glad_debug_glXImportContextEXT
GLAD_API_CALL PFNGLXISDIRECTPROC glad_glXIsDirect;
GLAD_API_CALL PFNGLXISDIRECTPROC glad_debug_glXIsDirect;
#define glXIsDirect glad_debug_glXIsDirect
GLAD_API_CALL PFNGLXJOINSWAPGROUPNVPROC glad_glXJoinSwapGroupNV;
GLAD_API_CALL PFNGLXJOINSWAPGROUPNVPROC glad_debug_glXJoinSwapGroupNV;
#define glXJoinSwapGroupNV glad_debug_glXJoinSwapGroupNV
GLAD_API_CALL PFNGLXJOINSWAPGROUPSGIXPROC glad_glXJoinSwapGroupSGIX;
GLAD_API_CALL PFNGLXJOINSWAPGROUPSGIXPROC glad_debug_glXJoinSwapGroupSGIX;
#define glXJoinSwapGroupSGIX glad_debug_glXJoinSwapGroupSGIX
GLAD_API_CALL PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC glad_glXLockVideoCaptureDeviceNV;
GLAD_API_CALL PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC glad_debug_glXLockVideoCaptureDeviceNV;
#define glXLockVideoCaptureDeviceNV glad_debug_glXLockVideoCaptureDeviceNV
GLAD_API_CALL PFNGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC glad_glXMakeAssociatedContextCurrentAMD;
GLAD_API_CALL PFNGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC glad_debug_glXMakeAssociatedContextCurrentAMD;
#define glXMakeAssociatedContextCurrentAMD glad_debug_glXMakeAssociatedContextCurrentAMD
GLAD_API_CALL PFNGLXMAKECONTEXTCURRENTPROC glad_glXMakeContextCurrent;
GLAD_API_CALL PFNGLXMAKECONTEXTCURRENTPROC glad_debug_glXMakeContextCurrent;
#define glXMakeContextCurrent glad_debug_glXMakeContextCurrent
GLAD_API_CALL PFNGLXMAKECURRENTPROC glad_glXMakeCurrent;
GLAD_API_CALL PFNGLXMAKECURRENTPROC glad_debug_glXMakeCurrent;
#define glXMakeCurrent glad_debug_glXMakeCurrent
GLAD_API_CALL PFNGLXMAKECURRENTREADSGIPROC glad_glXMakeCurrentReadSGI;
GLAD_API_CALL PFNGLXMAKECURRENTREADSGIPROC glad_debug_glXMakeCurrentReadSGI;
#define glXMakeCurrentReadSGI glad_debug_glXMakeCurrentReadSGI
GLAD_API_CALL PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC glad_glXNamedCopyBufferSubDataNV;
GLAD_API_CALL PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC glad_debug_glXNamedCopyBufferSubDataNV;
#define glXNamedCopyBufferSubDataNV glad_debug_glXNamedCopyBufferSubDataNV
GLAD_API_CALL PFNGLXQUERYCHANNELDELTASSGIXPROC glad_glXQueryChannelDeltasSGIX;
GLAD_API_CALL PFNGLXQUERYCHANNELDELTASSGIXPROC glad_debug_glXQueryChannelDeltasSGIX;
#define glXQueryChannelDeltasSGIX glad_debug_glXQueryChannelDeltasSGIX
GLAD_API_CALL PFNGLXQUERYCHANNELRECTSGIXPROC glad_glXQueryChannelRectSGIX;
GLAD_API_CALL PFNGLXQUERYCHANNELRECTSGIXPROC glad_debug_glXQueryChannelRectSGIX;
#define glXQueryChannelRectSGIX glad_debug_glXQueryChannelRectSGIX
GLAD_API_CALL PFNGLXQUERYCONTEXTPROC glad_glXQueryContext;
GLAD_API_CALL PFNGLXQUERYCONTEXTPROC glad_debug_glXQueryContext;
#define glXQueryContext glad_debug_glXQueryContext
GLAD_API_CALL PFNGLXQUERYCONTEXTINFOEXTPROC glad_glXQueryContextInfoEXT;
GLAD_API_CALL PFNGLXQUERYCONTEXTINFOEXTPROC glad_debug_glXQueryContextInfoEXT;
#define glXQueryContextInfoEXT glad_debug_glXQueryContextInfoEXT
GLAD_API_CALL PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC glad_glXQueryCurrentRendererIntegerMESA;
GLAD_API_CALL PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC glad_debug_glXQueryCurrentRendererIntegerMESA;
#define glXQueryCurrentRendererIntegerMESA glad_debug_glXQueryCurrentRendererIntegerMESA
GLAD_API_CALL PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC glad_glXQueryCurrentRendererStringMESA;
GLAD_API_CALL PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC glad_debug_glXQueryCurrentRendererStringMESA;
#define glXQueryCurrentRendererStringMESA glad_debug_glXQueryCurrentRendererStringMESA
GLAD_API_CALL PFNGLXQUERYDRAWABLEPROC glad_glXQueryDrawable;
GLAD_API_CALL PFNGLXQUERYDRAWABLEPROC glad_debug_glXQueryDrawable;
#define glXQueryDrawable glad_debug_glXQueryDrawable
GLAD_API_CALL PFNGLXQUERYEXTENSIONPROC glad_glXQueryExtension;
GLAD_API_CALL PFNGLXQUERYEXTENSIONPROC glad_debug_glXQueryExtension;
#define glXQueryExtension glad_debug_glXQueryExtension
GLAD_API_CALL PFNGLXQUERYEXTENSIONSSTRINGPROC glad_glXQueryExtensionsString;
GLAD_API_CALL PFNGLXQUERYEXTENSIONSSTRINGPROC glad_debug_glXQueryExtensionsString;
#define glXQueryExtensionsString glad_debug_glXQueryExtensionsString
GLAD_API_CALL PFNGLXQUERYFRAMECOUNTNVPROC glad_glXQueryFrameCountNV;
GLAD_API_CALL PFNGLXQUERYFRAMECOUNTNVPROC glad_debug_glXQueryFrameCountNV;
#define glXQueryFrameCountNV glad_debug_glXQueryFrameCountNV
GLAD_API_CALL PFNGLXQUERYGLXPBUFFERSGIXPROC glad_glXQueryGLXPbufferSGIX;
GLAD_API_CALL PFNGLXQUERYGLXPBUFFERSGIXPROC glad_debug_glXQueryGLXPbufferSGIX;
#define glXQueryGLXPbufferSGIX glad_debug_glXQueryGLXPbufferSGIX
GLAD_API_CALL PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC glad_glXQueryHyperpipeAttribSGIX;
GLAD_API_CALL PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC glad_debug_glXQueryHyperpipeAttribSGIX;
#define glXQueryHyperpipeAttribSGIX glad_debug_glXQueryHyperpipeAttribSGIX
GLAD_API_CALL PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC glad_glXQueryHyperpipeBestAttribSGIX;
GLAD_API_CALL PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC glad_debug_glXQueryHyperpipeBestAttribSGIX;
#define glXQueryHyperpipeBestAttribSGIX glad_debug_glXQueryHyperpipeBestAttribSGIX
GLAD_API_CALL PFNGLXQUERYHYPERPIPECONFIGSGIXPROC glad_glXQueryHyperpipeConfigSGIX;
GLAD_API_CALL PFNGLXQUERYHYPERPIPECONFIGSGIXPROC glad_debug_glXQueryHyperpipeConfigSGIX;
#define glXQueryHyperpipeConfigSGIX glad_debug_glXQueryHyperpipeConfigSGIX
GLAD_API_CALL PFNGLXQUERYHYPERPIPENETWORKSGIXPROC glad_glXQueryHyperpipeNetworkSGIX;
GLAD_API_CALL PFNGLXQUERYHYPERPIPENETWORKSGIXPROC glad_debug_glXQueryHyperpipeNetworkSGIX;
#define glXQueryHyperpipeNetworkSGIX glad_debug_glXQueryHyperpipeNetworkSGIX
GLAD_API_CALL PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC glad_glXQueryMaxSwapBarriersSGIX;
GLAD_API_CALL PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC glad_debug_glXQueryMaxSwapBarriersSGIX;
#define glXQueryMaxSwapBarriersSGIX glad_debug_glXQueryMaxSwapBarriersSGIX
GLAD_API_CALL PFNGLXQUERYMAXSWAPGROUPSNVPROC glad_glXQueryMaxSwapGroupsNV;
GLAD_API_CALL PFNGLXQUERYMAXSWAPGROUPSNVPROC glad_debug_glXQueryMaxSwapGroupsNV;
#define glXQueryMaxSwapGroupsNV glad_debug_glXQueryMaxSwapGroupsNV
GLAD_API_CALL PFNGLXQUERYRENDERERINTEGERMESAPROC glad_glXQueryRendererIntegerMESA;
GLAD_API_CALL PFNGLXQUERYRENDERERINTEGERMESAPROC glad_debug_glXQueryRendererIntegerMESA;
#define glXQueryRendererIntegerMESA glad_debug_glXQueryRendererIntegerMESA
GLAD_API_CALL PFNGLXQUERYRENDERERSTRINGMESAPROC glad_glXQueryRendererStringMESA;
GLAD_API_CALL PFNGLXQUERYRENDERERSTRINGMESAPROC glad_debug_glXQueryRendererStringMESA;
#define glXQueryRendererStringMESA glad_debug_glXQueryRendererStringMESA
GLAD_API_CALL PFNGLXQUERYSERVERSTRINGPROC glad_glXQueryServerString;
GLAD_API_CALL PFNGLXQUERYSERVERSTRINGPROC glad_debug_glXQueryServerString;
#define glXQueryServerString glad_debug_glXQueryServerString
GLAD_API_CALL PFNGLXQUERYSWAPGROUPNVPROC glad_glXQuerySwapGroupNV;
GLAD_API_CALL PFNGLXQUERYSWAPGROUPNVPROC glad_debug_glXQuerySwapGroupNV;
#define glXQuerySwapGroupNV glad_debug_glXQuerySwapGroupNV
GLAD_API_CALL PFNGLXQUERYVERSIONPROC glad_glXQueryVersion;
GLAD_API_CALL PFNGLXQUERYVERSIONPROC glad_debug_glXQueryVersion;
#define glXQueryVersion glad_debug_glXQueryVersion
GLAD_API_CALL PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC glad_glXQueryVideoCaptureDeviceNV;
GLAD_API_CALL PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC glad_debug_glXQueryVideoCaptureDeviceNV;
#define glXQueryVideoCaptureDeviceNV glad_debug_glXQueryVideoCaptureDeviceNV
GLAD_API_CALL PFNGLXRELEASEBUFFERSMESAPROC glad_glXReleaseBuffersMESA;
GLAD_API_CALL PFNGLXRELEASEBUFFERSMESAPROC glad_debug_glXReleaseBuffersMESA;
#define glXReleaseBuffersMESA glad_debug_glXReleaseBuffersMESA
GLAD_API_CALL PFNGLXRELEASETEXIMAGEEXTPROC glad_glXReleaseTexImageEXT;
GLAD_API_CALL PFNGLXRELEASETEXIMAGEEXTPROC glad_debug_glXReleaseTexImageEXT;
#define glXReleaseTexImageEXT glad_debug_glXReleaseTexImageEXT
GLAD_API_CALL PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC glad_glXReleaseVideoCaptureDeviceNV;
GLAD_API_CALL PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC glad_debug_glXReleaseVideoCaptureDeviceNV;
#define glXReleaseVideoCaptureDeviceNV glad_debug_glXReleaseVideoCaptureDeviceNV
GLAD_API_CALL PFNGLXRELEASEVIDEODEVICENVPROC glad_glXReleaseVideoDeviceNV;
GLAD_API_CALL PFNGLXRELEASEVIDEODEVICENVPROC glad_debug_glXReleaseVideoDeviceNV;
#define glXReleaseVideoDeviceNV glad_debug_glXReleaseVideoDeviceNV
GLAD_API_CALL PFNGLXRELEASEVIDEOIMAGENVPROC glad_glXReleaseVideoImageNV;
GLAD_API_CALL PFNGLXRELEASEVIDEOIMAGENVPROC glad_debug_glXReleaseVideoImageNV;
#define glXReleaseVideoImageNV glad_debug_glXReleaseVideoImageNV
GLAD_API_CALL PFNGLXRESETFRAMECOUNTNVPROC glad_glXResetFrameCountNV;
GLAD_API_CALL PFNGLXRESETFRAMECOUNTNVPROC glad_debug_glXResetFrameCountNV;
#define glXResetFrameCountNV glad_debug_glXResetFrameCountNV
GLAD_API_CALL PFNGLXSELECTEVENTPROC glad_glXSelectEvent;
GLAD_API_CALL PFNGLXSELECTEVENTPROC glad_debug_glXSelectEvent;
#define glXSelectEvent glad_debug_glXSelectEvent
GLAD_API_CALL PFNGLXSELECTEVENTSGIXPROC glad_glXSelectEventSGIX;
GLAD_API_CALL PFNGLXSELECTEVENTSGIXPROC glad_debug_glXSelectEventSGIX;
#define glXSelectEventSGIX glad_debug_glXSelectEventSGIX
GLAD_API_CALL PFNGLXSENDPBUFFERTOVIDEONVPROC glad_glXSendPbufferToVideoNV;
GLAD_API_CALL PFNGLXSENDPBUFFERTOVIDEONVPROC glad_debug_glXSendPbufferToVideoNV;
#define glXSendPbufferToVideoNV glad_debug_glXSendPbufferToVideoNV
GLAD_API_CALL PFNGLXSET3DFXMODEMESAPROC glad_glXSet3DfxModeMESA;
GLAD_API_CALL PFNGLXSET3DFXMODEMESAPROC glad_debug_glXSet3DfxModeMESA;
#define glXSet3DfxModeMESA glad_debug_glXSet3DfxModeMESA
GLAD_API_CALL PFNGLXSWAPBUFFERSPROC glad_glXSwapBuffers;
GLAD_API_CALL PFNGLXSWAPBUFFERSPROC glad_debug_glXSwapBuffers;
#define glXSwapBuffers glad_debug_glXSwapBuffers
GLAD_API_CALL PFNGLXSWAPBUFFERSMSCOMLPROC glad_glXSwapBuffersMscOML;
GLAD_API_CALL PFNGLXSWAPBUFFERSMSCOMLPROC glad_debug_glXSwapBuffersMscOML;
#define glXSwapBuffersMscOML glad_debug_glXSwapBuffersMscOML
GLAD_API_CALL PFNGLXSWAPINTERVALEXTPROC glad_glXSwapIntervalEXT;
GLAD_API_CALL PFNGLXSWAPINTERVALEXTPROC glad_debug_glXSwapIntervalEXT;
#define glXSwapIntervalEXT glad_debug_glXSwapIntervalEXT
GLAD_API_CALL PFNGLXSWAPINTERVALMESAPROC glad_glXSwapIntervalMESA;
GLAD_API_CALL PFNGLXSWAPINTERVALMESAPROC glad_debug_glXSwapIntervalMESA;
#define glXSwapIntervalMESA glad_debug_glXSwapIntervalMESA
GLAD_API_CALL PFNGLXSWAPINTERVALSGIPROC glad_glXSwapIntervalSGI;
GLAD_API_CALL PFNGLXSWAPINTERVALSGIPROC glad_debug_glXSwapIntervalSGI;
#define glXSwapIntervalSGI glad_debug_glXSwapIntervalSGI
GLAD_API_CALL PFNGLXUSEXFONTPROC glad_glXUseXFont;
GLAD_API_CALL PFNGLXUSEXFONTPROC glad_debug_glXUseXFont;
#define glXUseXFont glad_debug_glXUseXFont
GLAD_API_CALL PFNGLXWAITFORMSCOMLPROC glad_glXWaitForMscOML;
GLAD_API_CALL PFNGLXWAITFORMSCOMLPROC glad_debug_glXWaitForMscOML;
#define glXWaitForMscOML glad_debug_glXWaitForMscOML
GLAD_API_CALL PFNGLXWAITFORSBCOMLPROC glad_glXWaitForSbcOML;
GLAD_API_CALL PFNGLXWAITFORSBCOMLPROC glad_debug_glXWaitForSbcOML;
#define glXWaitForSbcOML glad_debug_glXWaitForSbcOML
GLAD_API_CALL PFNGLXWAITGLPROC glad_glXWaitGL;
GLAD_API_CALL PFNGLXWAITGLPROC glad_debug_glXWaitGL;
#define glXWaitGL glad_debug_glXWaitGL
GLAD_API_CALL PFNGLXWAITVIDEOSYNCSGIPROC glad_glXWaitVideoSyncSGI;
GLAD_API_CALL PFNGLXWAITVIDEOSYNCSGIPROC glad_debug_glXWaitVideoSyncSGI;
#define glXWaitVideoSyncSGI glad_debug_glXWaitVideoSyncSGI
GLAD_API_CALL PFNGLXWAITXPROC glad_glXWaitX;
GLAD_API_CALL PFNGLXWAITXPROC glad_debug_glXWaitX;
#define glXWaitX glad_debug_glXWaitX




GLAD_API_CALL void gladSetGLXPreCallback(GLADprecallback cb);
GLAD_API_CALL void gladSetGLXPostCallback(GLADpostcallback cb);

GLAD_API_CALL void gladInstallGLXDebug(void);
GLAD_API_CALL void gladUninstallGLXDebug(void);

GLAD_API_CALL int gladLoadGLXUserPtr(Display *display, int screen, GLADuserptrloadfunc load, void *userptr);
GLAD_API_CALL int gladLoadGLX(Display *display, int screen, GLADloadfunc load);

#ifdef GLAD_GLX

GLAD_API_CALL int gladLoaderLoadGLX(Display *display, int screen);

GLAD_API_CALL void gladLoaderUnloadGLX(void);

#endif
#ifdef __cplusplus
}
#endif
#endif

/* Source */
#ifdef GLAD_GLX_IMPLEMENTATION
/**
 * SPDX-License-Identifier: (WTFPL OR CC0-1.0) AND Apache-2.0
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef GLAD_IMPL_UTIL_C_
#define GLAD_IMPL_UTIL_C_

#ifdef _MSC_VER
#define GLAD_IMPL_UTIL_SSCANF sscanf_s
#else
#define GLAD_IMPL_UTIL_SSCANF sscanf
#endif

#endif /* GLAD_IMPL_UTIL_C_ */

#ifdef __cplusplus
extern "C" {
#endif



int GLAD_GLX_VERSION_1_0 = 0;
int GLAD_GLX_VERSION_1_1 = 0;
int GLAD_GLX_VERSION_1_2 = 0;
int GLAD_GLX_VERSION_1_3 = 0;
int GLAD_GLX_VERSION_1_4 = 0;
int GLAD_GLX_3DFX_multisample = 0;
int GLAD_GLX_AMD_gpu_association = 0;
int GLAD_GLX_ARB_context_flush_control = 0;
int GLAD_GLX_ARB_create_context = 0;
int GLAD_GLX_ARB_create_context_no_error = 0;
int GLAD_GLX_ARB_create_context_profile = 0;
int GLAD_GLX_ARB_create_context_robustness = 0;
int GLAD_GLX_ARB_fbconfig_float = 0;
int GLAD_GLX_ARB_framebuffer_sRGB = 0;
int GLAD_GLX_ARB_get_proc_address = 0;
int GLAD_GLX_ARB_multisample = 0;
int GLAD_GLX_ARB_robustness_application_isolation = 0;
int GLAD_GLX_ARB_robustness_share_group_isolation = 0;
int GLAD_GLX_ARB_vertex_buffer_object = 0;
int GLAD_GLX_EXT_buffer_age = 0;
int GLAD_GLX_EXT_context_priority = 0;
int GLAD_GLX_EXT_create_context_es2_profile = 0;
int GLAD_GLX_EXT_create_context_es_profile = 0;
int GLAD_GLX_EXT_fbconfig_packed_float = 0;
int GLAD_GLX_EXT_framebuffer_sRGB = 0;
int GLAD_GLX_EXT_get_drawable_type = 0;
int GLAD_GLX_EXT_import_context = 0;
int GLAD_GLX_EXT_libglvnd = 0;
int GLAD_GLX_EXT_no_config_context = 0;
int GLAD_GLX_EXT_stereo_tree = 0;
int GLAD_GLX_EXT_swap_control = 0;
int GLAD_GLX_EXT_swap_control_tear = 0;
int GLAD_GLX_EXT_texture_from_pixmap = 0;
int GLAD_GLX_EXT_visual_info = 0;
int GLAD_GLX_EXT_visual_rating = 0;
int GLAD_GLX_INTEL_swap_event = 0;
int GLAD_GLX_MESA_agp_offset = 0;
int GLAD_GLX_MESA_copy_sub_buffer = 0;
int GLAD_GLX_MESA_pixmap_colormap = 0;
int GLAD_GLX_MESA_query_renderer = 0;
int GLAD_GLX_MESA_release_buffers = 0;
int GLAD_GLX_MESA_set_3dfx_mode = 0;
int GLAD_GLX_MESA_swap_control = 0;
int GLAD_GLX_NV_copy_buffer = 0;
int GLAD_GLX_NV_copy_image = 0;
int GLAD_GLX_NV_delay_before_swap = 0;
int GLAD_GLX_NV_float_buffer = 0;
int GLAD_GLX_NV_multigpu_context = 0;
int GLAD_GLX_NV_multisample_coverage = 0;
int GLAD_GLX_NV_present_video = 0;
int GLAD_GLX_NV_robustness_video_memory_purge = 0;
int GLAD_GLX_NV_swap_group = 0;
int GLAD_GLX_NV_video_capture = 0;
int GLAD_GLX_NV_video_out = 0;
int GLAD_GLX_OML_swap_method = 0;
int GLAD_GLX_OML_sync_control = 0;
int GLAD_GLX_SGIS_blended_overlay = 0;
int GLAD_GLX_SGIS_multisample = 0;
int GLAD_GLX_SGIS_shared_multisample = 0;
int GLAD_GLX_SGIX_fbconfig = 0;
int GLAD_GLX_SGIX_hyperpipe = 0;
int GLAD_GLX_SGIX_pbuffer = 0;
int GLAD_GLX_SGIX_swap_barrier = 0;
int GLAD_GLX_SGIX_swap_group = 0;
int GLAD_GLX_SGIX_video_resize = 0;
int GLAD_GLX_SGIX_visual_select_group = 0;
int GLAD_GLX_SGI_cushion = 0;
int GLAD_GLX_SGI_make_current_read = 0;
int GLAD_GLX_SGI_swap_control = 0;
int GLAD_GLX_SGI_video_sync = 0;
int GLAD_GLX_SUN_get_transparent_index = 0;


static void _pre_call_glx_callback_default(const char *name, GLADapiproc apiproc, int len_args, ...) {
    GLAD_UNUSED(name);
    GLAD_UNUSED(apiproc);
    GLAD_UNUSED(len_args);
}
static void _post_call_glx_callback_default(void *ret, const char *name, GLADapiproc apiproc, int len_args, ...) {
    GLAD_UNUSED(ret);
    GLAD_UNUSED(name);
    GLAD_UNUSED(apiproc);
    GLAD_UNUSED(len_args);
}

static GLADprecallback _pre_call_glx_callback = _pre_call_glx_callback_default;
void gladSetGLXPreCallback(GLADprecallback cb) {
    _pre_call_glx_callback = cb;
}
static GLADpostcallback _post_call_glx_callback = _post_call_glx_callback_default;
void gladSetGLXPostCallback(GLADpostcallback cb) {
    _post_call_glx_callback = cb;
}

PFNGLXBINDCHANNELTOWINDOWSGIXPROC glad_glXBindChannelToWindowSGIX = NULL;
static int GLAD_API_PTR glad_debug_impl_glXBindChannelToWindowSGIX(Display * display, int screen, int channel, Window window) {
    int ret;
    _pre_call_glx_callback("glXBindChannelToWindowSGIX", (GLADapiproc) glad_glXBindChannelToWindowSGIX, 4, display, screen, channel, window);
    ret = glad_glXBindChannelToWindowSGIX(display, screen, channel, window);
    _post_call_glx_callback((void*) &ret, "glXBindChannelToWindowSGIX", (GLADapiproc) glad_glXBindChannelToWindowSGIX, 4, display, screen, channel, window);
    return ret;
}
PFNGLXBINDCHANNELTOWINDOWSGIXPROC glad_debug_glXBindChannelToWindowSGIX = glad_debug_impl_glXBindChannelToWindowSGIX;
PFNGLXBINDHYPERPIPESGIXPROC glad_glXBindHyperpipeSGIX = NULL;
static int GLAD_API_PTR glad_debug_impl_glXBindHyperpipeSGIX(Display * dpy, int hpId) {
    int ret;
    _pre_call_glx_callback("glXBindHyperpipeSGIX", (GLADapiproc) glad_glXBindHyperpipeSGIX, 2, dpy, hpId);
    ret = glad_glXBindHyperpipeSGIX(dpy, hpId);
    _post_call_glx_callback((void*) &ret, "glXBindHyperpipeSGIX", (GLADapiproc) glad_glXBindHyperpipeSGIX, 2, dpy, hpId);
    return ret;
}
PFNGLXBINDHYPERPIPESGIXPROC glad_debug_glXBindHyperpipeSGIX = glad_debug_impl_glXBindHyperpipeSGIX;
PFNGLXBINDSWAPBARRIERNVPROC glad_glXBindSwapBarrierNV = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXBindSwapBarrierNV(Display * dpy, GLuint group, GLuint barrier) {
    Bool ret;
    _pre_call_glx_callback("glXBindSwapBarrierNV", (GLADapiproc) glad_glXBindSwapBarrierNV, 3, dpy, group, barrier);
    ret = glad_glXBindSwapBarrierNV(dpy, group, barrier);
    _post_call_glx_callback((void*) &ret, "glXBindSwapBarrierNV", (GLADapiproc) glad_glXBindSwapBarrierNV, 3, dpy, group, barrier);
    return ret;
}
PFNGLXBINDSWAPBARRIERNVPROC glad_debug_glXBindSwapBarrierNV = glad_debug_impl_glXBindSwapBarrierNV;
PFNGLXBINDSWAPBARRIERSGIXPROC glad_glXBindSwapBarrierSGIX = NULL;
static void GLAD_API_PTR glad_debug_impl_glXBindSwapBarrierSGIX(Display * dpy, GLXDrawable drawable, int barrier) {
    _pre_call_glx_callback("glXBindSwapBarrierSGIX", (GLADapiproc) glad_glXBindSwapBarrierSGIX, 3, dpy, drawable, barrier);
    glad_glXBindSwapBarrierSGIX(dpy, drawable, barrier);
    _post_call_glx_callback(NULL, "glXBindSwapBarrierSGIX", (GLADapiproc) glad_glXBindSwapBarrierSGIX, 3, dpy, drawable, barrier);
    
}
PFNGLXBINDSWAPBARRIERSGIXPROC glad_debug_glXBindSwapBarrierSGIX = glad_debug_impl_glXBindSwapBarrierSGIX;
PFNGLXBINDTEXIMAGEEXTPROC glad_glXBindTexImageEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_glXBindTexImageEXT(Display * dpy, GLXDrawable drawable, int buffer, const int * attrib_list) {
    _pre_call_glx_callback("glXBindTexImageEXT", (GLADapiproc) glad_glXBindTexImageEXT, 4, dpy, drawable, buffer, attrib_list);
    glad_glXBindTexImageEXT(dpy, drawable, buffer, attrib_list);
    _post_call_glx_callback(NULL, "glXBindTexImageEXT", (GLADapiproc) glad_glXBindTexImageEXT, 4, dpy, drawable, buffer, attrib_list);
    
}
PFNGLXBINDTEXIMAGEEXTPROC glad_debug_glXBindTexImageEXT = glad_debug_impl_glXBindTexImageEXT;
PFNGLXBINDVIDEOCAPTUREDEVICENVPROC glad_glXBindVideoCaptureDeviceNV = NULL;
static int GLAD_API_PTR glad_debug_impl_glXBindVideoCaptureDeviceNV(Display * dpy, unsigned int video_capture_slot, GLXVideoCaptureDeviceNV device) {
    int ret;
    _pre_call_glx_callback("glXBindVideoCaptureDeviceNV", (GLADapiproc) glad_glXBindVideoCaptureDeviceNV, 3, dpy, video_capture_slot, device);
    ret = glad_glXBindVideoCaptureDeviceNV(dpy, video_capture_slot, device);
    _post_call_glx_callback((void*) &ret, "glXBindVideoCaptureDeviceNV", (GLADapiproc) glad_glXBindVideoCaptureDeviceNV, 3, dpy, video_capture_slot, device);
    return ret;
}
PFNGLXBINDVIDEOCAPTUREDEVICENVPROC glad_debug_glXBindVideoCaptureDeviceNV = glad_debug_impl_glXBindVideoCaptureDeviceNV;
PFNGLXBINDVIDEODEVICENVPROC glad_glXBindVideoDeviceNV = NULL;
static int GLAD_API_PTR glad_debug_impl_glXBindVideoDeviceNV(Display * dpy, unsigned int video_slot, unsigned int video_device, const int * attrib_list) {
    int ret;
    _pre_call_glx_callback("glXBindVideoDeviceNV", (GLADapiproc) glad_glXBindVideoDeviceNV, 4, dpy, video_slot, video_device, attrib_list);
    ret = glad_glXBindVideoDeviceNV(dpy, video_slot, video_device, attrib_list);
    _post_call_glx_callback((void*) &ret, "glXBindVideoDeviceNV", (GLADapiproc) glad_glXBindVideoDeviceNV, 4, dpy, video_slot, video_device, attrib_list);
    return ret;
}
PFNGLXBINDVIDEODEVICENVPROC glad_debug_glXBindVideoDeviceNV = glad_debug_impl_glXBindVideoDeviceNV;
PFNGLXBINDVIDEOIMAGENVPROC glad_glXBindVideoImageNV = NULL;
static int GLAD_API_PTR glad_debug_impl_glXBindVideoImageNV(Display * dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer) {
    int ret;
    _pre_call_glx_callback("glXBindVideoImageNV", (GLADapiproc) glad_glXBindVideoImageNV, 4, dpy, VideoDevice, pbuf, iVideoBuffer);
    ret = glad_glXBindVideoImageNV(dpy, VideoDevice, pbuf, iVideoBuffer);
    _post_call_glx_callback((void*) &ret, "glXBindVideoImageNV", (GLADapiproc) glad_glXBindVideoImageNV, 4, dpy, VideoDevice, pbuf, iVideoBuffer);
    return ret;
}
PFNGLXBINDVIDEOIMAGENVPROC glad_debug_glXBindVideoImageNV = glad_debug_impl_glXBindVideoImageNV;
PFNGLXBLITCONTEXTFRAMEBUFFERAMDPROC glad_glXBlitContextFramebufferAMD = NULL;
static void GLAD_API_PTR glad_debug_impl_glXBlitContextFramebufferAMD(GLXContext dstCtx, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) {
    _pre_call_glx_callback("glXBlitContextFramebufferAMD", (GLADapiproc) glad_glXBlitContextFramebufferAMD, 11, dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    glad_glXBlitContextFramebufferAMD(dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    _post_call_glx_callback(NULL, "glXBlitContextFramebufferAMD", (GLADapiproc) glad_glXBlitContextFramebufferAMD, 11, dstCtx, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    
}
PFNGLXBLITCONTEXTFRAMEBUFFERAMDPROC glad_debug_glXBlitContextFramebufferAMD = glad_debug_impl_glXBlitContextFramebufferAMD;
PFNGLXCHANNELRECTSGIXPROC glad_glXChannelRectSGIX = NULL;
static int GLAD_API_PTR glad_debug_impl_glXChannelRectSGIX(Display * display, int screen, int channel, int x, int y, int w, int h) {
    int ret;
    _pre_call_glx_callback("glXChannelRectSGIX", (GLADapiproc) glad_glXChannelRectSGIX, 7, display, screen, channel, x, y, w, h);
    ret = glad_glXChannelRectSGIX(display, screen, channel, x, y, w, h);
    _post_call_glx_callback((void*) &ret, "glXChannelRectSGIX", (GLADapiproc) glad_glXChannelRectSGIX, 7, display, screen, channel, x, y, w, h);
    return ret;
}
PFNGLXCHANNELRECTSGIXPROC glad_debug_glXChannelRectSGIX = glad_debug_impl_glXChannelRectSGIX;
PFNGLXCHANNELRECTSYNCSGIXPROC glad_glXChannelRectSyncSGIX = NULL;
static int GLAD_API_PTR glad_debug_impl_glXChannelRectSyncSGIX(Display * display, int screen, int channel, GLenum synctype) {
    int ret;
    _pre_call_glx_callback("glXChannelRectSyncSGIX", (GLADapiproc) glad_glXChannelRectSyncSGIX, 4, display, screen, channel, synctype);
    ret = glad_glXChannelRectSyncSGIX(display, screen, channel, synctype);
    _post_call_glx_callback((void*) &ret, "glXChannelRectSyncSGIX", (GLADapiproc) glad_glXChannelRectSyncSGIX, 4, display, screen, channel, synctype);
    return ret;
}
PFNGLXCHANNELRECTSYNCSGIXPROC glad_debug_glXChannelRectSyncSGIX = glad_debug_impl_glXChannelRectSyncSGIX;
PFNGLXCHOOSEFBCONFIGPROC glad_glXChooseFBConfig = NULL;
static GLXFBConfig * GLAD_API_PTR glad_debug_impl_glXChooseFBConfig(Display * dpy, int screen, const int * attrib_list, int * nelements) {
    GLXFBConfig * ret;
    _pre_call_glx_callback("glXChooseFBConfig", (GLADapiproc) glad_glXChooseFBConfig, 4, dpy, screen, attrib_list, nelements);
    ret = glad_glXChooseFBConfig(dpy, screen, attrib_list, nelements);
    _post_call_glx_callback((void*) &ret, "glXChooseFBConfig", (GLADapiproc) glad_glXChooseFBConfig, 4, dpy, screen, attrib_list, nelements);
    return ret;
}
PFNGLXCHOOSEFBCONFIGPROC glad_debug_glXChooseFBConfig = glad_debug_impl_glXChooseFBConfig;
PFNGLXCHOOSEFBCONFIGSGIXPROC glad_glXChooseFBConfigSGIX = NULL;
static GLXFBConfigSGIX * GLAD_API_PTR glad_debug_impl_glXChooseFBConfigSGIX(Display * dpy, int screen, int * attrib_list, int * nelements) {
    GLXFBConfigSGIX * ret;
    _pre_call_glx_callback("glXChooseFBConfigSGIX", (GLADapiproc) glad_glXChooseFBConfigSGIX, 4, dpy, screen, attrib_list, nelements);
    ret = glad_glXChooseFBConfigSGIX(dpy, screen, attrib_list, nelements);
    _post_call_glx_callback((void*) &ret, "glXChooseFBConfigSGIX", (GLADapiproc) glad_glXChooseFBConfigSGIX, 4, dpy, screen, attrib_list, nelements);
    return ret;
}
PFNGLXCHOOSEFBCONFIGSGIXPROC glad_debug_glXChooseFBConfigSGIX = glad_debug_impl_glXChooseFBConfigSGIX;
PFNGLXCHOOSEVISUALPROC glad_glXChooseVisual = NULL;
static XVisualInfo * GLAD_API_PTR glad_debug_impl_glXChooseVisual(Display * dpy, int screen, int * attribList) {
    XVisualInfo * ret;
    _pre_call_glx_callback("glXChooseVisual", (GLADapiproc) glad_glXChooseVisual, 3, dpy, screen, attribList);
    ret = glad_glXChooseVisual(dpy, screen, attribList);
    _post_call_glx_callback((void*) &ret, "glXChooseVisual", (GLADapiproc) glad_glXChooseVisual, 3, dpy, screen, attribList);
    return ret;
}
PFNGLXCHOOSEVISUALPROC glad_debug_glXChooseVisual = glad_debug_impl_glXChooseVisual;
PFNGLXCOPYBUFFERSUBDATANVPROC glad_glXCopyBufferSubDataNV = NULL;
static void GLAD_API_PTR glad_debug_impl_glXCopyBufferSubDataNV(Display * dpy, GLXContext readCtx, GLXContext writeCtx, GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
    _pre_call_glx_callback("glXCopyBufferSubDataNV", (GLADapiproc) glad_glXCopyBufferSubDataNV, 8, dpy, readCtx, writeCtx, readTarget, writeTarget, readOffset, writeOffset, size);
    glad_glXCopyBufferSubDataNV(dpy, readCtx, writeCtx, readTarget, writeTarget, readOffset, writeOffset, size);
    _post_call_glx_callback(NULL, "glXCopyBufferSubDataNV", (GLADapiproc) glad_glXCopyBufferSubDataNV, 8, dpy, readCtx, writeCtx, readTarget, writeTarget, readOffset, writeOffset, size);
    
}
PFNGLXCOPYBUFFERSUBDATANVPROC glad_debug_glXCopyBufferSubDataNV = glad_debug_impl_glXCopyBufferSubDataNV;
PFNGLXCOPYCONTEXTPROC glad_glXCopyContext = NULL;
static void GLAD_API_PTR glad_debug_impl_glXCopyContext(Display * dpy, GLXContext src, GLXContext dst, unsigned long mask) {
    _pre_call_glx_callback("glXCopyContext", (GLADapiproc) glad_glXCopyContext, 4, dpy, src, dst, mask);
    glad_glXCopyContext(dpy, src, dst, mask);
    _post_call_glx_callback(NULL, "glXCopyContext", (GLADapiproc) glad_glXCopyContext, 4, dpy, src, dst, mask);
    
}
PFNGLXCOPYCONTEXTPROC glad_debug_glXCopyContext = glad_debug_impl_glXCopyContext;
PFNGLXCOPYIMAGESUBDATANVPROC glad_glXCopyImageSubDataNV = NULL;
static void GLAD_API_PTR glad_debug_impl_glXCopyImageSubDataNV(Display * dpy, GLXContext srcCtx, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLXContext dstCtx, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) {
    _pre_call_glx_callback("glXCopyImageSubDataNV", (GLADapiproc) glad_glXCopyImageSubDataNV, 18, dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
    glad_glXCopyImageSubDataNV(dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
    _post_call_glx_callback(NULL, "glXCopyImageSubDataNV", (GLADapiproc) glad_glXCopyImageSubDataNV, 18, dpy, srcCtx, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstCtx, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
    
}
PFNGLXCOPYIMAGESUBDATANVPROC glad_debug_glXCopyImageSubDataNV = glad_debug_impl_glXCopyImageSubDataNV;
PFNGLXCOPYSUBBUFFERMESAPROC glad_glXCopySubBufferMESA = NULL;
static void GLAD_API_PTR glad_debug_impl_glXCopySubBufferMESA(Display * dpy, GLXDrawable drawable, int x, int y, int width, int height) {
    _pre_call_glx_callback("glXCopySubBufferMESA", (GLADapiproc) glad_glXCopySubBufferMESA, 6, dpy, drawable, x, y, width, height);
    glad_glXCopySubBufferMESA(dpy, drawable, x, y, width, height);
    _post_call_glx_callback(NULL, "glXCopySubBufferMESA", (GLADapiproc) glad_glXCopySubBufferMESA, 6, dpy, drawable, x, y, width, height);
    
}
PFNGLXCOPYSUBBUFFERMESAPROC glad_debug_glXCopySubBufferMESA = glad_debug_impl_glXCopySubBufferMESA;
PFNGLXCREATEASSOCIATEDCONTEXTAMDPROC glad_glXCreateAssociatedContextAMD = NULL;
static GLXContext GLAD_API_PTR glad_debug_impl_glXCreateAssociatedContextAMD(unsigned int id, GLXContext share_list) {
    GLXContext ret;
    _pre_call_glx_callback("glXCreateAssociatedContextAMD", (GLADapiproc) glad_glXCreateAssociatedContextAMD, 2, id, share_list);
    ret = glad_glXCreateAssociatedContextAMD(id, share_list);
    _post_call_glx_callback((void*) &ret, "glXCreateAssociatedContextAMD", (GLADapiproc) glad_glXCreateAssociatedContextAMD, 2, id, share_list);
    return ret;
}
PFNGLXCREATEASSOCIATEDCONTEXTAMDPROC glad_debug_glXCreateAssociatedContextAMD = glad_debug_impl_glXCreateAssociatedContextAMD;
PFNGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC glad_glXCreateAssociatedContextAttribsAMD = NULL;
static GLXContext GLAD_API_PTR glad_debug_impl_glXCreateAssociatedContextAttribsAMD(unsigned int id, GLXContext share_context, const int * attribList) {
    GLXContext ret;
    _pre_call_glx_callback("glXCreateAssociatedContextAttribsAMD", (GLADapiproc) glad_glXCreateAssociatedContextAttribsAMD, 3, id, share_context, attribList);
    ret = glad_glXCreateAssociatedContextAttribsAMD(id, share_context, attribList);
    _post_call_glx_callback((void*) &ret, "glXCreateAssociatedContextAttribsAMD", (GLADapiproc) glad_glXCreateAssociatedContextAttribsAMD, 3, id, share_context, attribList);
    return ret;
}
PFNGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC glad_debug_glXCreateAssociatedContextAttribsAMD = glad_debug_impl_glXCreateAssociatedContextAttribsAMD;
PFNGLXCREATECONTEXTPROC glad_glXCreateContext = NULL;
static GLXContext GLAD_API_PTR glad_debug_impl_glXCreateContext(Display * dpy, XVisualInfo * vis, GLXContext shareList, Bool direct) {
    GLXContext ret;
    _pre_call_glx_callback("glXCreateContext", (GLADapiproc) glad_glXCreateContext, 4, dpy, vis, shareList, direct);
    ret = glad_glXCreateContext(dpy, vis, shareList, direct);
    _post_call_glx_callback((void*) &ret, "glXCreateContext", (GLADapiproc) glad_glXCreateContext, 4, dpy, vis, shareList, direct);
    return ret;
}
PFNGLXCREATECONTEXTPROC glad_debug_glXCreateContext = glad_debug_impl_glXCreateContext;
PFNGLXCREATECONTEXTATTRIBSARBPROC glad_glXCreateContextAttribsARB = NULL;
static GLXContext GLAD_API_PTR glad_debug_impl_glXCreateContextAttribsARB(Display * dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int * attrib_list) {
    GLXContext ret;
    _pre_call_glx_callback("glXCreateContextAttribsARB", (GLADapiproc) glad_glXCreateContextAttribsARB, 5, dpy, config, share_context, direct, attrib_list);
    ret = glad_glXCreateContextAttribsARB(dpy, config, share_context, direct, attrib_list);
    _post_call_glx_callback((void*) &ret, "glXCreateContextAttribsARB", (GLADapiproc) glad_glXCreateContextAttribsARB, 5, dpy, config, share_context, direct, attrib_list);
    return ret;
}
PFNGLXCREATECONTEXTATTRIBSARBPROC glad_debug_glXCreateContextAttribsARB = glad_debug_impl_glXCreateContextAttribsARB;
PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC glad_glXCreateContextWithConfigSGIX = NULL;
static GLXContext GLAD_API_PTR glad_debug_impl_glXCreateContextWithConfigSGIX(Display * dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, Bool direct) {
    GLXContext ret;
    _pre_call_glx_callback("glXCreateContextWithConfigSGIX", (GLADapiproc) glad_glXCreateContextWithConfigSGIX, 5, dpy, config, render_type, share_list, direct);
    ret = glad_glXCreateContextWithConfigSGIX(dpy, config, render_type, share_list, direct);
    _post_call_glx_callback((void*) &ret, "glXCreateContextWithConfigSGIX", (GLADapiproc) glad_glXCreateContextWithConfigSGIX, 5, dpy, config, render_type, share_list, direct);
    return ret;
}
PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC glad_debug_glXCreateContextWithConfigSGIX = glad_debug_impl_glXCreateContextWithConfigSGIX;
PFNGLXCREATEGLXPBUFFERSGIXPROC glad_glXCreateGLXPbufferSGIX = NULL;
static GLXPbufferSGIX GLAD_API_PTR glad_debug_impl_glXCreateGLXPbufferSGIX(Display * dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int * attrib_list) {
    GLXPbufferSGIX ret;
    _pre_call_glx_callback("glXCreateGLXPbufferSGIX", (GLADapiproc) glad_glXCreateGLXPbufferSGIX, 5, dpy, config, width, height, attrib_list);
    ret = glad_glXCreateGLXPbufferSGIX(dpy, config, width, height, attrib_list);
    _post_call_glx_callback((void*) &ret, "glXCreateGLXPbufferSGIX", (GLADapiproc) glad_glXCreateGLXPbufferSGIX, 5, dpy, config, width, height, attrib_list);
    return ret;
}
PFNGLXCREATEGLXPBUFFERSGIXPROC glad_debug_glXCreateGLXPbufferSGIX = glad_debug_impl_glXCreateGLXPbufferSGIX;
PFNGLXCREATEGLXPIXMAPPROC glad_glXCreateGLXPixmap = NULL;
static GLXPixmap GLAD_API_PTR glad_debug_impl_glXCreateGLXPixmap(Display * dpy, XVisualInfo * visual, Pixmap pixmap) {
    GLXPixmap ret;
    _pre_call_glx_callback("glXCreateGLXPixmap", (GLADapiproc) glad_glXCreateGLXPixmap, 3, dpy, visual, pixmap);
    ret = glad_glXCreateGLXPixmap(dpy, visual, pixmap);
    _post_call_glx_callback((void*) &ret, "glXCreateGLXPixmap", (GLADapiproc) glad_glXCreateGLXPixmap, 3, dpy, visual, pixmap);
    return ret;
}
PFNGLXCREATEGLXPIXMAPPROC glad_debug_glXCreateGLXPixmap = glad_debug_impl_glXCreateGLXPixmap;
PFNGLXCREATEGLXPIXMAPMESAPROC glad_glXCreateGLXPixmapMESA = NULL;
static GLXPixmap GLAD_API_PTR glad_debug_impl_glXCreateGLXPixmapMESA(Display * dpy, XVisualInfo * visual, Pixmap pixmap, Colormap cmap) {
    GLXPixmap ret;
    _pre_call_glx_callback("glXCreateGLXPixmapMESA", (GLADapiproc) glad_glXCreateGLXPixmapMESA, 4, dpy, visual, pixmap, cmap);
    ret = glad_glXCreateGLXPixmapMESA(dpy, visual, pixmap, cmap);
    _post_call_glx_callback((void*) &ret, "glXCreateGLXPixmapMESA", (GLADapiproc) glad_glXCreateGLXPixmapMESA, 4, dpy, visual, pixmap, cmap);
    return ret;
}
PFNGLXCREATEGLXPIXMAPMESAPROC glad_debug_glXCreateGLXPixmapMESA = glad_debug_impl_glXCreateGLXPixmapMESA;
PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC glad_glXCreateGLXPixmapWithConfigSGIX = NULL;
static GLXPixmap GLAD_API_PTR glad_debug_impl_glXCreateGLXPixmapWithConfigSGIX(Display * dpy, GLXFBConfigSGIX config, Pixmap pixmap) {
    GLXPixmap ret;
    _pre_call_glx_callback("glXCreateGLXPixmapWithConfigSGIX", (GLADapiproc) glad_glXCreateGLXPixmapWithConfigSGIX, 3, dpy, config, pixmap);
    ret = glad_glXCreateGLXPixmapWithConfigSGIX(dpy, config, pixmap);
    _post_call_glx_callback((void*) &ret, "glXCreateGLXPixmapWithConfigSGIX", (GLADapiproc) glad_glXCreateGLXPixmapWithConfigSGIX, 3, dpy, config, pixmap);
    return ret;
}
PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC glad_debug_glXCreateGLXPixmapWithConfigSGIX = glad_debug_impl_glXCreateGLXPixmapWithConfigSGIX;
PFNGLXCREATENEWCONTEXTPROC glad_glXCreateNewContext = NULL;
static GLXContext GLAD_API_PTR glad_debug_impl_glXCreateNewContext(Display * dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct) {
    GLXContext ret;
    _pre_call_glx_callback("glXCreateNewContext", (GLADapiproc) glad_glXCreateNewContext, 5, dpy, config, render_type, share_list, direct);
    ret = glad_glXCreateNewContext(dpy, config, render_type, share_list, direct);
    _post_call_glx_callback((void*) &ret, "glXCreateNewContext", (GLADapiproc) glad_glXCreateNewContext, 5, dpy, config, render_type, share_list, direct);
    return ret;
}
PFNGLXCREATENEWCONTEXTPROC glad_debug_glXCreateNewContext = glad_debug_impl_glXCreateNewContext;
PFNGLXCREATEPBUFFERPROC glad_glXCreatePbuffer = NULL;
static GLXPbuffer GLAD_API_PTR glad_debug_impl_glXCreatePbuffer(Display * dpy, GLXFBConfig config, const int * attrib_list) {
    GLXPbuffer ret;
    _pre_call_glx_callback("glXCreatePbuffer", (GLADapiproc) glad_glXCreatePbuffer, 3, dpy, config, attrib_list);
    ret = glad_glXCreatePbuffer(dpy, config, attrib_list);
    _post_call_glx_callback((void*) &ret, "glXCreatePbuffer", (GLADapiproc) glad_glXCreatePbuffer, 3, dpy, config, attrib_list);
    return ret;
}
PFNGLXCREATEPBUFFERPROC glad_debug_glXCreatePbuffer = glad_debug_impl_glXCreatePbuffer;
PFNGLXCREATEPIXMAPPROC glad_glXCreatePixmap = NULL;
static GLXPixmap GLAD_API_PTR glad_debug_impl_glXCreatePixmap(Display * dpy, GLXFBConfig config, Pixmap pixmap, const int * attrib_list) {
    GLXPixmap ret;
    _pre_call_glx_callback("glXCreatePixmap", (GLADapiproc) glad_glXCreatePixmap, 4, dpy, config, pixmap, attrib_list);
    ret = glad_glXCreatePixmap(dpy, config, pixmap, attrib_list);
    _post_call_glx_callback((void*) &ret, "glXCreatePixmap", (GLADapiproc) glad_glXCreatePixmap, 4, dpy, config, pixmap, attrib_list);
    return ret;
}
PFNGLXCREATEPIXMAPPROC glad_debug_glXCreatePixmap = glad_debug_impl_glXCreatePixmap;
PFNGLXCREATEWINDOWPROC glad_glXCreateWindow = NULL;
static GLXWindow GLAD_API_PTR glad_debug_impl_glXCreateWindow(Display * dpy, GLXFBConfig config, Window win, const int * attrib_list) {
    GLXWindow ret;
    _pre_call_glx_callback("glXCreateWindow", (GLADapiproc) glad_glXCreateWindow, 4, dpy, config, win, attrib_list);
    ret = glad_glXCreateWindow(dpy, config, win, attrib_list);
    _post_call_glx_callback((void*) &ret, "glXCreateWindow", (GLADapiproc) glad_glXCreateWindow, 4, dpy, config, win, attrib_list);
    return ret;
}
PFNGLXCREATEWINDOWPROC glad_debug_glXCreateWindow = glad_debug_impl_glXCreateWindow;
PFNGLXCUSHIONSGIPROC glad_glXCushionSGI = NULL;
static void GLAD_API_PTR glad_debug_impl_glXCushionSGI(Display * dpy, Window window, float cushion) {
    _pre_call_glx_callback("glXCushionSGI", (GLADapiproc) glad_glXCushionSGI, 3, dpy, window, cushion);
    glad_glXCushionSGI(dpy, window, cushion);
    _post_call_glx_callback(NULL, "glXCushionSGI", (GLADapiproc) glad_glXCushionSGI, 3, dpy, window, cushion);
    
}
PFNGLXCUSHIONSGIPROC glad_debug_glXCushionSGI = glad_debug_impl_glXCushionSGI;
PFNGLXDELAYBEFORESWAPNVPROC glad_glXDelayBeforeSwapNV = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXDelayBeforeSwapNV(Display * dpy, GLXDrawable drawable, GLfloat seconds) {
    Bool ret;
    _pre_call_glx_callback("glXDelayBeforeSwapNV", (GLADapiproc) glad_glXDelayBeforeSwapNV, 3, dpy, drawable, seconds);
    ret = glad_glXDelayBeforeSwapNV(dpy, drawable, seconds);
    _post_call_glx_callback((void*) &ret, "glXDelayBeforeSwapNV", (GLADapiproc) glad_glXDelayBeforeSwapNV, 3, dpy, drawable, seconds);
    return ret;
}
PFNGLXDELAYBEFORESWAPNVPROC glad_debug_glXDelayBeforeSwapNV = glad_debug_impl_glXDelayBeforeSwapNV;
PFNGLXDELETEASSOCIATEDCONTEXTAMDPROC glad_glXDeleteAssociatedContextAMD = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXDeleteAssociatedContextAMD(GLXContext ctx) {
    Bool ret;
    _pre_call_glx_callback("glXDeleteAssociatedContextAMD", (GLADapiproc) glad_glXDeleteAssociatedContextAMD, 1, ctx);
    ret = glad_glXDeleteAssociatedContextAMD(ctx);
    _post_call_glx_callback((void*) &ret, "glXDeleteAssociatedContextAMD", (GLADapiproc) glad_glXDeleteAssociatedContextAMD, 1, ctx);
    return ret;
}
PFNGLXDELETEASSOCIATEDCONTEXTAMDPROC glad_debug_glXDeleteAssociatedContextAMD = glad_debug_impl_glXDeleteAssociatedContextAMD;
PFNGLXDESTROYCONTEXTPROC glad_glXDestroyContext = NULL;
static void GLAD_API_PTR glad_debug_impl_glXDestroyContext(Display * dpy, GLXContext ctx) {
    _pre_call_glx_callback("glXDestroyContext", (GLADapiproc) glad_glXDestroyContext, 2, dpy, ctx);
    glad_glXDestroyContext(dpy, ctx);
    _post_call_glx_callback(NULL, "glXDestroyContext", (GLADapiproc) glad_glXDestroyContext, 2, dpy, ctx);
    
}
PFNGLXDESTROYCONTEXTPROC glad_debug_glXDestroyContext = glad_debug_impl_glXDestroyContext;
PFNGLXDESTROYGLXPBUFFERSGIXPROC glad_glXDestroyGLXPbufferSGIX = NULL;
static void GLAD_API_PTR glad_debug_impl_glXDestroyGLXPbufferSGIX(Display * dpy, GLXPbufferSGIX pbuf) {
    _pre_call_glx_callback("glXDestroyGLXPbufferSGIX", (GLADapiproc) glad_glXDestroyGLXPbufferSGIX, 2, dpy, pbuf);
    glad_glXDestroyGLXPbufferSGIX(dpy, pbuf);
    _post_call_glx_callback(NULL, "glXDestroyGLXPbufferSGIX", (GLADapiproc) glad_glXDestroyGLXPbufferSGIX, 2, dpy, pbuf);
    
}
PFNGLXDESTROYGLXPBUFFERSGIXPROC glad_debug_glXDestroyGLXPbufferSGIX = glad_debug_impl_glXDestroyGLXPbufferSGIX;
PFNGLXDESTROYGLXPIXMAPPROC glad_glXDestroyGLXPixmap = NULL;
static void GLAD_API_PTR glad_debug_impl_glXDestroyGLXPixmap(Display * dpy, GLXPixmap pixmap) {
    _pre_call_glx_callback("glXDestroyGLXPixmap", (GLADapiproc) glad_glXDestroyGLXPixmap, 2, dpy, pixmap);
    glad_glXDestroyGLXPixmap(dpy, pixmap);
    _post_call_glx_callback(NULL, "glXDestroyGLXPixmap", (GLADapiproc) glad_glXDestroyGLXPixmap, 2, dpy, pixmap);
    
}
PFNGLXDESTROYGLXPIXMAPPROC glad_debug_glXDestroyGLXPixmap = glad_debug_impl_glXDestroyGLXPixmap;
PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC glad_glXDestroyHyperpipeConfigSGIX = NULL;
static int GLAD_API_PTR glad_debug_impl_glXDestroyHyperpipeConfigSGIX(Display * dpy, int hpId) {
    int ret;
    _pre_call_glx_callback("glXDestroyHyperpipeConfigSGIX", (GLADapiproc) glad_glXDestroyHyperpipeConfigSGIX, 2, dpy, hpId);
    ret = glad_glXDestroyHyperpipeConfigSGIX(dpy, hpId);
    _post_call_glx_callback((void*) &ret, "glXDestroyHyperpipeConfigSGIX", (GLADapiproc) glad_glXDestroyHyperpipeConfigSGIX, 2, dpy, hpId);
    return ret;
}
PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC glad_debug_glXDestroyHyperpipeConfigSGIX = glad_debug_impl_glXDestroyHyperpipeConfigSGIX;
PFNGLXDESTROYPBUFFERPROC glad_glXDestroyPbuffer = NULL;
static void GLAD_API_PTR glad_debug_impl_glXDestroyPbuffer(Display * dpy, GLXPbuffer pbuf) {
    _pre_call_glx_callback("glXDestroyPbuffer", (GLADapiproc) glad_glXDestroyPbuffer, 2, dpy, pbuf);
    glad_glXDestroyPbuffer(dpy, pbuf);
    _post_call_glx_callback(NULL, "glXDestroyPbuffer", (GLADapiproc) glad_glXDestroyPbuffer, 2, dpy, pbuf);
    
}
PFNGLXDESTROYPBUFFERPROC glad_debug_glXDestroyPbuffer = glad_debug_impl_glXDestroyPbuffer;
PFNGLXDESTROYPIXMAPPROC glad_glXDestroyPixmap = NULL;
static void GLAD_API_PTR glad_debug_impl_glXDestroyPixmap(Display * dpy, GLXPixmap pixmap) {
    _pre_call_glx_callback("glXDestroyPixmap", (GLADapiproc) glad_glXDestroyPixmap, 2, dpy, pixmap);
    glad_glXDestroyPixmap(dpy, pixmap);
    _post_call_glx_callback(NULL, "glXDestroyPixmap", (GLADapiproc) glad_glXDestroyPixmap, 2, dpy, pixmap);
    
}
PFNGLXDESTROYPIXMAPPROC glad_debug_glXDestroyPixmap = glad_debug_impl_glXDestroyPixmap;
PFNGLXDESTROYWINDOWPROC glad_glXDestroyWindow = NULL;
static void GLAD_API_PTR glad_debug_impl_glXDestroyWindow(Display * dpy, GLXWindow win) {
    _pre_call_glx_callback("glXDestroyWindow", (GLADapiproc) glad_glXDestroyWindow, 2, dpy, win);
    glad_glXDestroyWindow(dpy, win);
    _post_call_glx_callback(NULL, "glXDestroyWindow", (GLADapiproc) glad_glXDestroyWindow, 2, dpy, win);
    
}
PFNGLXDESTROYWINDOWPROC glad_debug_glXDestroyWindow = glad_debug_impl_glXDestroyWindow;
PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC glad_glXEnumerateVideoCaptureDevicesNV = NULL;
static GLXVideoCaptureDeviceNV * GLAD_API_PTR glad_debug_impl_glXEnumerateVideoCaptureDevicesNV(Display * dpy, int screen, int * nelements) {
    GLXVideoCaptureDeviceNV * ret;
    _pre_call_glx_callback("glXEnumerateVideoCaptureDevicesNV", (GLADapiproc) glad_glXEnumerateVideoCaptureDevicesNV, 3, dpy, screen, nelements);
    ret = glad_glXEnumerateVideoCaptureDevicesNV(dpy, screen, nelements);
    _post_call_glx_callback((void*) &ret, "glXEnumerateVideoCaptureDevicesNV", (GLADapiproc) glad_glXEnumerateVideoCaptureDevicesNV, 3, dpy, screen, nelements);
    return ret;
}
PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC glad_debug_glXEnumerateVideoCaptureDevicesNV = glad_debug_impl_glXEnumerateVideoCaptureDevicesNV;
PFNGLXENUMERATEVIDEODEVICESNVPROC glad_glXEnumerateVideoDevicesNV = NULL;
static unsigned int * GLAD_API_PTR glad_debug_impl_glXEnumerateVideoDevicesNV(Display * dpy, int screen, int * nelements) {
    unsigned int * ret;
    _pre_call_glx_callback("glXEnumerateVideoDevicesNV", (GLADapiproc) glad_glXEnumerateVideoDevicesNV, 3, dpy, screen, nelements);
    ret = glad_glXEnumerateVideoDevicesNV(dpy, screen, nelements);
    _post_call_glx_callback((void*) &ret, "glXEnumerateVideoDevicesNV", (GLADapiproc) glad_glXEnumerateVideoDevicesNV, 3, dpy, screen, nelements);
    return ret;
}
PFNGLXENUMERATEVIDEODEVICESNVPROC glad_debug_glXEnumerateVideoDevicesNV = glad_debug_impl_glXEnumerateVideoDevicesNV;
PFNGLXFREECONTEXTEXTPROC glad_glXFreeContextEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_glXFreeContextEXT(Display * dpy, GLXContext context) {
    _pre_call_glx_callback("glXFreeContextEXT", (GLADapiproc) glad_glXFreeContextEXT, 2, dpy, context);
    glad_glXFreeContextEXT(dpy, context);
    _post_call_glx_callback(NULL, "glXFreeContextEXT", (GLADapiproc) glad_glXFreeContextEXT, 2, dpy, context);
    
}
PFNGLXFREECONTEXTEXTPROC glad_debug_glXFreeContextEXT = glad_debug_impl_glXFreeContextEXT;
PFNGLXGETAGPOFFSETMESAPROC glad_glXGetAGPOffsetMESA = NULL;
static unsigned int GLAD_API_PTR glad_debug_impl_glXGetAGPOffsetMESA(const void * pointer) {
    unsigned int ret;
    _pre_call_glx_callback("glXGetAGPOffsetMESA", (GLADapiproc) glad_glXGetAGPOffsetMESA, 1, pointer);
    ret = glad_glXGetAGPOffsetMESA(pointer);
    _post_call_glx_callback((void*) &ret, "glXGetAGPOffsetMESA", (GLADapiproc) glad_glXGetAGPOffsetMESA, 1, pointer);
    return ret;
}
PFNGLXGETAGPOFFSETMESAPROC glad_debug_glXGetAGPOffsetMESA = glad_debug_impl_glXGetAGPOffsetMESA;
PFNGLXGETCLIENTSTRINGPROC glad_glXGetClientString = NULL;
static const char * GLAD_API_PTR glad_debug_impl_glXGetClientString(Display * dpy, int name) {
    const char * ret;
    _pre_call_glx_callback("glXGetClientString", (GLADapiproc) glad_glXGetClientString, 2, dpy, name);
    ret = glad_glXGetClientString(dpy, name);
    _post_call_glx_callback((void*) &ret, "glXGetClientString", (GLADapiproc) glad_glXGetClientString, 2, dpy, name);
    return ret;
}
PFNGLXGETCLIENTSTRINGPROC glad_debug_glXGetClientString = glad_debug_impl_glXGetClientString;
PFNGLXGETCONFIGPROC glad_glXGetConfig = NULL;
static int GLAD_API_PTR glad_debug_impl_glXGetConfig(Display * dpy, XVisualInfo * visual, int attrib, int * value) {
    int ret;
    _pre_call_glx_callback("glXGetConfig", (GLADapiproc) glad_glXGetConfig, 4, dpy, visual, attrib, value);
    ret = glad_glXGetConfig(dpy, visual, attrib, value);
    _post_call_glx_callback((void*) &ret, "glXGetConfig", (GLADapiproc) glad_glXGetConfig, 4, dpy, visual, attrib, value);
    return ret;
}
PFNGLXGETCONFIGPROC glad_debug_glXGetConfig = glad_debug_impl_glXGetConfig;
PFNGLXGETCONTEXTGPUIDAMDPROC glad_glXGetContextGPUIDAMD = NULL;
static unsigned int GLAD_API_PTR glad_debug_impl_glXGetContextGPUIDAMD(GLXContext ctx) {
    unsigned int ret;
    _pre_call_glx_callback("glXGetContextGPUIDAMD", (GLADapiproc) glad_glXGetContextGPUIDAMD, 1, ctx);
    ret = glad_glXGetContextGPUIDAMD(ctx);
    _post_call_glx_callback((void*) &ret, "glXGetContextGPUIDAMD", (GLADapiproc) glad_glXGetContextGPUIDAMD, 1, ctx);
    return ret;
}
PFNGLXGETCONTEXTGPUIDAMDPROC glad_debug_glXGetContextGPUIDAMD = glad_debug_impl_glXGetContextGPUIDAMD;
PFNGLXGETCONTEXTIDEXTPROC glad_glXGetContextIDEXT = NULL;
static GLXContextID GLAD_API_PTR glad_debug_impl_glXGetContextIDEXT(const GLXContext context) {
    GLXContextID ret;
    _pre_call_glx_callback("glXGetContextIDEXT", (GLADapiproc) glad_glXGetContextIDEXT, 1, context);
    ret = glad_glXGetContextIDEXT(context);
    _post_call_glx_callback((void*) &ret, "glXGetContextIDEXT", (GLADapiproc) glad_glXGetContextIDEXT, 1, context);
    return ret;
}
PFNGLXGETCONTEXTIDEXTPROC glad_debug_glXGetContextIDEXT = glad_debug_impl_glXGetContextIDEXT;
PFNGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC glad_glXGetCurrentAssociatedContextAMD = NULL;
static GLXContext GLAD_API_PTR glad_debug_impl_glXGetCurrentAssociatedContextAMD(void) {
    GLXContext ret;
    _pre_call_glx_callback("glXGetCurrentAssociatedContextAMD", (GLADapiproc) glad_glXGetCurrentAssociatedContextAMD, 0);
    ret = glad_glXGetCurrentAssociatedContextAMD();
    _post_call_glx_callback((void*) &ret, "glXGetCurrentAssociatedContextAMD", (GLADapiproc) glad_glXGetCurrentAssociatedContextAMD, 0);
    return ret;
}
PFNGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC glad_debug_glXGetCurrentAssociatedContextAMD = glad_debug_impl_glXGetCurrentAssociatedContextAMD;
PFNGLXGETCURRENTCONTEXTPROC glad_glXGetCurrentContext = NULL;
static GLXContext GLAD_API_PTR glad_debug_impl_glXGetCurrentContext(void) {
    GLXContext ret;
    _pre_call_glx_callback("glXGetCurrentContext", (GLADapiproc) glad_glXGetCurrentContext, 0);
    ret = glad_glXGetCurrentContext();
    _post_call_glx_callback((void*) &ret, "glXGetCurrentContext", (GLADapiproc) glad_glXGetCurrentContext, 0);
    return ret;
}
PFNGLXGETCURRENTCONTEXTPROC glad_debug_glXGetCurrentContext = glad_debug_impl_glXGetCurrentContext;
PFNGLXGETCURRENTDISPLAYPROC glad_glXGetCurrentDisplay = NULL;
static Display * GLAD_API_PTR glad_debug_impl_glXGetCurrentDisplay(void) {
    Display * ret;
    _pre_call_glx_callback("glXGetCurrentDisplay", (GLADapiproc) glad_glXGetCurrentDisplay, 0);
    ret = glad_glXGetCurrentDisplay();
    _post_call_glx_callback((void*) &ret, "glXGetCurrentDisplay", (GLADapiproc) glad_glXGetCurrentDisplay, 0);
    return ret;
}
PFNGLXGETCURRENTDISPLAYPROC glad_debug_glXGetCurrentDisplay = glad_debug_impl_glXGetCurrentDisplay;
PFNGLXGETCURRENTDISPLAYEXTPROC glad_glXGetCurrentDisplayEXT = NULL;
static Display * GLAD_API_PTR glad_debug_impl_glXGetCurrentDisplayEXT(void) {
    Display * ret;
    _pre_call_glx_callback("glXGetCurrentDisplayEXT", (GLADapiproc) glad_glXGetCurrentDisplayEXT, 0);
    ret = glad_glXGetCurrentDisplayEXT();
    _post_call_glx_callback((void*) &ret, "glXGetCurrentDisplayEXT", (GLADapiproc) glad_glXGetCurrentDisplayEXT, 0);
    return ret;
}
PFNGLXGETCURRENTDISPLAYEXTPROC glad_debug_glXGetCurrentDisplayEXT = glad_debug_impl_glXGetCurrentDisplayEXT;
PFNGLXGETCURRENTDRAWABLEPROC glad_glXGetCurrentDrawable = NULL;
static GLXDrawable GLAD_API_PTR glad_debug_impl_glXGetCurrentDrawable(void) {
    GLXDrawable ret;
    _pre_call_glx_callback("glXGetCurrentDrawable", (GLADapiproc) glad_glXGetCurrentDrawable, 0);
    ret = glad_glXGetCurrentDrawable();
    _post_call_glx_callback((void*) &ret, "glXGetCurrentDrawable", (GLADapiproc) glad_glXGetCurrentDrawable, 0);
    return ret;
}
PFNGLXGETCURRENTDRAWABLEPROC glad_debug_glXGetCurrentDrawable = glad_debug_impl_glXGetCurrentDrawable;
PFNGLXGETCURRENTREADDRAWABLEPROC glad_glXGetCurrentReadDrawable = NULL;
static GLXDrawable GLAD_API_PTR glad_debug_impl_glXGetCurrentReadDrawable(void) {
    GLXDrawable ret;
    _pre_call_glx_callback("glXGetCurrentReadDrawable", (GLADapiproc) glad_glXGetCurrentReadDrawable, 0);
    ret = glad_glXGetCurrentReadDrawable();
    _post_call_glx_callback((void*) &ret, "glXGetCurrentReadDrawable", (GLADapiproc) glad_glXGetCurrentReadDrawable, 0);
    return ret;
}
PFNGLXGETCURRENTREADDRAWABLEPROC glad_debug_glXGetCurrentReadDrawable = glad_debug_impl_glXGetCurrentReadDrawable;
PFNGLXGETCURRENTREADDRAWABLESGIPROC glad_glXGetCurrentReadDrawableSGI = NULL;
static GLXDrawable GLAD_API_PTR glad_debug_impl_glXGetCurrentReadDrawableSGI(void) {
    GLXDrawable ret;
    _pre_call_glx_callback("glXGetCurrentReadDrawableSGI", (GLADapiproc) glad_glXGetCurrentReadDrawableSGI, 0);
    ret = glad_glXGetCurrentReadDrawableSGI();
    _post_call_glx_callback((void*) &ret, "glXGetCurrentReadDrawableSGI", (GLADapiproc) glad_glXGetCurrentReadDrawableSGI, 0);
    return ret;
}
PFNGLXGETCURRENTREADDRAWABLESGIPROC glad_debug_glXGetCurrentReadDrawableSGI = glad_debug_impl_glXGetCurrentReadDrawableSGI;
PFNGLXGETFBCONFIGATTRIBPROC glad_glXGetFBConfigAttrib = NULL;
static int GLAD_API_PTR glad_debug_impl_glXGetFBConfigAttrib(Display * dpy, GLXFBConfig config, int attribute, int * value) {
    int ret;
    _pre_call_glx_callback("glXGetFBConfigAttrib", (GLADapiproc) glad_glXGetFBConfigAttrib, 4, dpy, config, attribute, value);
    ret = glad_glXGetFBConfigAttrib(dpy, config, attribute, value);
    _post_call_glx_callback((void*) &ret, "glXGetFBConfigAttrib", (GLADapiproc) glad_glXGetFBConfigAttrib, 4, dpy, config, attribute, value);
    return ret;
}
PFNGLXGETFBCONFIGATTRIBPROC glad_debug_glXGetFBConfigAttrib = glad_debug_impl_glXGetFBConfigAttrib;
PFNGLXGETFBCONFIGATTRIBSGIXPROC glad_glXGetFBConfigAttribSGIX = NULL;
static int GLAD_API_PTR glad_debug_impl_glXGetFBConfigAttribSGIX(Display * dpy, GLXFBConfigSGIX config, int attribute, int * value) {
    int ret;
    _pre_call_glx_callback("glXGetFBConfigAttribSGIX", (GLADapiproc) glad_glXGetFBConfigAttribSGIX, 4, dpy, config, attribute, value);
    ret = glad_glXGetFBConfigAttribSGIX(dpy, config, attribute, value);
    _post_call_glx_callback((void*) &ret, "glXGetFBConfigAttribSGIX", (GLADapiproc) glad_glXGetFBConfigAttribSGIX, 4, dpy, config, attribute, value);
    return ret;
}
PFNGLXGETFBCONFIGATTRIBSGIXPROC glad_debug_glXGetFBConfigAttribSGIX = glad_debug_impl_glXGetFBConfigAttribSGIX;
PFNGLXGETFBCONFIGFROMVISUALSGIXPROC glad_glXGetFBConfigFromVisualSGIX = NULL;
static GLXFBConfigSGIX GLAD_API_PTR glad_debug_impl_glXGetFBConfigFromVisualSGIX(Display * dpy, XVisualInfo * vis) {
    GLXFBConfigSGIX ret;
    _pre_call_glx_callback("glXGetFBConfigFromVisualSGIX", (GLADapiproc) glad_glXGetFBConfigFromVisualSGIX, 2, dpy, vis);
    ret = glad_glXGetFBConfigFromVisualSGIX(dpy, vis);
    _post_call_glx_callback((void*) &ret, "glXGetFBConfigFromVisualSGIX", (GLADapiproc) glad_glXGetFBConfigFromVisualSGIX, 2, dpy, vis);
    return ret;
}
PFNGLXGETFBCONFIGFROMVISUALSGIXPROC glad_debug_glXGetFBConfigFromVisualSGIX = glad_debug_impl_glXGetFBConfigFromVisualSGIX;
PFNGLXGETFBCONFIGSPROC glad_glXGetFBConfigs = NULL;
static GLXFBConfig * GLAD_API_PTR glad_debug_impl_glXGetFBConfigs(Display * dpy, int screen, int * nelements) {
    GLXFBConfig * ret;
    _pre_call_glx_callback("glXGetFBConfigs", (GLADapiproc) glad_glXGetFBConfigs, 3, dpy, screen, nelements);
    ret = glad_glXGetFBConfigs(dpy, screen, nelements);
    _post_call_glx_callback((void*) &ret, "glXGetFBConfigs", (GLADapiproc) glad_glXGetFBConfigs, 3, dpy, screen, nelements);
    return ret;
}
PFNGLXGETFBCONFIGSPROC glad_debug_glXGetFBConfigs = glad_debug_impl_glXGetFBConfigs;
PFNGLXGETGPUIDSAMDPROC glad_glXGetGPUIDsAMD = NULL;
static unsigned int GLAD_API_PTR glad_debug_impl_glXGetGPUIDsAMD(unsigned int maxCount, unsigned int * ids) {
    unsigned int ret;
    _pre_call_glx_callback("glXGetGPUIDsAMD", (GLADapiproc) glad_glXGetGPUIDsAMD, 2, maxCount, ids);
    ret = glad_glXGetGPUIDsAMD(maxCount, ids);
    _post_call_glx_callback((void*) &ret, "glXGetGPUIDsAMD", (GLADapiproc) glad_glXGetGPUIDsAMD, 2, maxCount, ids);
    return ret;
}
PFNGLXGETGPUIDSAMDPROC glad_debug_glXGetGPUIDsAMD = glad_debug_impl_glXGetGPUIDsAMD;
PFNGLXGETGPUINFOAMDPROC glad_glXGetGPUInfoAMD = NULL;
static int GLAD_API_PTR glad_debug_impl_glXGetGPUInfoAMD(unsigned int id, int property, GLenum dataType, unsigned int size, void * data) {
    int ret;
    _pre_call_glx_callback("glXGetGPUInfoAMD", (GLADapiproc) glad_glXGetGPUInfoAMD, 5, id, property, dataType, size, data);
    ret = glad_glXGetGPUInfoAMD(id, property, dataType, size, data);
    _post_call_glx_callback((void*) &ret, "glXGetGPUInfoAMD", (GLADapiproc) glad_glXGetGPUInfoAMD, 5, id, property, dataType, size, data);
    return ret;
}
PFNGLXGETGPUINFOAMDPROC glad_debug_glXGetGPUInfoAMD = glad_debug_impl_glXGetGPUInfoAMD;
PFNGLXGETMSCRATEOMLPROC glad_glXGetMscRateOML = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXGetMscRateOML(Display * dpy, GLXDrawable drawable, int32_t * numerator, int32_t * denominator) {
    Bool ret;
    _pre_call_glx_callback("glXGetMscRateOML", (GLADapiproc) glad_glXGetMscRateOML, 4, dpy, drawable, numerator, denominator);
    ret = glad_glXGetMscRateOML(dpy, drawable, numerator, denominator);
    _post_call_glx_callback((void*) &ret, "glXGetMscRateOML", (GLADapiproc) glad_glXGetMscRateOML, 4, dpy, drawable, numerator, denominator);
    return ret;
}
PFNGLXGETMSCRATEOMLPROC glad_debug_glXGetMscRateOML = glad_debug_impl_glXGetMscRateOML;
PFNGLXGETPROCADDRESSPROC glad_glXGetProcAddress = NULL;
static __GLXextFuncPtr GLAD_API_PTR glad_debug_impl_glXGetProcAddress(const GLubyte * procName) {
    __GLXextFuncPtr ret;
    _pre_call_glx_callback("glXGetProcAddress", (GLADapiproc) glad_glXGetProcAddress, 1, procName);
    ret = glad_glXGetProcAddress(procName);
    _post_call_glx_callback((void*) &ret, "glXGetProcAddress", (GLADapiproc) glad_glXGetProcAddress, 1, procName);
    return ret;
}
PFNGLXGETPROCADDRESSPROC glad_debug_glXGetProcAddress = glad_debug_impl_glXGetProcAddress;
PFNGLXGETPROCADDRESSARBPROC glad_glXGetProcAddressARB = NULL;
static __GLXextFuncPtr GLAD_API_PTR glad_debug_impl_glXGetProcAddressARB(const GLubyte * procName) {
    __GLXextFuncPtr ret;
    _pre_call_glx_callback("glXGetProcAddressARB", (GLADapiproc) glad_glXGetProcAddressARB, 1, procName);
    ret = glad_glXGetProcAddressARB(procName);
    _post_call_glx_callback((void*) &ret, "glXGetProcAddressARB", (GLADapiproc) glad_glXGetProcAddressARB, 1, procName);
    return ret;
}
PFNGLXGETPROCADDRESSARBPROC glad_debug_glXGetProcAddressARB = glad_debug_impl_glXGetProcAddressARB;
PFNGLXGETSELECTEDEVENTPROC glad_glXGetSelectedEvent = NULL;
static void GLAD_API_PTR glad_debug_impl_glXGetSelectedEvent(Display * dpy, GLXDrawable draw, unsigned long * event_mask) {
    _pre_call_glx_callback("glXGetSelectedEvent", (GLADapiproc) glad_glXGetSelectedEvent, 3, dpy, draw, event_mask);
    glad_glXGetSelectedEvent(dpy, draw, event_mask);
    _post_call_glx_callback(NULL, "glXGetSelectedEvent", (GLADapiproc) glad_glXGetSelectedEvent, 3, dpy, draw, event_mask);
    
}
PFNGLXGETSELECTEDEVENTPROC glad_debug_glXGetSelectedEvent = glad_debug_impl_glXGetSelectedEvent;
PFNGLXGETSELECTEDEVENTSGIXPROC glad_glXGetSelectedEventSGIX = NULL;
static void GLAD_API_PTR glad_debug_impl_glXGetSelectedEventSGIX(Display * dpy, GLXDrawable drawable, unsigned long * mask) {
    _pre_call_glx_callback("glXGetSelectedEventSGIX", (GLADapiproc) glad_glXGetSelectedEventSGIX, 3, dpy, drawable, mask);
    glad_glXGetSelectedEventSGIX(dpy, drawable, mask);
    _post_call_glx_callback(NULL, "glXGetSelectedEventSGIX", (GLADapiproc) glad_glXGetSelectedEventSGIX, 3, dpy, drawable, mask);
    
}
PFNGLXGETSELECTEDEVENTSGIXPROC glad_debug_glXGetSelectedEventSGIX = glad_debug_impl_glXGetSelectedEventSGIX;
PFNGLXGETSWAPINTERVALMESAPROC glad_glXGetSwapIntervalMESA = NULL;
static int GLAD_API_PTR glad_debug_impl_glXGetSwapIntervalMESA(void) {
    int ret;
    _pre_call_glx_callback("glXGetSwapIntervalMESA", (GLADapiproc) glad_glXGetSwapIntervalMESA, 0);
    ret = glad_glXGetSwapIntervalMESA();
    _post_call_glx_callback((void*) &ret, "glXGetSwapIntervalMESA", (GLADapiproc) glad_glXGetSwapIntervalMESA, 0);
    return ret;
}
PFNGLXGETSWAPINTERVALMESAPROC glad_debug_glXGetSwapIntervalMESA = glad_debug_impl_glXGetSwapIntervalMESA;
PFNGLXGETSYNCVALUESOMLPROC glad_glXGetSyncValuesOML = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXGetSyncValuesOML(Display * dpy, GLXDrawable drawable, int64_t * ust, int64_t * msc, int64_t * sbc) {
    Bool ret;
    _pre_call_glx_callback("glXGetSyncValuesOML", (GLADapiproc) glad_glXGetSyncValuesOML, 5, dpy, drawable, ust, msc, sbc);
    ret = glad_glXGetSyncValuesOML(dpy, drawable, ust, msc, sbc);
    _post_call_glx_callback((void*) &ret, "glXGetSyncValuesOML", (GLADapiproc) glad_glXGetSyncValuesOML, 5, dpy, drawable, ust, msc, sbc);
    return ret;
}
PFNGLXGETSYNCVALUESOMLPROC glad_debug_glXGetSyncValuesOML = glad_debug_impl_glXGetSyncValuesOML;
PFNGLXGETTRANSPARENTINDEXSUNPROC glad_glXGetTransparentIndexSUN = NULL;
static Status GLAD_API_PTR glad_debug_impl_glXGetTransparentIndexSUN(Display * dpy, Window overlay, Window underlay, unsigned long * pTransparentIndex) {
    Status ret;
    _pre_call_glx_callback("glXGetTransparentIndexSUN", (GLADapiproc) glad_glXGetTransparentIndexSUN, 4, dpy, overlay, underlay, pTransparentIndex);
    ret = glad_glXGetTransparentIndexSUN(dpy, overlay, underlay, pTransparentIndex);
    _post_call_glx_callback((void*) &ret, "glXGetTransparentIndexSUN", (GLADapiproc) glad_glXGetTransparentIndexSUN, 4, dpy, overlay, underlay, pTransparentIndex);
    return ret;
}
PFNGLXGETTRANSPARENTINDEXSUNPROC glad_debug_glXGetTransparentIndexSUN = glad_debug_impl_glXGetTransparentIndexSUN;
PFNGLXGETVIDEODEVICENVPROC glad_glXGetVideoDeviceNV = NULL;
static int GLAD_API_PTR glad_debug_impl_glXGetVideoDeviceNV(Display * dpy, int screen, int numVideoDevices, GLXVideoDeviceNV * pVideoDevice) {
    int ret;
    _pre_call_glx_callback("glXGetVideoDeviceNV", (GLADapiproc) glad_glXGetVideoDeviceNV, 4, dpy, screen, numVideoDevices, pVideoDevice);
    ret = glad_glXGetVideoDeviceNV(dpy, screen, numVideoDevices, pVideoDevice);
    _post_call_glx_callback((void*) &ret, "glXGetVideoDeviceNV", (GLADapiproc) glad_glXGetVideoDeviceNV, 4, dpy, screen, numVideoDevices, pVideoDevice);
    return ret;
}
PFNGLXGETVIDEODEVICENVPROC glad_debug_glXGetVideoDeviceNV = glad_debug_impl_glXGetVideoDeviceNV;
PFNGLXGETVIDEOINFONVPROC glad_glXGetVideoInfoNV = NULL;
static int GLAD_API_PTR glad_debug_impl_glXGetVideoInfoNV(Display * dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long * pulCounterOutputPbuffer, unsigned long * pulCounterOutputVideo) {
    int ret;
    _pre_call_glx_callback("glXGetVideoInfoNV", (GLADapiproc) glad_glXGetVideoInfoNV, 5, dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
    ret = glad_glXGetVideoInfoNV(dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
    _post_call_glx_callback((void*) &ret, "glXGetVideoInfoNV", (GLADapiproc) glad_glXGetVideoInfoNV, 5, dpy, screen, VideoDevice, pulCounterOutputPbuffer, pulCounterOutputVideo);
    return ret;
}
PFNGLXGETVIDEOINFONVPROC glad_debug_glXGetVideoInfoNV = glad_debug_impl_glXGetVideoInfoNV;
PFNGLXGETVIDEOSYNCSGIPROC glad_glXGetVideoSyncSGI = NULL;
static int GLAD_API_PTR glad_debug_impl_glXGetVideoSyncSGI(unsigned int * count) {
    int ret;
    _pre_call_glx_callback("glXGetVideoSyncSGI", (GLADapiproc) glad_glXGetVideoSyncSGI, 1, count);
    ret = glad_glXGetVideoSyncSGI(count);
    _post_call_glx_callback((void*) &ret, "glXGetVideoSyncSGI", (GLADapiproc) glad_glXGetVideoSyncSGI, 1, count);
    return ret;
}
PFNGLXGETVIDEOSYNCSGIPROC glad_debug_glXGetVideoSyncSGI = glad_debug_impl_glXGetVideoSyncSGI;
PFNGLXGETVISUALFROMFBCONFIGPROC glad_glXGetVisualFromFBConfig = NULL;
static XVisualInfo * GLAD_API_PTR glad_debug_impl_glXGetVisualFromFBConfig(Display * dpy, GLXFBConfig config) {
    XVisualInfo * ret;
    _pre_call_glx_callback("glXGetVisualFromFBConfig", (GLADapiproc) glad_glXGetVisualFromFBConfig, 2, dpy, config);
    ret = glad_glXGetVisualFromFBConfig(dpy, config);
    _post_call_glx_callback((void*) &ret, "glXGetVisualFromFBConfig", (GLADapiproc) glad_glXGetVisualFromFBConfig, 2, dpy, config);
    return ret;
}
PFNGLXGETVISUALFROMFBCONFIGPROC glad_debug_glXGetVisualFromFBConfig = glad_debug_impl_glXGetVisualFromFBConfig;
PFNGLXGETVISUALFROMFBCONFIGSGIXPROC glad_glXGetVisualFromFBConfigSGIX = NULL;
static XVisualInfo * GLAD_API_PTR glad_debug_impl_glXGetVisualFromFBConfigSGIX(Display * dpy, GLXFBConfigSGIX config) {
    XVisualInfo * ret;
    _pre_call_glx_callback("glXGetVisualFromFBConfigSGIX", (GLADapiproc) glad_glXGetVisualFromFBConfigSGIX, 2, dpy, config);
    ret = glad_glXGetVisualFromFBConfigSGIX(dpy, config);
    _post_call_glx_callback((void*) &ret, "glXGetVisualFromFBConfigSGIX", (GLADapiproc) glad_glXGetVisualFromFBConfigSGIX, 2, dpy, config);
    return ret;
}
PFNGLXGETVISUALFROMFBCONFIGSGIXPROC glad_debug_glXGetVisualFromFBConfigSGIX = glad_debug_impl_glXGetVisualFromFBConfigSGIX;
PFNGLXHYPERPIPEATTRIBSGIXPROC glad_glXHyperpipeAttribSGIX = NULL;
static int GLAD_API_PTR glad_debug_impl_glXHyperpipeAttribSGIX(Display * dpy, int timeSlice, int attrib, int size, void * attribList) {
    int ret;
    _pre_call_glx_callback("glXHyperpipeAttribSGIX", (GLADapiproc) glad_glXHyperpipeAttribSGIX, 5, dpy, timeSlice, attrib, size, attribList);
    ret = glad_glXHyperpipeAttribSGIX(dpy, timeSlice, attrib, size, attribList);
    _post_call_glx_callback((void*) &ret, "glXHyperpipeAttribSGIX", (GLADapiproc) glad_glXHyperpipeAttribSGIX, 5, dpy, timeSlice, attrib, size, attribList);
    return ret;
}
PFNGLXHYPERPIPEATTRIBSGIXPROC glad_debug_glXHyperpipeAttribSGIX = glad_debug_impl_glXHyperpipeAttribSGIX;
PFNGLXHYPERPIPECONFIGSGIXPROC glad_glXHyperpipeConfigSGIX = NULL;
static int GLAD_API_PTR glad_debug_impl_glXHyperpipeConfigSGIX(Display * dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX * cfg, int * hpId) {
    int ret;
    _pre_call_glx_callback("glXHyperpipeConfigSGIX", (GLADapiproc) glad_glXHyperpipeConfigSGIX, 5, dpy, networkId, npipes, cfg, hpId);
    ret = glad_glXHyperpipeConfigSGIX(dpy, networkId, npipes, cfg, hpId);
    _post_call_glx_callback((void*) &ret, "glXHyperpipeConfigSGIX", (GLADapiproc) glad_glXHyperpipeConfigSGIX, 5, dpy, networkId, npipes, cfg, hpId);
    return ret;
}
PFNGLXHYPERPIPECONFIGSGIXPROC glad_debug_glXHyperpipeConfigSGIX = glad_debug_impl_glXHyperpipeConfigSGIX;
PFNGLXIMPORTCONTEXTEXTPROC glad_glXImportContextEXT = NULL;
static GLXContext GLAD_API_PTR glad_debug_impl_glXImportContextEXT(Display * dpy, GLXContextID contextID) {
    GLXContext ret;
    _pre_call_glx_callback("glXImportContextEXT", (GLADapiproc) glad_glXImportContextEXT, 2, dpy, contextID);
    ret = glad_glXImportContextEXT(dpy, contextID);
    _post_call_glx_callback((void*) &ret, "glXImportContextEXT", (GLADapiproc) glad_glXImportContextEXT, 2, dpy, contextID);
    return ret;
}
PFNGLXIMPORTCONTEXTEXTPROC glad_debug_glXImportContextEXT = glad_debug_impl_glXImportContextEXT;
PFNGLXISDIRECTPROC glad_glXIsDirect = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXIsDirect(Display * dpy, GLXContext ctx) {
    Bool ret;
    _pre_call_glx_callback("glXIsDirect", (GLADapiproc) glad_glXIsDirect, 2, dpy, ctx);
    ret = glad_glXIsDirect(dpy, ctx);
    _post_call_glx_callback((void*) &ret, "glXIsDirect", (GLADapiproc) glad_glXIsDirect, 2, dpy, ctx);
    return ret;
}
PFNGLXISDIRECTPROC glad_debug_glXIsDirect = glad_debug_impl_glXIsDirect;
PFNGLXJOINSWAPGROUPNVPROC glad_glXJoinSwapGroupNV = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXJoinSwapGroupNV(Display * dpy, GLXDrawable drawable, GLuint group) {
    Bool ret;
    _pre_call_glx_callback("glXJoinSwapGroupNV", (GLADapiproc) glad_glXJoinSwapGroupNV, 3, dpy, drawable, group);
    ret = glad_glXJoinSwapGroupNV(dpy, drawable, group);
    _post_call_glx_callback((void*) &ret, "glXJoinSwapGroupNV", (GLADapiproc) glad_glXJoinSwapGroupNV, 3, dpy, drawable, group);
    return ret;
}
PFNGLXJOINSWAPGROUPNVPROC glad_debug_glXJoinSwapGroupNV = glad_debug_impl_glXJoinSwapGroupNV;
PFNGLXJOINSWAPGROUPSGIXPROC glad_glXJoinSwapGroupSGIX = NULL;
static void GLAD_API_PTR glad_debug_impl_glXJoinSwapGroupSGIX(Display * dpy, GLXDrawable drawable, GLXDrawable member) {
    _pre_call_glx_callback("glXJoinSwapGroupSGIX", (GLADapiproc) glad_glXJoinSwapGroupSGIX, 3, dpy, drawable, member);
    glad_glXJoinSwapGroupSGIX(dpy, drawable, member);
    _post_call_glx_callback(NULL, "glXJoinSwapGroupSGIX", (GLADapiproc) glad_glXJoinSwapGroupSGIX, 3, dpy, drawable, member);
    
}
PFNGLXJOINSWAPGROUPSGIXPROC glad_debug_glXJoinSwapGroupSGIX = glad_debug_impl_glXJoinSwapGroupSGIX;
PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC glad_glXLockVideoCaptureDeviceNV = NULL;
static void GLAD_API_PTR glad_debug_impl_glXLockVideoCaptureDeviceNV(Display * dpy, GLXVideoCaptureDeviceNV device) {
    _pre_call_glx_callback("glXLockVideoCaptureDeviceNV", (GLADapiproc) glad_glXLockVideoCaptureDeviceNV, 2, dpy, device);
    glad_glXLockVideoCaptureDeviceNV(dpy, device);
    _post_call_glx_callback(NULL, "glXLockVideoCaptureDeviceNV", (GLADapiproc) glad_glXLockVideoCaptureDeviceNV, 2, dpy, device);
    
}
PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC glad_debug_glXLockVideoCaptureDeviceNV = glad_debug_impl_glXLockVideoCaptureDeviceNV;
PFNGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC glad_glXMakeAssociatedContextCurrentAMD = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXMakeAssociatedContextCurrentAMD(GLXContext ctx) {
    Bool ret;
    _pre_call_glx_callback("glXMakeAssociatedContextCurrentAMD", (GLADapiproc) glad_glXMakeAssociatedContextCurrentAMD, 1, ctx);
    ret = glad_glXMakeAssociatedContextCurrentAMD(ctx);
    _post_call_glx_callback((void*) &ret, "glXMakeAssociatedContextCurrentAMD", (GLADapiproc) glad_glXMakeAssociatedContextCurrentAMD, 1, ctx);
    return ret;
}
PFNGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC glad_debug_glXMakeAssociatedContextCurrentAMD = glad_debug_impl_glXMakeAssociatedContextCurrentAMD;
PFNGLXMAKECONTEXTCURRENTPROC glad_glXMakeContextCurrent = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXMakeContextCurrent(Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx) {
    Bool ret;
    _pre_call_glx_callback("glXMakeContextCurrent", (GLADapiproc) glad_glXMakeContextCurrent, 4, dpy, draw, read, ctx);
    ret = glad_glXMakeContextCurrent(dpy, draw, read, ctx);
    _post_call_glx_callback((void*) &ret, "glXMakeContextCurrent", (GLADapiproc) glad_glXMakeContextCurrent, 4, dpy, draw, read, ctx);
    return ret;
}
PFNGLXMAKECONTEXTCURRENTPROC glad_debug_glXMakeContextCurrent = glad_debug_impl_glXMakeContextCurrent;
PFNGLXMAKECURRENTPROC glad_glXMakeCurrent = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXMakeCurrent(Display * dpy, GLXDrawable drawable, GLXContext ctx) {
    Bool ret;
    _pre_call_glx_callback("glXMakeCurrent", (GLADapiproc) glad_glXMakeCurrent, 3, dpy, drawable, ctx);
    ret = glad_glXMakeCurrent(dpy, drawable, ctx);
    _post_call_glx_callback((void*) &ret, "glXMakeCurrent", (GLADapiproc) glad_glXMakeCurrent, 3, dpy, drawable, ctx);
    return ret;
}
PFNGLXMAKECURRENTPROC glad_debug_glXMakeCurrent = glad_debug_impl_glXMakeCurrent;
PFNGLXMAKECURRENTREADSGIPROC glad_glXMakeCurrentReadSGI = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXMakeCurrentReadSGI(Display * dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx) {
    Bool ret;
    _pre_call_glx_callback("glXMakeCurrentReadSGI", (GLADapiproc) glad_glXMakeCurrentReadSGI, 4, dpy, draw, read, ctx);
    ret = glad_glXMakeCurrentReadSGI(dpy, draw, read, ctx);
    _post_call_glx_callback((void*) &ret, "glXMakeCurrentReadSGI", (GLADapiproc) glad_glXMakeCurrentReadSGI, 4, dpy, draw, read, ctx);
    return ret;
}
PFNGLXMAKECURRENTREADSGIPROC glad_debug_glXMakeCurrentReadSGI = glad_debug_impl_glXMakeCurrentReadSGI;
PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC glad_glXNamedCopyBufferSubDataNV = NULL;
static void GLAD_API_PTR glad_debug_impl_glXNamedCopyBufferSubDataNV(Display * dpy, GLXContext readCtx, GLXContext writeCtx, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) {
    _pre_call_glx_callback("glXNamedCopyBufferSubDataNV", (GLADapiproc) glad_glXNamedCopyBufferSubDataNV, 8, dpy, readCtx, writeCtx, readBuffer, writeBuffer, readOffset, writeOffset, size);
    glad_glXNamedCopyBufferSubDataNV(dpy, readCtx, writeCtx, readBuffer, writeBuffer, readOffset, writeOffset, size);
    _post_call_glx_callback(NULL, "glXNamedCopyBufferSubDataNV", (GLADapiproc) glad_glXNamedCopyBufferSubDataNV, 8, dpy, readCtx, writeCtx, readBuffer, writeBuffer, readOffset, writeOffset, size);
    
}
PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC glad_debug_glXNamedCopyBufferSubDataNV = glad_debug_impl_glXNamedCopyBufferSubDataNV;
PFNGLXQUERYCHANNELDELTASSGIXPROC glad_glXQueryChannelDeltasSGIX = NULL;
static int GLAD_API_PTR glad_debug_impl_glXQueryChannelDeltasSGIX(Display * display, int screen, int channel, int * x, int * y, int * w, int * h) {
    int ret;
    _pre_call_glx_callback("glXQueryChannelDeltasSGIX", (GLADapiproc) glad_glXQueryChannelDeltasSGIX, 7, display, screen, channel, x, y, w, h);
    ret = glad_glXQueryChannelDeltasSGIX(display, screen, channel, x, y, w, h);
    _post_call_glx_callback((void*) &ret, "glXQueryChannelDeltasSGIX", (GLADapiproc) glad_glXQueryChannelDeltasSGIX, 7, display, screen, channel, x, y, w, h);
    return ret;
}
PFNGLXQUERYCHANNELDELTASSGIXPROC glad_debug_glXQueryChannelDeltasSGIX = glad_debug_impl_glXQueryChannelDeltasSGIX;
PFNGLXQUERYCHANNELRECTSGIXPROC glad_glXQueryChannelRectSGIX = NULL;
static int GLAD_API_PTR glad_debug_impl_glXQueryChannelRectSGIX(Display * display, int screen, int channel, int * dx, int * dy, int * dw, int * dh) {
    int ret;
    _pre_call_glx_callback("glXQueryChannelRectSGIX", (GLADapiproc) glad_glXQueryChannelRectSGIX, 7, display, screen, channel, dx, dy, dw, dh);
    ret = glad_glXQueryChannelRectSGIX(display, screen, channel, dx, dy, dw, dh);
    _post_call_glx_callback((void*) &ret, "glXQueryChannelRectSGIX", (GLADapiproc) glad_glXQueryChannelRectSGIX, 7, display, screen, channel, dx, dy, dw, dh);
    return ret;
}
PFNGLXQUERYCHANNELRECTSGIXPROC glad_debug_glXQueryChannelRectSGIX = glad_debug_impl_glXQueryChannelRectSGIX;
PFNGLXQUERYCONTEXTPROC glad_glXQueryContext = NULL;
static int GLAD_API_PTR glad_debug_impl_glXQueryContext(Display * dpy, GLXContext ctx, int attribute, int * value) {
    int ret;
    _pre_call_glx_callback("glXQueryContext", (GLADapiproc) glad_glXQueryContext, 4, dpy, ctx, attribute, value);
    ret = glad_glXQueryContext(dpy, ctx, attribute, value);
    _post_call_glx_callback((void*) &ret, "glXQueryContext", (GLADapiproc) glad_glXQueryContext, 4, dpy, ctx, attribute, value);
    return ret;
}
PFNGLXQUERYCONTEXTPROC glad_debug_glXQueryContext = glad_debug_impl_glXQueryContext;
PFNGLXQUERYCONTEXTINFOEXTPROC glad_glXQueryContextInfoEXT = NULL;
static int GLAD_API_PTR glad_debug_impl_glXQueryContextInfoEXT(Display * dpy, GLXContext context, int attribute, int * value) {
    int ret;
    _pre_call_glx_callback("glXQueryContextInfoEXT", (GLADapiproc) glad_glXQueryContextInfoEXT, 4, dpy, context, attribute, value);
    ret = glad_glXQueryContextInfoEXT(dpy, context, attribute, value);
    _post_call_glx_callback((void*) &ret, "glXQueryContextInfoEXT", (GLADapiproc) glad_glXQueryContextInfoEXT, 4, dpy, context, attribute, value);
    return ret;
}
PFNGLXQUERYCONTEXTINFOEXTPROC glad_debug_glXQueryContextInfoEXT = glad_debug_impl_glXQueryContextInfoEXT;
PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC glad_glXQueryCurrentRendererIntegerMESA = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXQueryCurrentRendererIntegerMESA(int attribute, unsigned int * value) {
    Bool ret;
    _pre_call_glx_callback("glXQueryCurrentRendererIntegerMESA", (GLADapiproc) glad_glXQueryCurrentRendererIntegerMESA, 2, attribute, value);
    ret = glad_glXQueryCurrentRendererIntegerMESA(attribute, value);
    _post_call_glx_callback((void*) &ret, "glXQueryCurrentRendererIntegerMESA", (GLADapiproc) glad_glXQueryCurrentRendererIntegerMESA, 2, attribute, value);
    return ret;
}
PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC glad_debug_glXQueryCurrentRendererIntegerMESA = glad_debug_impl_glXQueryCurrentRendererIntegerMESA;
PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC glad_glXQueryCurrentRendererStringMESA = NULL;
static const char * GLAD_API_PTR glad_debug_impl_glXQueryCurrentRendererStringMESA(int attribute) {
    const char * ret;
    _pre_call_glx_callback("glXQueryCurrentRendererStringMESA", (GLADapiproc) glad_glXQueryCurrentRendererStringMESA, 1, attribute);
    ret = glad_glXQueryCurrentRendererStringMESA(attribute);
    _post_call_glx_callback((void*) &ret, "glXQueryCurrentRendererStringMESA", (GLADapiproc) glad_glXQueryCurrentRendererStringMESA, 1, attribute);
    return ret;
}
PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC glad_debug_glXQueryCurrentRendererStringMESA = glad_debug_impl_glXQueryCurrentRendererStringMESA;
PFNGLXQUERYDRAWABLEPROC glad_glXQueryDrawable = NULL;
static void GLAD_API_PTR glad_debug_impl_glXQueryDrawable(Display * dpy, GLXDrawable draw, int attribute, unsigned int * value) {
    _pre_call_glx_callback("glXQueryDrawable", (GLADapiproc) glad_glXQueryDrawable, 4, dpy, draw, attribute, value);
    glad_glXQueryDrawable(dpy, draw, attribute, value);
    _post_call_glx_callback(NULL, "glXQueryDrawable", (GLADapiproc) glad_glXQueryDrawable, 4, dpy, draw, attribute, value);
    
}
PFNGLXQUERYDRAWABLEPROC glad_debug_glXQueryDrawable = glad_debug_impl_glXQueryDrawable;
PFNGLXQUERYEXTENSIONPROC glad_glXQueryExtension = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXQueryExtension(Display * dpy, int * errorb, int * event) {
    Bool ret;
    _pre_call_glx_callback("glXQueryExtension", (GLADapiproc) glad_glXQueryExtension, 3, dpy, errorb, event);
    ret = glad_glXQueryExtension(dpy, errorb, event);
    _post_call_glx_callback((void*) &ret, "glXQueryExtension", (GLADapiproc) glad_glXQueryExtension, 3, dpy, errorb, event);
    return ret;
}
PFNGLXQUERYEXTENSIONPROC glad_debug_glXQueryExtension = glad_debug_impl_glXQueryExtension;
PFNGLXQUERYEXTENSIONSSTRINGPROC glad_glXQueryExtensionsString = NULL;
static const char * GLAD_API_PTR glad_debug_impl_glXQueryExtensionsString(Display * dpy, int screen) {
    const char * ret;
    _pre_call_glx_callback("glXQueryExtensionsString", (GLADapiproc) glad_glXQueryExtensionsString, 2, dpy, screen);
    ret = glad_glXQueryExtensionsString(dpy, screen);
    _post_call_glx_callback((void*) &ret, "glXQueryExtensionsString", (GLADapiproc) glad_glXQueryExtensionsString, 2, dpy, screen);
    return ret;
}
PFNGLXQUERYEXTENSIONSSTRINGPROC glad_debug_glXQueryExtensionsString = glad_debug_impl_glXQueryExtensionsString;
PFNGLXQUERYFRAMECOUNTNVPROC glad_glXQueryFrameCountNV = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXQueryFrameCountNV(Display * dpy, int screen, GLuint * count) {
    Bool ret;
    _pre_call_glx_callback("glXQueryFrameCountNV", (GLADapiproc) glad_glXQueryFrameCountNV, 3, dpy, screen, count);
    ret = glad_glXQueryFrameCountNV(dpy, screen, count);
    _post_call_glx_callback((void*) &ret, "glXQueryFrameCountNV", (GLADapiproc) glad_glXQueryFrameCountNV, 3, dpy, screen, count);
    return ret;
}
PFNGLXQUERYFRAMECOUNTNVPROC glad_debug_glXQueryFrameCountNV = glad_debug_impl_glXQueryFrameCountNV;
PFNGLXQUERYGLXPBUFFERSGIXPROC glad_glXQueryGLXPbufferSGIX = NULL;
static void GLAD_API_PTR glad_debug_impl_glXQueryGLXPbufferSGIX(Display * dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int * value) {
    _pre_call_glx_callback("glXQueryGLXPbufferSGIX", (GLADapiproc) glad_glXQueryGLXPbufferSGIX, 4, dpy, pbuf, attribute, value);
    glad_glXQueryGLXPbufferSGIX(dpy, pbuf, attribute, value);
    _post_call_glx_callback(NULL, "glXQueryGLXPbufferSGIX", (GLADapiproc) glad_glXQueryGLXPbufferSGIX, 4, dpy, pbuf, attribute, value);
    
}
PFNGLXQUERYGLXPBUFFERSGIXPROC glad_debug_glXQueryGLXPbufferSGIX = glad_debug_impl_glXQueryGLXPbufferSGIX;
PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC glad_glXQueryHyperpipeAttribSGIX = NULL;
static int GLAD_API_PTR glad_debug_impl_glXQueryHyperpipeAttribSGIX(Display * dpy, int timeSlice, int attrib, int size, void * returnAttribList) {
    int ret;
    _pre_call_glx_callback("glXQueryHyperpipeAttribSGIX", (GLADapiproc) glad_glXQueryHyperpipeAttribSGIX, 5, dpy, timeSlice, attrib, size, returnAttribList);
    ret = glad_glXQueryHyperpipeAttribSGIX(dpy, timeSlice, attrib, size, returnAttribList);
    _post_call_glx_callback((void*) &ret, "glXQueryHyperpipeAttribSGIX", (GLADapiproc) glad_glXQueryHyperpipeAttribSGIX, 5, dpy, timeSlice, attrib, size, returnAttribList);
    return ret;
}
PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC glad_debug_glXQueryHyperpipeAttribSGIX = glad_debug_impl_glXQueryHyperpipeAttribSGIX;
PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC glad_glXQueryHyperpipeBestAttribSGIX = NULL;
static int GLAD_API_PTR glad_debug_impl_glXQueryHyperpipeBestAttribSGIX(Display * dpy, int timeSlice, int attrib, int size, void * attribList, void * returnAttribList) {
    int ret;
    _pre_call_glx_callback("glXQueryHyperpipeBestAttribSGIX", (GLADapiproc) glad_glXQueryHyperpipeBestAttribSGIX, 6, dpy, timeSlice, attrib, size, attribList, returnAttribList);
    ret = glad_glXQueryHyperpipeBestAttribSGIX(dpy, timeSlice, attrib, size, attribList, returnAttribList);
    _post_call_glx_callback((void*) &ret, "glXQueryHyperpipeBestAttribSGIX", (GLADapiproc) glad_glXQueryHyperpipeBestAttribSGIX, 6, dpy, timeSlice, attrib, size, attribList, returnAttribList);
    return ret;
}
PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC glad_debug_glXQueryHyperpipeBestAttribSGIX = glad_debug_impl_glXQueryHyperpipeBestAttribSGIX;
PFNGLXQUERYHYPERPIPECONFIGSGIXPROC glad_glXQueryHyperpipeConfigSGIX = NULL;
static GLXHyperpipeConfigSGIX * GLAD_API_PTR glad_debug_impl_glXQueryHyperpipeConfigSGIX(Display * dpy, int hpId, int * npipes) {
    GLXHyperpipeConfigSGIX * ret;
    _pre_call_glx_callback("glXQueryHyperpipeConfigSGIX", (GLADapiproc) glad_glXQueryHyperpipeConfigSGIX, 3, dpy, hpId, npipes);
    ret = glad_glXQueryHyperpipeConfigSGIX(dpy, hpId, npipes);
    _post_call_glx_callback((void*) &ret, "glXQueryHyperpipeConfigSGIX", (GLADapiproc) glad_glXQueryHyperpipeConfigSGIX, 3, dpy, hpId, npipes);
    return ret;
}
PFNGLXQUERYHYPERPIPECONFIGSGIXPROC glad_debug_glXQueryHyperpipeConfigSGIX = glad_debug_impl_glXQueryHyperpipeConfigSGIX;
PFNGLXQUERYHYPERPIPENETWORKSGIXPROC glad_glXQueryHyperpipeNetworkSGIX = NULL;
static GLXHyperpipeNetworkSGIX * GLAD_API_PTR glad_debug_impl_glXQueryHyperpipeNetworkSGIX(Display * dpy, int * npipes) {
    GLXHyperpipeNetworkSGIX * ret;
    _pre_call_glx_callback("glXQueryHyperpipeNetworkSGIX", (GLADapiproc) glad_glXQueryHyperpipeNetworkSGIX, 2, dpy, npipes);
    ret = glad_glXQueryHyperpipeNetworkSGIX(dpy, npipes);
    _post_call_glx_callback((void*) &ret, "glXQueryHyperpipeNetworkSGIX", (GLADapiproc) glad_glXQueryHyperpipeNetworkSGIX, 2, dpy, npipes);
    return ret;
}
PFNGLXQUERYHYPERPIPENETWORKSGIXPROC glad_debug_glXQueryHyperpipeNetworkSGIX = glad_debug_impl_glXQueryHyperpipeNetworkSGIX;
PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC glad_glXQueryMaxSwapBarriersSGIX = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXQueryMaxSwapBarriersSGIX(Display * dpy, int screen, int * max) {
    Bool ret;
    _pre_call_glx_callback("glXQueryMaxSwapBarriersSGIX", (GLADapiproc) glad_glXQueryMaxSwapBarriersSGIX, 3, dpy, screen, max);
    ret = glad_glXQueryMaxSwapBarriersSGIX(dpy, screen, max);
    _post_call_glx_callback((void*) &ret, "glXQueryMaxSwapBarriersSGIX", (GLADapiproc) glad_glXQueryMaxSwapBarriersSGIX, 3, dpy, screen, max);
    return ret;
}
PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC glad_debug_glXQueryMaxSwapBarriersSGIX = glad_debug_impl_glXQueryMaxSwapBarriersSGIX;
PFNGLXQUERYMAXSWAPGROUPSNVPROC glad_glXQueryMaxSwapGroupsNV = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXQueryMaxSwapGroupsNV(Display * dpy, int screen, GLuint * maxGroups, GLuint * maxBarriers) {
    Bool ret;
    _pre_call_glx_callback("glXQueryMaxSwapGroupsNV", (GLADapiproc) glad_glXQueryMaxSwapGroupsNV, 4, dpy, screen, maxGroups, maxBarriers);
    ret = glad_glXQueryMaxSwapGroupsNV(dpy, screen, maxGroups, maxBarriers);
    _post_call_glx_callback((void*) &ret, "glXQueryMaxSwapGroupsNV", (GLADapiproc) glad_glXQueryMaxSwapGroupsNV, 4, dpy, screen, maxGroups, maxBarriers);
    return ret;
}
PFNGLXQUERYMAXSWAPGROUPSNVPROC glad_debug_glXQueryMaxSwapGroupsNV = glad_debug_impl_glXQueryMaxSwapGroupsNV;
PFNGLXQUERYRENDERERINTEGERMESAPROC glad_glXQueryRendererIntegerMESA = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXQueryRendererIntegerMESA(Display * dpy, int screen, int renderer, int attribute, unsigned int * value) {
    Bool ret;
    _pre_call_glx_callback("glXQueryRendererIntegerMESA", (GLADapiproc) glad_glXQueryRendererIntegerMESA, 5, dpy, screen, renderer, attribute, value);
    ret = glad_glXQueryRendererIntegerMESA(dpy, screen, renderer, attribute, value);
    _post_call_glx_callback((void*) &ret, "glXQueryRendererIntegerMESA", (GLADapiproc) glad_glXQueryRendererIntegerMESA, 5, dpy, screen, renderer, attribute, value);
    return ret;
}
PFNGLXQUERYRENDERERINTEGERMESAPROC glad_debug_glXQueryRendererIntegerMESA = glad_debug_impl_glXQueryRendererIntegerMESA;
PFNGLXQUERYRENDERERSTRINGMESAPROC glad_glXQueryRendererStringMESA = NULL;
static const char * GLAD_API_PTR glad_debug_impl_glXQueryRendererStringMESA(Display * dpy, int screen, int renderer, int attribute) {
    const char * ret;
    _pre_call_glx_callback("glXQueryRendererStringMESA", (GLADapiproc) glad_glXQueryRendererStringMESA, 4, dpy, screen, renderer, attribute);
    ret = glad_glXQueryRendererStringMESA(dpy, screen, renderer, attribute);
    _post_call_glx_callback((void*) &ret, "glXQueryRendererStringMESA", (GLADapiproc) glad_glXQueryRendererStringMESA, 4, dpy, screen, renderer, attribute);
    return ret;
}
PFNGLXQUERYRENDERERSTRINGMESAPROC glad_debug_glXQueryRendererStringMESA = glad_debug_impl_glXQueryRendererStringMESA;
PFNGLXQUERYSERVERSTRINGPROC glad_glXQueryServerString = NULL;
static const char * GLAD_API_PTR glad_debug_impl_glXQueryServerString(Display * dpy, int screen, int name) {
    const char * ret;
    _pre_call_glx_callback("glXQueryServerString", (GLADapiproc) glad_glXQueryServerString, 3, dpy, screen, name);
    ret = glad_glXQueryServerString(dpy, screen, name);
    _post_call_glx_callback((void*) &ret, "glXQueryServerString", (GLADapiproc) glad_glXQueryServerString, 3, dpy, screen, name);
    return ret;
}
PFNGLXQUERYSERVERSTRINGPROC glad_debug_glXQueryServerString = glad_debug_impl_glXQueryServerString;
PFNGLXQUERYSWAPGROUPNVPROC glad_glXQuerySwapGroupNV = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXQuerySwapGroupNV(Display * dpy, GLXDrawable drawable, GLuint * group, GLuint * barrier) {
    Bool ret;
    _pre_call_glx_callback("glXQuerySwapGroupNV", (GLADapiproc) glad_glXQuerySwapGroupNV, 4, dpy, drawable, group, barrier);
    ret = glad_glXQuerySwapGroupNV(dpy, drawable, group, barrier);
    _post_call_glx_callback((void*) &ret, "glXQuerySwapGroupNV", (GLADapiproc) glad_glXQuerySwapGroupNV, 4, dpy, drawable, group, barrier);
    return ret;
}
PFNGLXQUERYSWAPGROUPNVPROC glad_debug_glXQuerySwapGroupNV = glad_debug_impl_glXQuerySwapGroupNV;
PFNGLXQUERYVERSIONPROC glad_glXQueryVersion = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXQueryVersion(Display * dpy, int * maj, int * min) {
    Bool ret;
    _pre_call_glx_callback("glXQueryVersion", (GLADapiproc) glad_glXQueryVersion, 3, dpy, maj, min);
    ret = glad_glXQueryVersion(dpy, maj, min);
    _post_call_glx_callback((void*) &ret, "glXQueryVersion", (GLADapiproc) glad_glXQueryVersion, 3, dpy, maj, min);
    return ret;
}
PFNGLXQUERYVERSIONPROC glad_debug_glXQueryVersion = glad_debug_impl_glXQueryVersion;
PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC glad_glXQueryVideoCaptureDeviceNV = NULL;
static int GLAD_API_PTR glad_debug_impl_glXQueryVideoCaptureDeviceNV(Display * dpy, GLXVideoCaptureDeviceNV device, int attribute, int * value) {
    int ret;
    _pre_call_glx_callback("glXQueryVideoCaptureDeviceNV", (GLADapiproc) glad_glXQueryVideoCaptureDeviceNV, 4, dpy, device, attribute, value);
    ret = glad_glXQueryVideoCaptureDeviceNV(dpy, device, attribute, value);
    _post_call_glx_callback((void*) &ret, "glXQueryVideoCaptureDeviceNV", (GLADapiproc) glad_glXQueryVideoCaptureDeviceNV, 4, dpy, device, attribute, value);
    return ret;
}
PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC glad_debug_glXQueryVideoCaptureDeviceNV = glad_debug_impl_glXQueryVideoCaptureDeviceNV;
PFNGLXRELEASEBUFFERSMESAPROC glad_glXReleaseBuffersMESA = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXReleaseBuffersMESA(Display * dpy, GLXDrawable drawable) {
    Bool ret;
    _pre_call_glx_callback("glXReleaseBuffersMESA", (GLADapiproc) glad_glXReleaseBuffersMESA, 2, dpy, drawable);
    ret = glad_glXReleaseBuffersMESA(dpy, drawable);
    _post_call_glx_callback((void*) &ret, "glXReleaseBuffersMESA", (GLADapiproc) glad_glXReleaseBuffersMESA, 2, dpy, drawable);
    return ret;
}
PFNGLXRELEASEBUFFERSMESAPROC glad_debug_glXReleaseBuffersMESA = glad_debug_impl_glXReleaseBuffersMESA;
PFNGLXRELEASETEXIMAGEEXTPROC glad_glXReleaseTexImageEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_glXReleaseTexImageEXT(Display * dpy, GLXDrawable drawable, int buffer) {
    _pre_call_glx_callback("glXReleaseTexImageEXT", (GLADapiproc) glad_glXReleaseTexImageEXT, 3, dpy, drawable, buffer);
    glad_glXReleaseTexImageEXT(dpy, drawable, buffer);
    _post_call_glx_callback(NULL, "glXReleaseTexImageEXT", (GLADapiproc) glad_glXReleaseTexImageEXT, 3, dpy, drawable, buffer);
    
}
PFNGLXRELEASETEXIMAGEEXTPROC glad_debug_glXReleaseTexImageEXT = glad_debug_impl_glXReleaseTexImageEXT;
PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC glad_glXReleaseVideoCaptureDeviceNV = NULL;
static void GLAD_API_PTR glad_debug_impl_glXReleaseVideoCaptureDeviceNV(Display * dpy, GLXVideoCaptureDeviceNV device) {
    _pre_call_glx_callback("glXReleaseVideoCaptureDeviceNV", (GLADapiproc) glad_glXReleaseVideoCaptureDeviceNV, 2, dpy, device);
    glad_glXReleaseVideoCaptureDeviceNV(dpy, device);
    _post_call_glx_callback(NULL, "glXReleaseVideoCaptureDeviceNV", (GLADapiproc) glad_glXReleaseVideoCaptureDeviceNV, 2, dpy, device);
    
}
PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC glad_debug_glXReleaseVideoCaptureDeviceNV = glad_debug_impl_glXReleaseVideoCaptureDeviceNV;
PFNGLXRELEASEVIDEODEVICENVPROC glad_glXReleaseVideoDeviceNV = NULL;
static int GLAD_API_PTR glad_debug_impl_glXReleaseVideoDeviceNV(Display * dpy, int screen, GLXVideoDeviceNV VideoDevice) {
    int ret;
    _pre_call_glx_callback("glXReleaseVideoDeviceNV", (GLADapiproc) glad_glXReleaseVideoDeviceNV, 3, dpy, screen, VideoDevice);
    ret = glad_glXReleaseVideoDeviceNV(dpy, screen, VideoDevice);
    _post_call_glx_callback((void*) &ret, "glXReleaseVideoDeviceNV", (GLADapiproc) glad_glXReleaseVideoDeviceNV, 3, dpy, screen, VideoDevice);
    return ret;
}
PFNGLXRELEASEVIDEODEVICENVPROC glad_debug_glXReleaseVideoDeviceNV = glad_debug_impl_glXReleaseVideoDeviceNV;
PFNGLXRELEASEVIDEOIMAGENVPROC glad_glXReleaseVideoImageNV = NULL;
static int GLAD_API_PTR glad_debug_impl_glXReleaseVideoImageNV(Display * dpy, GLXPbuffer pbuf) {
    int ret;
    _pre_call_glx_callback("glXReleaseVideoImageNV", (GLADapiproc) glad_glXReleaseVideoImageNV, 2, dpy, pbuf);
    ret = glad_glXReleaseVideoImageNV(dpy, pbuf);
    _post_call_glx_callback((void*) &ret, "glXReleaseVideoImageNV", (GLADapiproc) glad_glXReleaseVideoImageNV, 2, dpy, pbuf);
    return ret;
}
PFNGLXRELEASEVIDEOIMAGENVPROC glad_debug_glXReleaseVideoImageNV = glad_debug_impl_glXReleaseVideoImageNV;
PFNGLXRESETFRAMECOUNTNVPROC glad_glXResetFrameCountNV = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXResetFrameCountNV(Display * dpy, int screen) {
    Bool ret;
    _pre_call_glx_callback("glXResetFrameCountNV", (GLADapiproc) glad_glXResetFrameCountNV, 2, dpy, screen);
    ret = glad_glXResetFrameCountNV(dpy, screen);
    _post_call_glx_callback((void*) &ret, "glXResetFrameCountNV", (GLADapiproc) glad_glXResetFrameCountNV, 2, dpy, screen);
    return ret;
}
PFNGLXRESETFRAMECOUNTNVPROC glad_debug_glXResetFrameCountNV = glad_debug_impl_glXResetFrameCountNV;
PFNGLXSELECTEVENTPROC glad_glXSelectEvent = NULL;
static void GLAD_API_PTR glad_debug_impl_glXSelectEvent(Display * dpy, GLXDrawable draw, unsigned long event_mask) {
    _pre_call_glx_callback("glXSelectEvent", (GLADapiproc) glad_glXSelectEvent, 3, dpy, draw, event_mask);
    glad_glXSelectEvent(dpy, draw, event_mask);
    _post_call_glx_callback(NULL, "glXSelectEvent", (GLADapiproc) glad_glXSelectEvent, 3, dpy, draw, event_mask);
    
}
PFNGLXSELECTEVENTPROC glad_debug_glXSelectEvent = glad_debug_impl_glXSelectEvent;
PFNGLXSELECTEVENTSGIXPROC glad_glXSelectEventSGIX = NULL;
static void GLAD_API_PTR glad_debug_impl_glXSelectEventSGIX(Display * dpy, GLXDrawable drawable, unsigned long mask) {
    _pre_call_glx_callback("glXSelectEventSGIX", (GLADapiproc) glad_glXSelectEventSGIX, 3, dpy, drawable, mask);
    glad_glXSelectEventSGIX(dpy, drawable, mask);
    _post_call_glx_callback(NULL, "glXSelectEventSGIX", (GLADapiproc) glad_glXSelectEventSGIX, 3, dpy, drawable, mask);
    
}
PFNGLXSELECTEVENTSGIXPROC glad_debug_glXSelectEventSGIX = glad_debug_impl_glXSelectEventSGIX;
PFNGLXSENDPBUFFERTOVIDEONVPROC glad_glXSendPbufferToVideoNV = NULL;
static int GLAD_API_PTR glad_debug_impl_glXSendPbufferToVideoNV(Display * dpy, GLXPbuffer pbuf, int iBufferType, unsigned long * pulCounterPbuffer, GLboolean bBlock) {
    int ret;
    _pre_call_glx_callback("glXSendPbufferToVideoNV", (GLADapiproc) glad_glXSendPbufferToVideoNV, 5, dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock);
    ret = glad_glXSendPbufferToVideoNV(dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock);
    _post_call_glx_callback((void*) &ret, "glXSendPbufferToVideoNV", (GLADapiproc) glad_glXSendPbufferToVideoNV, 5, dpy, pbuf, iBufferType, pulCounterPbuffer, bBlock);
    return ret;
}
PFNGLXSENDPBUFFERTOVIDEONVPROC glad_debug_glXSendPbufferToVideoNV = glad_debug_impl_glXSendPbufferToVideoNV;
PFNGLXSET3DFXMODEMESAPROC glad_glXSet3DfxModeMESA = NULL;
static GLboolean GLAD_API_PTR glad_debug_impl_glXSet3DfxModeMESA(GLint mode) {
    GLboolean ret;
    _pre_call_glx_callback("glXSet3DfxModeMESA", (GLADapiproc) glad_glXSet3DfxModeMESA, 1, mode);
    ret = glad_glXSet3DfxModeMESA(mode);
    _post_call_glx_callback((void*) &ret, "glXSet3DfxModeMESA", (GLADapiproc) glad_glXSet3DfxModeMESA, 1, mode);
    return ret;
}
PFNGLXSET3DFXMODEMESAPROC glad_debug_glXSet3DfxModeMESA = glad_debug_impl_glXSet3DfxModeMESA;
PFNGLXSWAPBUFFERSPROC glad_glXSwapBuffers = NULL;
static void GLAD_API_PTR glad_debug_impl_glXSwapBuffers(Display * dpy, GLXDrawable drawable) {
    _pre_call_glx_callback("glXSwapBuffers", (GLADapiproc) glad_glXSwapBuffers, 2, dpy, drawable);
    glad_glXSwapBuffers(dpy, drawable);
    _post_call_glx_callback(NULL, "glXSwapBuffers", (GLADapiproc) glad_glXSwapBuffers, 2, dpy, drawable);
    
}
PFNGLXSWAPBUFFERSPROC glad_debug_glXSwapBuffers = glad_debug_impl_glXSwapBuffers;
PFNGLXSWAPBUFFERSMSCOMLPROC glad_glXSwapBuffersMscOML = NULL;
static int64_t GLAD_API_PTR glad_debug_impl_glXSwapBuffersMscOML(Display * dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder) {
    int64_t ret;
    _pre_call_glx_callback("glXSwapBuffersMscOML", (GLADapiproc) glad_glXSwapBuffersMscOML, 5, dpy, drawable, target_msc, divisor, remainder);
    ret = glad_glXSwapBuffersMscOML(dpy, drawable, target_msc, divisor, remainder);
    _post_call_glx_callback((void*) &ret, "glXSwapBuffersMscOML", (GLADapiproc) glad_glXSwapBuffersMscOML, 5, dpy, drawable, target_msc, divisor, remainder);
    return ret;
}
PFNGLXSWAPBUFFERSMSCOMLPROC glad_debug_glXSwapBuffersMscOML = glad_debug_impl_glXSwapBuffersMscOML;
PFNGLXSWAPINTERVALEXTPROC glad_glXSwapIntervalEXT = NULL;
static void GLAD_API_PTR glad_debug_impl_glXSwapIntervalEXT(Display * dpy, GLXDrawable drawable, int interval) {
    _pre_call_glx_callback("glXSwapIntervalEXT", (GLADapiproc) glad_glXSwapIntervalEXT, 3, dpy, drawable, interval);
    glad_glXSwapIntervalEXT(dpy, drawable, interval);
    _post_call_glx_callback(NULL, "glXSwapIntervalEXT", (GLADapiproc) glad_glXSwapIntervalEXT, 3, dpy, drawable, interval);
    
}
PFNGLXSWAPINTERVALEXTPROC glad_debug_glXSwapIntervalEXT = glad_debug_impl_glXSwapIntervalEXT;
PFNGLXSWAPINTERVALMESAPROC glad_glXSwapIntervalMESA = NULL;
static int GLAD_API_PTR glad_debug_impl_glXSwapIntervalMESA(unsigned int interval) {
    int ret;
    _pre_call_glx_callback("glXSwapIntervalMESA", (GLADapiproc) glad_glXSwapIntervalMESA, 1, interval);
    ret = glad_glXSwapIntervalMESA(interval);
    _post_call_glx_callback((void*) &ret, "glXSwapIntervalMESA", (GLADapiproc) glad_glXSwapIntervalMESA, 1, interval);
    return ret;
}
PFNGLXSWAPINTERVALMESAPROC glad_debug_glXSwapIntervalMESA = glad_debug_impl_glXSwapIntervalMESA;
PFNGLXSWAPINTERVALSGIPROC glad_glXSwapIntervalSGI = NULL;
static int GLAD_API_PTR glad_debug_impl_glXSwapIntervalSGI(int interval) {
    int ret;
    _pre_call_glx_callback("glXSwapIntervalSGI", (GLADapiproc) glad_glXSwapIntervalSGI, 1, interval);
    ret = glad_glXSwapIntervalSGI(interval);
    _post_call_glx_callback((void*) &ret, "glXSwapIntervalSGI", (GLADapiproc) glad_glXSwapIntervalSGI, 1, interval);
    return ret;
}
PFNGLXSWAPINTERVALSGIPROC glad_debug_glXSwapIntervalSGI = glad_debug_impl_glXSwapIntervalSGI;
PFNGLXUSEXFONTPROC glad_glXUseXFont = NULL;
static void GLAD_API_PTR glad_debug_impl_glXUseXFont(Font font, int first, int count, int list) {
    _pre_call_glx_callback("glXUseXFont", (GLADapiproc) glad_glXUseXFont, 4, font, first, count, list);
    glad_glXUseXFont(font, first, count, list);
    _post_call_glx_callback(NULL, "glXUseXFont", (GLADapiproc) glad_glXUseXFont, 4, font, first, count, list);
    
}
PFNGLXUSEXFONTPROC glad_debug_glXUseXFont = glad_debug_impl_glXUseXFont;
PFNGLXWAITFORMSCOMLPROC glad_glXWaitForMscOML = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXWaitForMscOML(Display * dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t * ust, int64_t * msc, int64_t * sbc) {
    Bool ret;
    _pre_call_glx_callback("glXWaitForMscOML", (GLADapiproc) glad_glXWaitForMscOML, 8, dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc);
    ret = glad_glXWaitForMscOML(dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc);
    _post_call_glx_callback((void*) &ret, "glXWaitForMscOML", (GLADapiproc) glad_glXWaitForMscOML, 8, dpy, drawable, target_msc, divisor, remainder, ust, msc, sbc);
    return ret;
}
PFNGLXWAITFORMSCOMLPROC glad_debug_glXWaitForMscOML = glad_debug_impl_glXWaitForMscOML;
PFNGLXWAITFORSBCOMLPROC glad_glXWaitForSbcOML = NULL;
static Bool GLAD_API_PTR glad_debug_impl_glXWaitForSbcOML(Display * dpy, GLXDrawable drawable, int64_t target_sbc, int64_t * ust, int64_t * msc, int64_t * sbc) {
    Bool ret;
    _pre_call_glx_callback("glXWaitForSbcOML", (GLADapiproc) glad_glXWaitForSbcOML, 6, dpy, drawable, target_sbc, ust, msc, sbc);
    ret = glad_glXWaitForSbcOML(dpy, drawable, target_sbc, ust, msc, sbc);
    _post_call_glx_callback((void*) &ret, "glXWaitForSbcOML", (GLADapiproc) glad_glXWaitForSbcOML, 6, dpy, drawable, target_sbc, ust, msc, sbc);
    return ret;
}
PFNGLXWAITFORSBCOMLPROC glad_debug_glXWaitForSbcOML = glad_debug_impl_glXWaitForSbcOML;
PFNGLXWAITGLPROC glad_glXWaitGL = NULL;
static void GLAD_API_PTR glad_debug_impl_glXWaitGL(void) {
    _pre_call_glx_callback("glXWaitGL", (GLADapiproc) glad_glXWaitGL, 0);
    glad_glXWaitGL();
    _post_call_glx_callback(NULL, "glXWaitGL", (GLADapiproc) glad_glXWaitGL, 0);
    
}
PFNGLXWAITGLPROC glad_debug_glXWaitGL = glad_debug_impl_glXWaitGL;
PFNGLXWAITVIDEOSYNCSGIPROC glad_glXWaitVideoSyncSGI = NULL;
static int GLAD_API_PTR glad_debug_impl_glXWaitVideoSyncSGI(int divisor, int remainder, unsigned int * count) {
    int ret;
    _pre_call_glx_callback("glXWaitVideoSyncSGI", (GLADapiproc) glad_glXWaitVideoSyncSGI, 3, divisor, remainder, count);
    ret = glad_glXWaitVideoSyncSGI(divisor, remainder, count);
    _post_call_glx_callback((void*) &ret, "glXWaitVideoSyncSGI", (GLADapiproc) glad_glXWaitVideoSyncSGI, 3, divisor, remainder, count);
    return ret;
}
PFNGLXWAITVIDEOSYNCSGIPROC glad_debug_glXWaitVideoSyncSGI = glad_debug_impl_glXWaitVideoSyncSGI;
PFNGLXWAITXPROC glad_glXWaitX = NULL;
static void GLAD_API_PTR glad_debug_impl_glXWaitX(void) {
    _pre_call_glx_callback("glXWaitX", (GLADapiproc) glad_glXWaitX, 0);
    glad_glXWaitX();
    _post_call_glx_callback(NULL, "glXWaitX", (GLADapiproc) glad_glXWaitX, 0);
    
}
PFNGLXWAITXPROC glad_debug_glXWaitX = glad_debug_impl_glXWaitX;


static void glad_glx_load_GLX_VERSION_1_0( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_VERSION_1_0) return;
    glad_glXChooseVisual = (PFNGLXCHOOSEVISUALPROC) load(userptr, "glXChooseVisual");
    glad_glXCopyContext = (PFNGLXCOPYCONTEXTPROC) load(userptr, "glXCopyContext");
    glad_glXCreateContext = (PFNGLXCREATECONTEXTPROC) load(userptr, "glXCreateContext");
    glad_glXCreateGLXPixmap = (PFNGLXCREATEGLXPIXMAPPROC) load(userptr, "glXCreateGLXPixmap");
    glad_glXDestroyContext = (PFNGLXDESTROYCONTEXTPROC) load(userptr, "glXDestroyContext");
    glad_glXDestroyGLXPixmap = (PFNGLXDESTROYGLXPIXMAPPROC) load(userptr, "glXDestroyGLXPixmap");
    glad_glXGetConfig = (PFNGLXGETCONFIGPROC) load(userptr, "glXGetConfig");
    glad_glXGetCurrentContext = (PFNGLXGETCURRENTCONTEXTPROC) load(userptr, "glXGetCurrentContext");
    glad_glXGetCurrentDrawable = (PFNGLXGETCURRENTDRAWABLEPROC) load(userptr, "glXGetCurrentDrawable");
    glad_glXIsDirect = (PFNGLXISDIRECTPROC) load(userptr, "glXIsDirect");
    glad_glXMakeCurrent = (PFNGLXMAKECURRENTPROC) load(userptr, "glXMakeCurrent");
    glad_glXQueryExtension = (PFNGLXQUERYEXTENSIONPROC) load(userptr, "glXQueryExtension");
    glad_glXQueryVersion = (PFNGLXQUERYVERSIONPROC) load(userptr, "glXQueryVersion");
    glad_glXSwapBuffers = (PFNGLXSWAPBUFFERSPROC) load(userptr, "glXSwapBuffers");
    glad_glXUseXFont = (PFNGLXUSEXFONTPROC) load(userptr, "glXUseXFont");
    glad_glXWaitGL = (PFNGLXWAITGLPROC) load(userptr, "glXWaitGL");
    glad_glXWaitX = (PFNGLXWAITXPROC) load(userptr, "glXWaitX");
}
static void glad_glx_load_GLX_VERSION_1_1( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_VERSION_1_1) return;
    glad_glXGetClientString = (PFNGLXGETCLIENTSTRINGPROC) load(userptr, "glXGetClientString");
    glad_glXQueryExtensionsString = (PFNGLXQUERYEXTENSIONSSTRINGPROC) load(userptr, "glXQueryExtensionsString");
    glad_glXQueryServerString = (PFNGLXQUERYSERVERSTRINGPROC) load(userptr, "glXQueryServerString");
}
static void glad_glx_load_GLX_VERSION_1_2( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_VERSION_1_2) return;
    glad_glXGetCurrentDisplay = (PFNGLXGETCURRENTDISPLAYPROC) load(userptr, "glXGetCurrentDisplay");
}
static void glad_glx_load_GLX_VERSION_1_3( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_VERSION_1_3) return;
    glad_glXChooseFBConfig = (PFNGLXCHOOSEFBCONFIGPROC) load(userptr, "glXChooseFBConfig");
    glad_glXCreateNewContext = (PFNGLXCREATENEWCONTEXTPROC) load(userptr, "glXCreateNewContext");
    glad_glXCreatePbuffer = (PFNGLXCREATEPBUFFERPROC) load(userptr, "glXCreatePbuffer");
    glad_glXCreatePixmap = (PFNGLXCREATEPIXMAPPROC) load(userptr, "glXCreatePixmap");
    glad_glXCreateWindow = (PFNGLXCREATEWINDOWPROC) load(userptr, "glXCreateWindow");
    glad_glXDestroyPbuffer = (PFNGLXDESTROYPBUFFERPROC) load(userptr, "glXDestroyPbuffer");
    glad_glXDestroyPixmap = (PFNGLXDESTROYPIXMAPPROC) load(userptr, "glXDestroyPixmap");
    glad_glXDestroyWindow = (PFNGLXDESTROYWINDOWPROC) load(userptr, "glXDestroyWindow");
    glad_glXGetCurrentReadDrawable = (PFNGLXGETCURRENTREADDRAWABLEPROC) load(userptr, "glXGetCurrentReadDrawable");
    glad_glXGetFBConfigAttrib = (PFNGLXGETFBCONFIGATTRIBPROC) load(userptr, "glXGetFBConfigAttrib");
    glad_glXGetFBConfigs = (PFNGLXGETFBCONFIGSPROC) load(userptr, "glXGetFBConfigs");
    glad_glXGetSelectedEvent = (PFNGLXGETSELECTEDEVENTPROC) load(userptr, "glXGetSelectedEvent");
    glad_glXGetVisualFromFBConfig = (PFNGLXGETVISUALFROMFBCONFIGPROC) load(userptr, "glXGetVisualFromFBConfig");
    glad_glXMakeContextCurrent = (PFNGLXMAKECONTEXTCURRENTPROC) load(userptr, "glXMakeContextCurrent");
    glad_glXQueryContext = (PFNGLXQUERYCONTEXTPROC) load(userptr, "glXQueryContext");
    glad_glXQueryDrawable = (PFNGLXQUERYDRAWABLEPROC) load(userptr, "glXQueryDrawable");
    glad_glXSelectEvent = (PFNGLXSELECTEVENTPROC) load(userptr, "glXSelectEvent");
}
static void glad_glx_load_GLX_VERSION_1_4( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_VERSION_1_4) return;
    glad_glXGetProcAddress = (PFNGLXGETPROCADDRESSPROC) load(userptr, "glXGetProcAddress");
}
static void glad_glx_load_GLX_AMD_gpu_association( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_AMD_gpu_association) return;
    glad_glXBlitContextFramebufferAMD = (PFNGLXBLITCONTEXTFRAMEBUFFERAMDPROC) load(userptr, "glXBlitContextFramebufferAMD");
    glad_glXCreateAssociatedContextAMD = (PFNGLXCREATEASSOCIATEDCONTEXTAMDPROC) load(userptr, "glXCreateAssociatedContextAMD");
    glad_glXCreateAssociatedContextAttribsAMD = (PFNGLXCREATEASSOCIATEDCONTEXTATTRIBSAMDPROC) load(userptr, "glXCreateAssociatedContextAttribsAMD");
    glad_glXDeleteAssociatedContextAMD = (PFNGLXDELETEASSOCIATEDCONTEXTAMDPROC) load(userptr, "glXDeleteAssociatedContextAMD");
    glad_glXGetContextGPUIDAMD = (PFNGLXGETCONTEXTGPUIDAMDPROC) load(userptr, "glXGetContextGPUIDAMD");
    glad_glXGetCurrentAssociatedContextAMD = (PFNGLXGETCURRENTASSOCIATEDCONTEXTAMDPROC) load(userptr, "glXGetCurrentAssociatedContextAMD");
    glad_glXGetGPUIDsAMD = (PFNGLXGETGPUIDSAMDPROC) load(userptr, "glXGetGPUIDsAMD");
    glad_glXGetGPUInfoAMD = (PFNGLXGETGPUINFOAMDPROC) load(userptr, "glXGetGPUInfoAMD");
    glad_glXMakeAssociatedContextCurrentAMD = (PFNGLXMAKEASSOCIATEDCONTEXTCURRENTAMDPROC) load(userptr, "glXMakeAssociatedContextCurrentAMD");
}
static void glad_glx_load_GLX_ARB_create_context( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_ARB_create_context) return;
    glad_glXCreateContextAttribsARB = (PFNGLXCREATECONTEXTATTRIBSARBPROC) load(userptr, "glXCreateContextAttribsARB");
}
static void glad_glx_load_GLX_ARB_get_proc_address( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_ARB_get_proc_address) return;
    glad_glXGetProcAddressARB = (PFNGLXGETPROCADDRESSARBPROC) load(userptr, "glXGetProcAddressARB");
}
static void glad_glx_load_GLX_EXT_import_context( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_EXT_import_context) return;
    glad_glXFreeContextEXT = (PFNGLXFREECONTEXTEXTPROC) load(userptr, "glXFreeContextEXT");
    glad_glXGetContextIDEXT = (PFNGLXGETCONTEXTIDEXTPROC) load(userptr, "glXGetContextIDEXT");
    glad_glXGetCurrentDisplayEXT = (PFNGLXGETCURRENTDISPLAYEXTPROC) load(userptr, "glXGetCurrentDisplayEXT");
    glad_glXImportContextEXT = (PFNGLXIMPORTCONTEXTEXTPROC) load(userptr, "glXImportContextEXT");
    glad_glXQueryContextInfoEXT = (PFNGLXQUERYCONTEXTINFOEXTPROC) load(userptr, "glXQueryContextInfoEXT");
}
static void glad_glx_load_GLX_EXT_swap_control( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_EXT_swap_control) return;
    glad_glXSwapIntervalEXT = (PFNGLXSWAPINTERVALEXTPROC) load(userptr, "glXSwapIntervalEXT");
}
static void glad_glx_load_GLX_EXT_texture_from_pixmap( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_EXT_texture_from_pixmap) return;
    glad_glXBindTexImageEXT = (PFNGLXBINDTEXIMAGEEXTPROC) load(userptr, "glXBindTexImageEXT");
    glad_glXReleaseTexImageEXT = (PFNGLXRELEASETEXIMAGEEXTPROC) load(userptr, "glXReleaseTexImageEXT");
}
static void glad_glx_load_GLX_MESA_agp_offset( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_MESA_agp_offset) return;
    glad_glXGetAGPOffsetMESA = (PFNGLXGETAGPOFFSETMESAPROC) load(userptr, "glXGetAGPOffsetMESA");
}
static void glad_glx_load_GLX_MESA_copy_sub_buffer( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_MESA_copy_sub_buffer) return;
    glad_glXCopySubBufferMESA = (PFNGLXCOPYSUBBUFFERMESAPROC) load(userptr, "glXCopySubBufferMESA");
}
static void glad_glx_load_GLX_MESA_pixmap_colormap( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_MESA_pixmap_colormap) return;
    glad_glXCreateGLXPixmapMESA = (PFNGLXCREATEGLXPIXMAPMESAPROC) load(userptr, "glXCreateGLXPixmapMESA");
}
static void glad_glx_load_GLX_MESA_query_renderer( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_MESA_query_renderer) return;
    glad_glXQueryCurrentRendererIntegerMESA = (PFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC) load(userptr, "glXQueryCurrentRendererIntegerMESA");
    glad_glXQueryCurrentRendererStringMESA = (PFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC) load(userptr, "glXQueryCurrentRendererStringMESA");
    glad_glXQueryRendererIntegerMESA = (PFNGLXQUERYRENDERERINTEGERMESAPROC) load(userptr, "glXQueryRendererIntegerMESA");
    glad_glXQueryRendererStringMESA = (PFNGLXQUERYRENDERERSTRINGMESAPROC) load(userptr, "glXQueryRendererStringMESA");
}
static void glad_glx_load_GLX_MESA_release_buffers( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_MESA_release_buffers) return;
    glad_glXReleaseBuffersMESA = (PFNGLXRELEASEBUFFERSMESAPROC) load(userptr, "glXReleaseBuffersMESA");
}
static void glad_glx_load_GLX_MESA_set_3dfx_mode( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_MESA_set_3dfx_mode) return;
    glad_glXSet3DfxModeMESA = (PFNGLXSET3DFXMODEMESAPROC) load(userptr, "glXSet3DfxModeMESA");
}
static void glad_glx_load_GLX_MESA_swap_control( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_MESA_swap_control) return;
    glad_glXGetSwapIntervalMESA = (PFNGLXGETSWAPINTERVALMESAPROC) load(userptr, "glXGetSwapIntervalMESA");
    glad_glXSwapIntervalMESA = (PFNGLXSWAPINTERVALMESAPROC) load(userptr, "glXSwapIntervalMESA");
}
static void glad_glx_load_GLX_NV_copy_buffer( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_NV_copy_buffer) return;
    glad_glXCopyBufferSubDataNV = (PFNGLXCOPYBUFFERSUBDATANVPROC) load(userptr, "glXCopyBufferSubDataNV");
    glad_glXNamedCopyBufferSubDataNV = (PFNGLXNAMEDCOPYBUFFERSUBDATANVPROC) load(userptr, "glXNamedCopyBufferSubDataNV");
}
static void glad_glx_load_GLX_NV_copy_image( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_NV_copy_image) return;
    glad_glXCopyImageSubDataNV = (PFNGLXCOPYIMAGESUBDATANVPROC) load(userptr, "glXCopyImageSubDataNV");
}
static void glad_glx_load_GLX_NV_delay_before_swap( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_NV_delay_before_swap) return;
    glad_glXDelayBeforeSwapNV = (PFNGLXDELAYBEFORESWAPNVPROC) load(userptr, "glXDelayBeforeSwapNV");
}
static void glad_glx_load_GLX_NV_present_video( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_NV_present_video) return;
    glad_glXBindVideoDeviceNV = (PFNGLXBINDVIDEODEVICENVPROC) load(userptr, "glXBindVideoDeviceNV");
    glad_glXEnumerateVideoDevicesNV = (PFNGLXENUMERATEVIDEODEVICESNVPROC) load(userptr, "glXEnumerateVideoDevicesNV");
}
static void glad_glx_load_GLX_NV_swap_group( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_NV_swap_group) return;
    glad_glXBindSwapBarrierNV = (PFNGLXBINDSWAPBARRIERNVPROC) load(userptr, "glXBindSwapBarrierNV");
    glad_glXJoinSwapGroupNV = (PFNGLXJOINSWAPGROUPNVPROC) load(userptr, "glXJoinSwapGroupNV");
    glad_glXQueryFrameCountNV = (PFNGLXQUERYFRAMECOUNTNVPROC) load(userptr, "glXQueryFrameCountNV");
    glad_glXQueryMaxSwapGroupsNV = (PFNGLXQUERYMAXSWAPGROUPSNVPROC) load(userptr, "glXQueryMaxSwapGroupsNV");
    glad_glXQuerySwapGroupNV = (PFNGLXQUERYSWAPGROUPNVPROC) load(userptr, "glXQuerySwapGroupNV");
    glad_glXResetFrameCountNV = (PFNGLXRESETFRAMECOUNTNVPROC) load(userptr, "glXResetFrameCountNV");
}
static void glad_glx_load_GLX_NV_video_capture( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_NV_video_capture) return;
    glad_glXBindVideoCaptureDeviceNV = (PFNGLXBINDVIDEOCAPTUREDEVICENVPROC) load(userptr, "glXBindVideoCaptureDeviceNV");
    glad_glXEnumerateVideoCaptureDevicesNV = (PFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC) load(userptr, "glXEnumerateVideoCaptureDevicesNV");
    glad_glXLockVideoCaptureDeviceNV = (PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC) load(userptr, "glXLockVideoCaptureDeviceNV");
    glad_glXQueryVideoCaptureDeviceNV = (PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC) load(userptr, "glXQueryVideoCaptureDeviceNV");
    glad_glXReleaseVideoCaptureDeviceNV = (PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC) load(userptr, "glXReleaseVideoCaptureDeviceNV");
}
static void glad_glx_load_GLX_NV_video_out( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_NV_video_out) return;
    glad_glXBindVideoImageNV = (PFNGLXBINDVIDEOIMAGENVPROC) load(userptr, "glXBindVideoImageNV");
    glad_glXGetVideoDeviceNV = (PFNGLXGETVIDEODEVICENVPROC) load(userptr, "glXGetVideoDeviceNV");
    glad_glXGetVideoInfoNV = (PFNGLXGETVIDEOINFONVPROC) load(userptr, "glXGetVideoInfoNV");
    glad_glXReleaseVideoDeviceNV = (PFNGLXRELEASEVIDEODEVICENVPROC) load(userptr, "glXReleaseVideoDeviceNV");
    glad_glXReleaseVideoImageNV = (PFNGLXRELEASEVIDEOIMAGENVPROC) load(userptr, "glXReleaseVideoImageNV");
    glad_glXSendPbufferToVideoNV = (PFNGLXSENDPBUFFERTOVIDEONVPROC) load(userptr, "glXSendPbufferToVideoNV");
}
static void glad_glx_load_GLX_OML_sync_control( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_OML_sync_control) return;
    glad_glXGetMscRateOML = (PFNGLXGETMSCRATEOMLPROC) load(userptr, "glXGetMscRateOML");
    glad_glXGetSyncValuesOML = (PFNGLXGETSYNCVALUESOMLPROC) load(userptr, "glXGetSyncValuesOML");
    glad_glXSwapBuffersMscOML = (PFNGLXSWAPBUFFERSMSCOMLPROC) load(userptr, "glXSwapBuffersMscOML");
    glad_glXWaitForMscOML = (PFNGLXWAITFORMSCOMLPROC) load(userptr, "glXWaitForMscOML");
    glad_glXWaitForSbcOML = (PFNGLXWAITFORSBCOMLPROC) load(userptr, "glXWaitForSbcOML");
}
static void glad_glx_load_GLX_SGIX_fbconfig( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_SGIX_fbconfig) return;
    glad_glXChooseFBConfigSGIX = (PFNGLXCHOOSEFBCONFIGSGIXPROC) load(userptr, "glXChooseFBConfigSGIX");
    glad_glXCreateContextWithConfigSGIX = (PFNGLXCREATECONTEXTWITHCONFIGSGIXPROC) load(userptr, "glXCreateContextWithConfigSGIX");
    glad_glXCreateGLXPixmapWithConfigSGIX = (PFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC) load(userptr, "glXCreateGLXPixmapWithConfigSGIX");
    glad_glXGetFBConfigAttribSGIX = (PFNGLXGETFBCONFIGATTRIBSGIXPROC) load(userptr, "glXGetFBConfigAttribSGIX");
    glad_glXGetFBConfigFromVisualSGIX = (PFNGLXGETFBCONFIGFROMVISUALSGIXPROC) load(userptr, "glXGetFBConfigFromVisualSGIX");
    glad_glXGetVisualFromFBConfigSGIX = (PFNGLXGETVISUALFROMFBCONFIGSGIXPROC) load(userptr, "glXGetVisualFromFBConfigSGIX");
}
static void glad_glx_load_GLX_SGIX_hyperpipe( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_SGIX_hyperpipe) return;
    glad_glXBindHyperpipeSGIX = (PFNGLXBINDHYPERPIPESGIXPROC) load(userptr, "glXBindHyperpipeSGIX");
    glad_glXDestroyHyperpipeConfigSGIX = (PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC) load(userptr, "glXDestroyHyperpipeConfigSGIX");
    glad_glXHyperpipeAttribSGIX = (PFNGLXHYPERPIPEATTRIBSGIXPROC) load(userptr, "glXHyperpipeAttribSGIX");
    glad_glXHyperpipeConfigSGIX = (PFNGLXHYPERPIPECONFIGSGIXPROC) load(userptr, "glXHyperpipeConfigSGIX");
    glad_glXQueryHyperpipeAttribSGIX = (PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC) load(userptr, "glXQueryHyperpipeAttribSGIX");
    glad_glXQueryHyperpipeBestAttribSGIX = (PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC) load(userptr, "glXQueryHyperpipeBestAttribSGIX");
    glad_glXQueryHyperpipeConfigSGIX = (PFNGLXQUERYHYPERPIPECONFIGSGIXPROC) load(userptr, "glXQueryHyperpipeConfigSGIX");
    glad_glXQueryHyperpipeNetworkSGIX = (PFNGLXQUERYHYPERPIPENETWORKSGIXPROC) load(userptr, "glXQueryHyperpipeNetworkSGIX");
}
static void glad_glx_load_GLX_SGIX_pbuffer( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_SGIX_pbuffer) return;
    glad_glXCreateGLXPbufferSGIX = (PFNGLXCREATEGLXPBUFFERSGIXPROC) load(userptr, "glXCreateGLXPbufferSGIX");
    glad_glXDestroyGLXPbufferSGIX = (PFNGLXDESTROYGLXPBUFFERSGIXPROC) load(userptr, "glXDestroyGLXPbufferSGIX");
    glad_glXGetSelectedEventSGIX = (PFNGLXGETSELECTEDEVENTSGIXPROC) load(userptr, "glXGetSelectedEventSGIX");
    glad_glXQueryGLXPbufferSGIX = (PFNGLXQUERYGLXPBUFFERSGIXPROC) load(userptr, "glXQueryGLXPbufferSGIX");
    glad_glXSelectEventSGIX = (PFNGLXSELECTEVENTSGIXPROC) load(userptr, "glXSelectEventSGIX");
}
static void glad_glx_load_GLX_SGIX_swap_barrier( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_SGIX_swap_barrier) return;
    glad_glXBindSwapBarrierSGIX = (PFNGLXBINDSWAPBARRIERSGIXPROC) load(userptr, "glXBindSwapBarrierSGIX");
    glad_glXQueryMaxSwapBarriersSGIX = (PFNGLXQUERYMAXSWAPBARRIERSSGIXPROC) load(userptr, "glXQueryMaxSwapBarriersSGIX");
}
static void glad_glx_load_GLX_SGIX_swap_group( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_SGIX_swap_group) return;
    glad_glXJoinSwapGroupSGIX = (PFNGLXJOINSWAPGROUPSGIXPROC) load(userptr, "glXJoinSwapGroupSGIX");
}
static void glad_glx_load_GLX_SGIX_video_resize( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_SGIX_video_resize) return;
    glad_glXBindChannelToWindowSGIX = (PFNGLXBINDCHANNELTOWINDOWSGIXPROC) load(userptr, "glXBindChannelToWindowSGIX");
    glad_glXChannelRectSGIX = (PFNGLXCHANNELRECTSGIXPROC) load(userptr, "glXChannelRectSGIX");
    glad_glXChannelRectSyncSGIX = (PFNGLXCHANNELRECTSYNCSGIXPROC) load(userptr, "glXChannelRectSyncSGIX");
    glad_glXQueryChannelDeltasSGIX = (PFNGLXQUERYCHANNELDELTASSGIXPROC) load(userptr, "glXQueryChannelDeltasSGIX");
    glad_glXQueryChannelRectSGIX = (PFNGLXQUERYCHANNELRECTSGIXPROC) load(userptr, "glXQueryChannelRectSGIX");
}
static void glad_glx_load_GLX_SGI_cushion( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_SGI_cushion) return;
    glad_glXCushionSGI = (PFNGLXCUSHIONSGIPROC) load(userptr, "glXCushionSGI");
}
static void glad_glx_load_GLX_SGI_make_current_read( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_SGI_make_current_read) return;
    glad_glXGetCurrentReadDrawableSGI = (PFNGLXGETCURRENTREADDRAWABLESGIPROC) load(userptr, "glXGetCurrentReadDrawableSGI");
    glad_glXMakeCurrentReadSGI = (PFNGLXMAKECURRENTREADSGIPROC) load(userptr, "glXMakeCurrentReadSGI");
}
static void glad_glx_load_GLX_SGI_swap_control( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_SGI_swap_control) return;
    glad_glXSwapIntervalSGI = (PFNGLXSWAPINTERVALSGIPROC) load(userptr, "glXSwapIntervalSGI");
}
static void glad_glx_load_GLX_SGI_video_sync( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_SGI_video_sync) return;
    glad_glXGetVideoSyncSGI = (PFNGLXGETVIDEOSYNCSGIPROC) load(userptr, "glXGetVideoSyncSGI");
    glad_glXWaitVideoSyncSGI = (PFNGLXWAITVIDEOSYNCSGIPROC) load(userptr, "glXWaitVideoSyncSGI");
}
static void glad_glx_load_GLX_SUN_get_transparent_index( GLADuserptrloadfunc load, void* userptr) {
    if(!GLAD_GLX_SUN_get_transparent_index) return;
    glad_glXGetTransparentIndexSUN = (PFNGLXGETTRANSPARENTINDEXSUNPROC) load(userptr, "glXGetTransparentIndexSUN");
}



static int glad_glx_has_extension(Display *display, int screen, const char *ext) {
#ifndef GLX_VERSION_1_1
    GLAD_UNUSED(display);
    GLAD_UNUSED(screen);
    GLAD_UNUSED(ext);
#else
    const char *terminator;
    const char *loc;
    const char *extensions;

    if (glXQueryExtensionsString == NULL) {
        return 0;
    }

    extensions = glXQueryExtensionsString(display, screen);

    if(extensions == NULL || ext == NULL) {
        return 0;
    }

    while(1) {
        loc = strstr(extensions, ext);
        if(loc == NULL)
            break;

        terminator = loc + strlen(ext);
        if((loc == extensions || *(loc - 1) == ' ') &&
            (*terminator == ' ' || *terminator == '\0')) {
            return 1;
        }
        extensions = terminator;
    }
#endif

    return 0;
}

static GLADapiproc glad_glx_get_proc_from_userptr(void *userptr, const char* name) {
    return (GLAD_GNUC_EXTENSION (GLADapiproc (*)(const char *name)) userptr)(name);
}

static int glad_glx_find_extensions(Display *display, int screen) {
    GLAD_GLX_3DFX_multisample = glad_glx_has_extension(display, screen, "GLX_3DFX_multisample");
    GLAD_GLX_AMD_gpu_association = glad_glx_has_extension(display, screen, "GLX_AMD_gpu_association");
    GLAD_GLX_ARB_context_flush_control = glad_glx_has_extension(display, screen, "GLX_ARB_context_flush_control");
    GLAD_GLX_ARB_create_context = glad_glx_has_extension(display, screen, "GLX_ARB_create_context");
    GLAD_GLX_ARB_create_context_no_error = glad_glx_has_extension(display, screen, "GLX_ARB_create_context_no_error");
    GLAD_GLX_ARB_create_context_profile = glad_glx_has_extension(display, screen, "GLX_ARB_create_context_profile");
    GLAD_GLX_ARB_create_context_robustness = glad_glx_has_extension(display, screen, "GLX_ARB_create_context_robustness");
    GLAD_GLX_ARB_fbconfig_float = glad_glx_has_extension(display, screen, "GLX_ARB_fbconfig_float");
    GLAD_GLX_ARB_framebuffer_sRGB = glad_glx_has_extension(display, screen, "GLX_ARB_framebuffer_sRGB");
    GLAD_GLX_ARB_get_proc_address = glad_glx_has_extension(display, screen, "GLX_ARB_get_proc_address");
    GLAD_GLX_ARB_multisample = glad_glx_has_extension(display, screen, "GLX_ARB_multisample");
    GLAD_GLX_ARB_robustness_application_isolation = glad_glx_has_extension(display, screen, "GLX_ARB_robustness_application_isolation");
    GLAD_GLX_ARB_robustness_share_group_isolation = glad_glx_has_extension(display, screen, "GLX_ARB_robustness_share_group_isolation");
    GLAD_GLX_ARB_vertex_buffer_object = glad_glx_has_extension(display, screen, "GLX_ARB_vertex_buffer_object");
    GLAD_GLX_EXT_buffer_age = glad_glx_has_extension(display, screen, "GLX_EXT_buffer_age");
    GLAD_GLX_EXT_context_priority = glad_glx_has_extension(display, screen, "GLX_EXT_context_priority");
    GLAD_GLX_EXT_create_context_es2_profile = glad_glx_has_extension(display, screen, "GLX_EXT_create_context_es2_profile");
    GLAD_GLX_EXT_create_context_es_profile = glad_glx_has_extension(display, screen, "GLX_EXT_create_context_es_profile");
    GLAD_GLX_EXT_fbconfig_packed_float = glad_glx_has_extension(display, screen, "GLX_EXT_fbconfig_packed_float");
    GLAD_GLX_EXT_framebuffer_sRGB = glad_glx_has_extension(display, screen, "GLX_EXT_framebuffer_sRGB");
    GLAD_GLX_EXT_get_drawable_type = glad_glx_has_extension(display, screen, "GLX_EXT_get_drawable_type");
    GLAD_GLX_EXT_import_context = glad_glx_has_extension(display, screen, "GLX_EXT_import_context");
    GLAD_GLX_EXT_libglvnd = glad_glx_has_extension(display, screen, "GLX_EXT_libglvnd");
    GLAD_GLX_EXT_no_config_context = glad_glx_has_extension(display, screen, "GLX_EXT_no_config_context");
    GLAD_GLX_EXT_stereo_tree = glad_glx_has_extension(display, screen, "GLX_EXT_stereo_tree");
    GLAD_GLX_EXT_swap_control = glad_glx_has_extension(display, screen, "GLX_EXT_swap_control");
    GLAD_GLX_EXT_swap_control_tear = glad_glx_has_extension(display, screen, "GLX_EXT_swap_control_tear");
    GLAD_GLX_EXT_texture_from_pixmap = glad_glx_has_extension(display, screen, "GLX_EXT_texture_from_pixmap");
    GLAD_GLX_EXT_visual_info = glad_glx_has_extension(display, screen, "GLX_EXT_visual_info");
    GLAD_GLX_EXT_visual_rating = glad_glx_has_extension(display, screen, "GLX_EXT_visual_rating");
    GLAD_GLX_INTEL_swap_event = glad_glx_has_extension(display, screen, "GLX_INTEL_swap_event");
    GLAD_GLX_MESA_agp_offset = glad_glx_has_extension(display, screen, "GLX_MESA_agp_offset");
    GLAD_GLX_MESA_copy_sub_buffer = glad_glx_has_extension(display, screen, "GLX_MESA_copy_sub_buffer");
    GLAD_GLX_MESA_pixmap_colormap = glad_glx_has_extension(display, screen, "GLX_MESA_pixmap_colormap");
    GLAD_GLX_MESA_query_renderer = glad_glx_has_extension(display, screen, "GLX_MESA_query_renderer");
    GLAD_GLX_MESA_release_buffers = glad_glx_has_extension(display, screen, "GLX_MESA_release_buffers");
    GLAD_GLX_MESA_set_3dfx_mode = glad_glx_has_extension(display, screen, "GLX_MESA_set_3dfx_mode");
    GLAD_GLX_MESA_swap_control = glad_glx_has_extension(display, screen, "GLX_MESA_swap_control");
    GLAD_GLX_NV_copy_buffer = glad_glx_has_extension(display, screen, "GLX_NV_copy_buffer");
    GLAD_GLX_NV_copy_image = glad_glx_has_extension(display, screen, "GLX_NV_copy_image");
    GLAD_GLX_NV_delay_before_swap = glad_glx_has_extension(display, screen, "GLX_NV_delay_before_swap");
    GLAD_GLX_NV_float_buffer = glad_glx_has_extension(display, screen, "GLX_NV_float_buffer");
    GLAD_GLX_NV_multigpu_context = glad_glx_has_extension(display, screen, "GLX_NV_multigpu_context");
    GLAD_GLX_NV_multisample_coverage = glad_glx_has_extension(display, screen, "GLX_NV_multisample_coverage");
    GLAD_GLX_NV_present_video = glad_glx_has_extension(display, screen, "GLX_NV_present_video");
    GLAD_GLX_NV_robustness_video_memory_purge = glad_glx_has_extension(display, screen, "GLX_NV_robustness_video_memory_purge");
    GLAD_GLX_NV_swap_group = glad_glx_has_extension(display, screen, "GLX_NV_swap_group");
    GLAD_GLX_NV_video_capture = glad_glx_has_extension(display, screen, "GLX_NV_video_capture");
    GLAD_GLX_NV_video_out = glad_glx_has_extension(display, screen, "GLX_NV_video_out");
    GLAD_GLX_OML_swap_method = glad_glx_has_extension(display, screen, "GLX_OML_swap_method");
    GLAD_GLX_OML_sync_control = glad_glx_has_extension(display, screen, "GLX_OML_sync_control");
    GLAD_GLX_SGIS_blended_overlay = glad_glx_has_extension(display, screen, "GLX_SGIS_blended_overlay");
    GLAD_GLX_SGIS_multisample = glad_glx_has_extension(display, screen, "GLX_SGIS_multisample");
    GLAD_GLX_SGIS_shared_multisample = glad_glx_has_extension(display, screen, "GLX_SGIS_shared_multisample");
    GLAD_GLX_SGIX_fbconfig = glad_glx_has_extension(display, screen, "GLX_SGIX_fbconfig");
    GLAD_GLX_SGIX_hyperpipe = glad_glx_has_extension(display, screen, "GLX_SGIX_hyperpipe");
    GLAD_GLX_SGIX_pbuffer = glad_glx_has_extension(display, screen, "GLX_SGIX_pbuffer");
    GLAD_GLX_SGIX_swap_barrier = glad_glx_has_extension(display, screen, "GLX_SGIX_swap_barrier");
    GLAD_GLX_SGIX_swap_group = glad_glx_has_extension(display, screen, "GLX_SGIX_swap_group");
    GLAD_GLX_SGIX_video_resize = glad_glx_has_extension(display, screen, "GLX_SGIX_video_resize");
    GLAD_GLX_SGIX_visual_select_group = glad_glx_has_extension(display, screen, "GLX_SGIX_visual_select_group");
    GLAD_GLX_SGI_cushion = glad_glx_has_extension(display, screen, "GLX_SGI_cushion");
    GLAD_GLX_SGI_make_current_read = glad_glx_has_extension(display, screen, "GLX_SGI_make_current_read");
    GLAD_GLX_SGI_swap_control = glad_glx_has_extension(display, screen, "GLX_SGI_swap_control");
    GLAD_GLX_SGI_video_sync = glad_glx_has_extension(display, screen, "GLX_SGI_video_sync");
    GLAD_GLX_SUN_get_transparent_index = glad_glx_has_extension(display, screen, "GLX_SUN_get_transparent_index");
    return 1;
}

static int glad_glx_find_core_glx(Display **display, int *screen) {
    int major = 0, minor = 0;
    if(*display == NULL) {
#ifdef GLAD_GLX_NO_X11
        GLAD_UNUSED(screen);
        return 0;
#else
        *display = XOpenDisplay(0);
        if (*display == NULL) {
            return 0;
        }
        *screen = XScreenNumberOfScreen(XDefaultScreenOfDisplay(*display));
#endif
    }
    glXQueryVersion(*display, &major, &minor);
    GLAD_GLX_VERSION_1_0 = (major == 1 && minor >= 0) || major > 1;
    GLAD_GLX_VERSION_1_1 = (major == 1 && minor >= 1) || major > 1;
    GLAD_GLX_VERSION_1_2 = (major == 1 && minor >= 2) || major > 1;
    GLAD_GLX_VERSION_1_3 = (major == 1 && minor >= 3) || major > 1;
    GLAD_GLX_VERSION_1_4 = (major == 1 && minor >= 4) || major > 1;
    return GLAD_MAKE_VERSION(major, minor);
}

int gladLoadGLXUserPtr(Display *display, int screen, GLADuserptrloadfunc load, void *userptr) {
    int version;
    glXQueryVersion = (PFNGLXQUERYVERSIONPROC) load(userptr, "glXQueryVersion");
    if(glXQueryVersion == NULL) return 0;
    version = glad_glx_find_core_glx(&display, &screen);

    glad_glx_load_GLX_VERSION_1_0(load, userptr);
    glad_glx_load_GLX_VERSION_1_1(load, userptr);
    glad_glx_load_GLX_VERSION_1_2(load, userptr);
    glad_glx_load_GLX_VERSION_1_3(load, userptr);
    glad_glx_load_GLX_VERSION_1_4(load, userptr);

    if (!glad_glx_find_extensions(display, screen)) return 0;
    glad_glx_load_GLX_AMD_gpu_association(load, userptr);
    glad_glx_load_GLX_ARB_create_context(load, userptr);
    glad_glx_load_GLX_ARB_get_proc_address(load, userptr);
    glad_glx_load_GLX_EXT_import_context(load, userptr);
    glad_glx_load_GLX_EXT_swap_control(load, userptr);
    glad_glx_load_GLX_EXT_texture_from_pixmap(load, userptr);
    glad_glx_load_GLX_MESA_agp_offset(load, userptr);
    glad_glx_load_GLX_MESA_copy_sub_buffer(load, userptr);
    glad_glx_load_GLX_MESA_pixmap_colormap(load, userptr);
    glad_glx_load_GLX_MESA_query_renderer(load, userptr);
    glad_glx_load_GLX_MESA_release_buffers(load, userptr);
    glad_glx_load_GLX_MESA_set_3dfx_mode(load, userptr);
    glad_glx_load_GLX_MESA_swap_control(load, userptr);
    glad_glx_load_GLX_NV_copy_buffer(load, userptr);
    glad_glx_load_GLX_NV_copy_image(load, userptr);
    glad_glx_load_GLX_NV_delay_before_swap(load, userptr);
    glad_glx_load_GLX_NV_present_video(load, userptr);
    glad_glx_load_GLX_NV_swap_group(load, userptr);
    glad_glx_load_GLX_NV_video_capture(load, userptr);
    glad_glx_load_GLX_NV_video_out(load, userptr);
    glad_glx_load_GLX_OML_sync_control(load, userptr);
    glad_glx_load_GLX_SGIX_fbconfig(load, userptr);
    glad_glx_load_GLX_SGIX_hyperpipe(load, userptr);
    glad_glx_load_GLX_SGIX_pbuffer(load, userptr);
    glad_glx_load_GLX_SGIX_swap_barrier(load, userptr);
    glad_glx_load_GLX_SGIX_swap_group(load, userptr);
    glad_glx_load_GLX_SGIX_video_resize(load, userptr);
    glad_glx_load_GLX_SGI_cushion(load, userptr);
    glad_glx_load_GLX_SGI_make_current_read(load, userptr);
    glad_glx_load_GLX_SGI_swap_control(load, userptr);
    glad_glx_load_GLX_SGI_video_sync(load, userptr);
    glad_glx_load_GLX_SUN_get_transparent_index(load, userptr);


    return version;
}

int gladLoadGLX(Display *display, int screen, GLADloadfunc load) {
    return gladLoadGLXUserPtr(display, screen, glad_glx_get_proc_from_userptr, GLAD_GNUC_EXTENSION (void*) load);
}

 
void gladInstallGLXDebug() {
    glad_debug_glXBindChannelToWindowSGIX = glad_debug_impl_glXBindChannelToWindowSGIX;
    glad_debug_glXBindHyperpipeSGIX = glad_debug_impl_glXBindHyperpipeSGIX;
    glad_debug_glXBindSwapBarrierNV = glad_debug_impl_glXBindSwapBarrierNV;
    glad_debug_glXBindSwapBarrierSGIX = glad_debug_impl_glXBindSwapBarrierSGIX;
    glad_debug_glXBindTexImageEXT = glad_debug_impl_glXBindTexImageEXT;
    glad_debug_glXBindVideoCaptureDeviceNV = glad_debug_impl_glXBindVideoCaptureDeviceNV;
    glad_debug_glXBindVideoDeviceNV = glad_debug_impl_glXBindVideoDeviceNV;
    glad_debug_glXBindVideoImageNV = glad_debug_impl_glXBindVideoImageNV;
    glad_debug_glXBlitContextFramebufferAMD = glad_debug_impl_glXBlitContextFramebufferAMD;
    glad_debug_glXChannelRectSGIX = glad_debug_impl_glXChannelRectSGIX;
    glad_debug_glXChannelRectSyncSGIX = glad_debug_impl_glXChannelRectSyncSGIX;
    glad_debug_glXChooseFBConfig = glad_debug_impl_glXChooseFBConfig;
    glad_debug_glXChooseFBConfigSGIX = glad_debug_impl_glXChooseFBConfigSGIX;
    glad_debug_glXChooseVisual = glad_debug_impl_glXChooseVisual;
    glad_debug_glXCopyBufferSubDataNV = glad_debug_impl_glXCopyBufferSubDataNV;
    glad_debug_glXCopyContext = glad_debug_impl_glXCopyContext;
    glad_debug_glXCopyImageSubDataNV = glad_debug_impl_glXCopyImageSubDataNV;
    glad_debug_glXCopySubBufferMESA = glad_debug_impl_glXCopySubBufferMESA;
    glad_debug_glXCreateAssociatedContextAMD = glad_debug_impl_glXCreateAssociatedContextAMD;
    glad_debug_glXCreateAssociatedContextAttribsAMD = glad_debug_impl_glXCreateAssociatedContextAttribsAMD;
    glad_debug_glXCreateContext = glad_debug_impl_glXCreateContext;
    glad_debug_glXCreateContextAttribsARB = glad_debug_impl_glXCreateContextAttribsARB;
    glad_debug_glXCreateContextWithConfigSGIX = glad_debug_impl_glXCreateContextWithConfigSGIX;
    glad_debug_glXCreateGLXPbufferSGIX = glad_debug_impl_glXCreateGLXPbufferSGIX;
    glad_debug_glXCreateGLXPixmap = glad_debug_impl_glXCreateGLXPixmap;
    glad_debug_glXCreateGLXPixmapMESA = glad_debug_impl_glXCreateGLXPixmapMESA;
    glad_debug_glXCreateGLXPixmapWithConfigSGIX = glad_debug_impl_glXCreateGLXPixmapWithConfigSGIX;
    glad_debug_glXCreateNewContext = glad_debug_impl_glXCreateNewContext;
    glad_debug_glXCreatePbuffer = glad_debug_impl_glXCreatePbuffer;
    glad_debug_glXCreatePixmap = glad_debug_impl_glXCreatePixmap;
    glad_debug_glXCreateWindow = glad_debug_impl_glXCreateWindow;
    glad_debug_glXCushionSGI = glad_debug_impl_glXCushionSGI;
    glad_debug_glXDelayBeforeSwapNV = glad_debug_impl_glXDelayBeforeSwapNV;
    glad_debug_glXDeleteAssociatedContextAMD = glad_debug_impl_glXDeleteAssociatedContextAMD;
    glad_debug_glXDestroyContext = glad_debug_impl_glXDestroyContext;
    glad_debug_glXDestroyGLXPbufferSGIX = glad_debug_impl_glXDestroyGLXPbufferSGIX;
    glad_debug_glXDestroyGLXPixmap = glad_debug_impl_glXDestroyGLXPixmap;
    glad_debug_glXDestroyHyperpipeConfigSGIX = glad_debug_impl_glXDestroyHyperpipeConfigSGIX;
    glad_debug_glXDestroyPbuffer = glad_debug_impl_glXDestroyPbuffer;
    glad_debug_glXDestroyPixmap = glad_debug_impl_glXDestroyPixmap;
    glad_debug_glXDestroyWindow = glad_debug_impl_glXDestroyWindow;
    glad_debug_glXEnumerateVideoCaptureDevicesNV = glad_debug_impl_glXEnumerateVideoCaptureDevicesNV;
    glad_debug_glXEnumerateVideoDevicesNV = glad_debug_impl_glXEnumerateVideoDevicesNV;
    glad_debug_glXFreeContextEXT = glad_debug_impl_glXFreeContextEXT;
    glad_debug_glXGetAGPOffsetMESA = glad_debug_impl_glXGetAGPOffsetMESA;
    glad_debug_glXGetClientString = glad_debug_impl_glXGetClientString;
    glad_debug_glXGetConfig = glad_debug_impl_glXGetConfig;
    glad_debug_glXGetContextGPUIDAMD = glad_debug_impl_glXGetContextGPUIDAMD;
    glad_debug_glXGetContextIDEXT = glad_debug_impl_glXGetContextIDEXT;
    glad_debug_glXGetCurrentAssociatedContextAMD = glad_debug_impl_glXGetCurrentAssociatedContextAMD;
    glad_debug_glXGetCurrentContext = glad_debug_impl_glXGetCurrentContext;
    glad_debug_glXGetCurrentDisplay = glad_debug_impl_glXGetCurrentDisplay;
    glad_debug_glXGetCurrentDisplayEXT = glad_debug_impl_glXGetCurrentDisplayEXT;
    glad_debug_glXGetCurrentDrawable = glad_debug_impl_glXGetCurrentDrawable;
    glad_debug_glXGetCurrentReadDrawable = glad_debug_impl_glXGetCurrentReadDrawable;
    glad_debug_glXGetCurrentReadDrawableSGI = glad_debug_impl_glXGetCurrentReadDrawableSGI;
    glad_debug_glXGetFBConfigAttrib = glad_debug_impl_glXGetFBConfigAttrib;
    glad_debug_glXGetFBConfigAttribSGIX = glad_debug_impl_glXGetFBConfigAttribSGIX;
    glad_debug_glXGetFBConfigFromVisualSGIX = glad_debug_impl_glXGetFBConfigFromVisualSGIX;
    glad_debug_glXGetFBConfigs = glad_debug_impl_glXGetFBConfigs;
    glad_debug_glXGetGPUIDsAMD = glad_debug_impl_glXGetGPUIDsAMD;
    glad_debug_glXGetGPUInfoAMD = glad_debug_impl_glXGetGPUInfoAMD;
    glad_debug_glXGetMscRateOML = glad_debug_impl_glXGetMscRateOML;
    glad_debug_glXGetProcAddress = glad_debug_impl_glXGetProcAddress;
    glad_debug_glXGetProcAddressARB = glad_debug_impl_glXGetProcAddressARB;
    glad_debug_glXGetSelectedEvent = glad_debug_impl_glXGetSelectedEvent;
    glad_debug_glXGetSelectedEventSGIX = glad_debug_impl_glXGetSelectedEventSGIX;
    glad_debug_glXGetSwapIntervalMESA = glad_debug_impl_glXGetSwapIntervalMESA;
    glad_debug_glXGetSyncValuesOML = glad_debug_impl_glXGetSyncValuesOML;
    glad_debug_glXGetTransparentIndexSUN = glad_debug_impl_glXGetTransparentIndexSUN;
    glad_debug_glXGetVideoDeviceNV = glad_debug_impl_glXGetVideoDeviceNV;
    glad_debug_glXGetVideoInfoNV = glad_debug_impl_glXGetVideoInfoNV;
    glad_debug_glXGetVideoSyncSGI = glad_debug_impl_glXGetVideoSyncSGI;
    glad_debug_glXGetVisualFromFBConfig = glad_debug_impl_glXGetVisualFromFBConfig;
    glad_debug_glXGetVisualFromFBConfigSGIX = glad_debug_impl_glXGetVisualFromFBConfigSGIX;
    glad_debug_glXHyperpipeAttribSGIX = glad_debug_impl_glXHyperpipeAttribSGIX;
    glad_debug_glXHyperpipeConfigSGIX = glad_debug_impl_glXHyperpipeConfigSGIX;
    glad_debug_glXImportContextEXT = glad_debug_impl_glXImportContextEXT;
    glad_debug_glXIsDirect = glad_debug_impl_glXIsDirect;
    glad_debug_glXJoinSwapGroupNV = glad_debug_impl_glXJoinSwapGroupNV;
    glad_debug_glXJoinSwapGroupSGIX = glad_debug_impl_glXJoinSwapGroupSGIX;
    glad_debug_glXLockVideoCaptureDeviceNV = glad_debug_impl_glXLockVideoCaptureDeviceNV;
    glad_debug_glXMakeAssociatedContextCurrentAMD = glad_debug_impl_glXMakeAssociatedContextCurrentAMD;
    glad_debug_glXMakeContextCurrent = glad_debug_impl_glXMakeContextCurrent;
    glad_debug_glXMakeCurrent = glad_debug_impl_glXMakeCurrent;
    glad_debug_glXMakeCurrentReadSGI = glad_debug_impl_glXMakeCurrentReadSGI;
    glad_debug_glXNamedCopyBufferSubDataNV = glad_debug_impl_glXNamedCopyBufferSubDataNV;
    glad_debug_glXQueryChannelDeltasSGIX = glad_debug_impl_glXQueryChannelDeltasSGIX;
    glad_debug_glXQueryChannelRectSGIX = glad_debug_impl_glXQueryChannelRectSGIX;
    glad_debug_glXQueryContext = glad_debug_impl_glXQueryContext;
    glad_debug_glXQueryContextInfoEXT = glad_debug_impl_glXQueryContextInfoEXT;
    glad_debug_glXQueryCurrentRendererIntegerMESA = glad_debug_impl_glXQueryCurrentRendererIntegerMESA;
    glad_debug_glXQueryCurrentRendererStringMESA = glad_debug_impl_glXQueryCurrentRendererStringMESA;
    glad_debug_glXQueryDrawable = glad_debug_impl_glXQueryDrawable;
    glad_debug_glXQueryExtension = glad_debug_impl_glXQueryExtension;
    glad_debug_glXQueryExtensionsString = glad_debug_impl_glXQueryExtensionsString;
    glad_debug_glXQueryFrameCountNV = glad_debug_impl_glXQueryFrameCountNV;
    glad_debug_glXQueryGLXPbufferSGIX = glad_debug_impl_glXQueryGLXPbufferSGIX;
    glad_debug_glXQueryHyperpipeAttribSGIX = glad_debug_impl_glXQueryHyperpipeAttribSGIX;
    glad_debug_glXQueryHyperpipeBestAttribSGIX = glad_debug_impl_glXQueryHyperpipeBestAttribSGIX;
    glad_debug_glXQueryHyperpipeConfigSGIX = glad_debug_impl_glXQueryHyperpipeConfigSGIX;
    glad_debug_glXQueryHyperpipeNetworkSGIX = glad_debug_impl_glXQueryHyperpipeNetworkSGIX;
    glad_debug_glXQueryMaxSwapBarriersSGIX = glad_debug_impl_glXQueryMaxSwapBarriersSGIX;
    glad_debug_glXQueryMaxSwapGroupsNV = glad_debug_impl_glXQueryMaxSwapGroupsNV;
    glad_debug_glXQueryRendererIntegerMESA = glad_debug_impl_glXQueryRendererIntegerMESA;
    glad_debug_glXQueryRendererStringMESA = glad_debug_impl_glXQueryRendererStringMESA;
    glad_debug_glXQueryServerString = glad_debug_impl_glXQueryServerString;
    glad_debug_glXQuerySwapGroupNV = glad_debug_impl_glXQuerySwapGroupNV;
    glad_debug_glXQueryVersion = glad_debug_impl_glXQueryVersion;
    glad_debug_glXQueryVideoCaptureDeviceNV = glad_debug_impl_glXQueryVideoCaptureDeviceNV;
    glad_debug_glXReleaseBuffersMESA = glad_debug_impl_glXReleaseBuffersMESA;
    glad_debug_glXReleaseTexImageEXT = glad_debug_impl_glXReleaseTexImageEXT;
    glad_debug_glXReleaseVideoCaptureDeviceNV = glad_debug_impl_glXReleaseVideoCaptureDeviceNV;
    glad_debug_glXReleaseVideoDeviceNV = glad_debug_impl_glXReleaseVideoDeviceNV;
    glad_debug_glXReleaseVideoImageNV = glad_debug_impl_glXReleaseVideoImageNV;
    glad_debug_glXResetFrameCountNV = glad_debug_impl_glXResetFrameCountNV;
    glad_debug_glXSelectEvent = glad_debug_impl_glXSelectEvent;
    glad_debug_glXSelectEventSGIX = glad_debug_impl_glXSelectEventSGIX;
    glad_debug_glXSendPbufferToVideoNV = glad_debug_impl_glXSendPbufferToVideoNV;
    glad_debug_glXSet3DfxModeMESA = glad_debug_impl_glXSet3DfxModeMESA;
    glad_debug_glXSwapBuffers = glad_debug_impl_glXSwapBuffers;
    glad_debug_glXSwapBuffersMscOML = glad_debug_impl_glXSwapBuffersMscOML;
    glad_debug_glXSwapIntervalEXT = glad_debug_impl_glXSwapIntervalEXT;
    glad_debug_glXSwapIntervalMESA = glad_debug_impl_glXSwapIntervalMESA;
    glad_debug_glXSwapIntervalSGI = glad_debug_impl_glXSwapIntervalSGI;
    glad_debug_glXUseXFont = glad_debug_impl_glXUseXFont;
    glad_debug_glXWaitForMscOML = glad_debug_impl_glXWaitForMscOML;
    glad_debug_glXWaitForSbcOML = glad_debug_impl_glXWaitForSbcOML;
    glad_debug_glXWaitGL = glad_debug_impl_glXWaitGL;
    glad_debug_glXWaitVideoSyncSGI = glad_debug_impl_glXWaitVideoSyncSGI;
    glad_debug_glXWaitX = glad_debug_impl_glXWaitX;
}

void gladUninstallGLXDebug() {
    glad_debug_glXBindChannelToWindowSGIX = glad_glXBindChannelToWindowSGIX;
    glad_debug_glXBindHyperpipeSGIX = glad_glXBindHyperpipeSGIX;
    glad_debug_glXBindSwapBarrierNV = glad_glXBindSwapBarrierNV;
    glad_debug_glXBindSwapBarrierSGIX = glad_glXBindSwapBarrierSGIX;
    glad_debug_glXBindTexImageEXT = glad_glXBindTexImageEXT;
    glad_debug_glXBindVideoCaptureDeviceNV = glad_glXBindVideoCaptureDeviceNV;
    glad_debug_glXBindVideoDeviceNV = glad_glXBindVideoDeviceNV;
    glad_debug_glXBindVideoImageNV = glad_glXBindVideoImageNV;
    glad_debug_glXBlitContextFramebufferAMD = glad_glXBlitContextFramebufferAMD;
    glad_debug_glXChannelRectSGIX = glad_glXChannelRectSGIX;
    glad_debug_glXChannelRectSyncSGIX = glad_glXChannelRectSyncSGIX;
    glad_debug_glXChooseFBConfig = glad_glXChooseFBConfig;
    glad_debug_glXChooseFBConfigSGIX = glad_glXChooseFBConfigSGIX;
    glad_debug_glXChooseVisual = glad_glXChooseVisual;
    glad_debug_glXCopyBufferSubDataNV = glad_glXCopyBufferSubDataNV;
    glad_debug_glXCopyContext = glad_glXCopyContext;
    glad_debug_glXCopyImageSubDataNV = glad_glXCopyImageSubDataNV;
    glad_debug_glXCopySubBufferMESA = glad_glXCopySubBufferMESA;
    glad_debug_glXCreateAssociatedContextAMD = glad_glXCreateAssociatedContextAMD;
    glad_debug_glXCreateAssociatedContextAttribsAMD = glad_glXCreateAssociatedContextAttribsAMD;
    glad_debug_glXCreateContext = glad_glXCreateContext;
    glad_debug_glXCreateContextAttribsARB = glad_glXCreateContextAttribsARB;
    glad_debug_glXCreateContextWithConfigSGIX = glad_glXCreateContextWithConfigSGIX;
    glad_debug_glXCreateGLXPbufferSGIX = glad_glXCreateGLXPbufferSGIX;
    glad_debug_glXCreateGLXPixmap = glad_glXCreateGLXPixmap;
    glad_debug_glXCreateGLXPixmapMESA = glad_glXCreateGLXPixmapMESA;
    glad_debug_glXCreateGLXPixmapWithConfigSGIX = glad_glXCreateGLXPixmapWithConfigSGIX;
    glad_debug_glXCreateNewContext = glad_glXCreateNewContext;
    glad_debug_glXCreatePbuffer = glad_glXCreatePbuffer;
    glad_debug_glXCreatePixmap = glad_glXCreatePixmap;
    glad_debug_glXCreateWindow = glad_glXCreateWindow;
    glad_debug_glXCushionSGI = glad_glXCushionSGI;
    glad_debug_glXDelayBeforeSwapNV = glad_glXDelayBeforeSwapNV;
    glad_debug_glXDeleteAssociatedContextAMD = glad_glXDeleteAssociatedContextAMD;
    glad_debug_glXDestroyContext = glad_glXDestroyContext;
    glad_debug_glXDestroyGLXPbufferSGIX = glad_glXDestroyGLXPbufferSGIX;
    glad_debug_glXDestroyGLXPixmap = glad_glXDestroyGLXPixmap;
    glad_debug_glXDestroyHyperpipeConfigSGIX = glad_glXDestroyHyperpipeConfigSGIX;
    glad_debug_glXDestroyPbuffer = glad_glXDestroyPbuffer;
    glad_debug_glXDestroyPixmap = glad_glXDestroyPixmap;
    glad_debug_glXDestroyWindow = glad_glXDestroyWindow;
    glad_debug_glXEnumerateVideoCaptureDevicesNV = glad_glXEnumerateVideoCaptureDevicesNV;
    glad_debug_glXEnumerateVideoDevicesNV = glad_glXEnumerateVideoDevicesNV;
    glad_debug_glXFreeContextEXT = glad_glXFreeContextEXT;
    glad_debug_glXGetAGPOffsetMESA = glad_glXGetAGPOffsetMESA;
    glad_debug_glXGetClientString = glad_glXGetClientString;
    glad_debug_glXGetConfig = glad_glXGetConfig;
    glad_debug_glXGetContextGPUIDAMD = glad_glXGetContextGPUIDAMD;
    glad_debug_glXGetContextIDEXT = glad_glXGetContextIDEXT;
    glad_debug_glXGetCurrentAssociatedContextAMD = glad_glXGetCurrentAssociatedContextAMD;
    glad_debug_glXGetCurrentContext = glad_glXGetCurrentContext;
    glad_debug_glXGetCurrentDisplay = glad_glXGetCurrentDisplay;
    glad_debug_glXGetCurrentDisplayEXT = glad_glXGetCurrentDisplayEXT;
    glad_debug_glXGetCurrentDrawable = glad_glXGetCurrentDrawable;
    glad_debug_glXGetCurrentReadDrawable = glad_glXGetCurrentReadDrawable;
    glad_debug_glXGetCurrentReadDrawableSGI = glad_glXGetCurrentReadDrawableSGI;
    glad_debug_glXGetFBConfigAttrib = glad_glXGetFBConfigAttrib;
    glad_debug_glXGetFBConfigAttribSGIX = glad_glXGetFBConfigAttribSGIX;
    glad_debug_glXGetFBConfigFromVisualSGIX = glad_glXGetFBConfigFromVisualSGIX;
    glad_debug_glXGetFBConfigs = glad_glXGetFBConfigs;
    glad_debug_glXGetGPUIDsAMD = glad_glXGetGPUIDsAMD;
    glad_debug_glXGetGPUInfoAMD = glad_glXGetGPUInfoAMD;
    glad_debug_glXGetMscRateOML = glad_glXGetMscRateOML;
    glad_debug_glXGetProcAddress = glad_glXGetProcAddress;
    glad_debug_glXGetProcAddressARB = glad_glXGetProcAddressARB;
    glad_debug_glXGetSelectedEvent = glad_glXGetSelectedEvent;
    glad_debug_glXGetSelectedEventSGIX = glad_glXGetSelectedEventSGIX;
    glad_debug_glXGetSwapIntervalMESA = glad_glXGetSwapIntervalMESA;
    glad_debug_glXGetSyncValuesOML = glad_glXGetSyncValuesOML;
    glad_debug_glXGetTransparentIndexSUN = glad_glXGetTransparentIndexSUN;
    glad_debug_glXGetVideoDeviceNV = glad_glXGetVideoDeviceNV;
    glad_debug_glXGetVideoInfoNV = glad_glXGetVideoInfoNV;
    glad_debug_glXGetVideoSyncSGI = glad_glXGetVideoSyncSGI;
    glad_debug_glXGetVisualFromFBConfig = glad_glXGetVisualFromFBConfig;
    glad_debug_glXGetVisualFromFBConfigSGIX = glad_glXGetVisualFromFBConfigSGIX;
    glad_debug_glXHyperpipeAttribSGIX = glad_glXHyperpipeAttribSGIX;
    glad_debug_glXHyperpipeConfigSGIX = glad_glXHyperpipeConfigSGIX;
    glad_debug_glXImportContextEXT = glad_glXImportContextEXT;
    glad_debug_glXIsDirect = glad_glXIsDirect;
    glad_debug_glXJoinSwapGroupNV = glad_glXJoinSwapGroupNV;
    glad_debug_glXJoinSwapGroupSGIX = glad_glXJoinSwapGroupSGIX;
    glad_debug_glXLockVideoCaptureDeviceNV = glad_glXLockVideoCaptureDeviceNV;
    glad_debug_glXMakeAssociatedContextCurrentAMD = glad_glXMakeAssociatedContextCurrentAMD;
    glad_debug_glXMakeContextCurrent = glad_glXMakeContextCurrent;
    glad_debug_glXMakeCurrent = glad_glXMakeCurrent;
    glad_debug_glXMakeCurrentReadSGI = glad_glXMakeCurrentReadSGI;
    glad_debug_glXNamedCopyBufferSubDataNV = glad_glXNamedCopyBufferSubDataNV;
    glad_debug_glXQueryChannelDeltasSGIX = glad_glXQueryChannelDeltasSGIX;
    glad_debug_glXQueryChannelRectSGIX = glad_glXQueryChannelRectSGIX;
    glad_debug_glXQueryContext = glad_glXQueryContext;
    glad_debug_glXQueryContextInfoEXT = glad_glXQueryContextInfoEXT;
    glad_debug_glXQueryCurrentRendererIntegerMESA = glad_glXQueryCurrentRendererIntegerMESA;
    glad_debug_glXQueryCurrentRendererStringMESA = glad_glXQueryCurrentRendererStringMESA;
    glad_debug_glXQueryDrawable = glad_glXQueryDrawable;
    glad_debug_glXQueryExtension = glad_glXQueryExtension;
    glad_debug_glXQueryExtensionsString = glad_glXQueryExtensionsString;
    glad_debug_glXQueryFrameCountNV = glad_glXQueryFrameCountNV;
    glad_debug_glXQueryGLXPbufferSGIX = glad_glXQueryGLXPbufferSGIX;
    glad_debug_glXQueryHyperpipeAttribSGIX = glad_glXQueryHyperpipeAttribSGIX;
    glad_debug_glXQueryHyperpipeBestAttribSGIX = glad_glXQueryHyperpipeBestAttribSGIX;
    glad_debug_glXQueryHyperpipeConfigSGIX = glad_glXQueryHyperpipeConfigSGIX;
    glad_debug_glXQueryHyperpipeNetworkSGIX = glad_glXQueryHyperpipeNetworkSGIX;
    glad_debug_glXQueryMaxSwapBarriersSGIX = glad_glXQueryMaxSwapBarriersSGIX;
    glad_debug_glXQueryMaxSwapGroupsNV = glad_glXQueryMaxSwapGroupsNV;
    glad_debug_glXQueryRendererIntegerMESA = glad_glXQueryRendererIntegerMESA;
    glad_debug_glXQueryRendererStringMESA = glad_glXQueryRendererStringMESA;
    glad_debug_glXQueryServerString = glad_glXQueryServerString;
    glad_debug_glXQuerySwapGroupNV = glad_glXQuerySwapGroupNV;
    glad_debug_glXQueryVersion = glad_glXQueryVersion;
    glad_debug_glXQueryVideoCaptureDeviceNV = glad_glXQueryVideoCaptureDeviceNV;
    glad_debug_glXReleaseBuffersMESA = glad_glXReleaseBuffersMESA;
    glad_debug_glXReleaseTexImageEXT = glad_glXReleaseTexImageEXT;
    glad_debug_glXReleaseVideoCaptureDeviceNV = glad_glXReleaseVideoCaptureDeviceNV;
    glad_debug_glXReleaseVideoDeviceNV = glad_glXReleaseVideoDeviceNV;
    glad_debug_glXReleaseVideoImageNV = glad_glXReleaseVideoImageNV;
    glad_debug_glXResetFrameCountNV = glad_glXResetFrameCountNV;
    glad_debug_glXSelectEvent = glad_glXSelectEvent;
    glad_debug_glXSelectEventSGIX = glad_glXSelectEventSGIX;
    glad_debug_glXSendPbufferToVideoNV = glad_glXSendPbufferToVideoNV;
    glad_debug_glXSet3DfxModeMESA = glad_glXSet3DfxModeMESA;
    glad_debug_glXSwapBuffers = glad_glXSwapBuffers;
    glad_debug_glXSwapBuffersMscOML = glad_glXSwapBuffersMscOML;
    glad_debug_glXSwapIntervalEXT = glad_glXSwapIntervalEXT;
    glad_debug_glXSwapIntervalMESA = glad_glXSwapIntervalMESA;
    glad_debug_glXSwapIntervalSGI = glad_glXSwapIntervalSGI;
    glad_debug_glXUseXFont = glad_glXUseXFont;
    glad_debug_glXWaitForMscOML = glad_glXWaitForMscOML;
    glad_debug_glXWaitForSbcOML = glad_glXWaitForSbcOML;
    glad_debug_glXWaitGL = glad_glXWaitGL;
    glad_debug_glXWaitVideoSyncSGI = glad_glXWaitVideoSyncSGI;
    glad_debug_glXWaitX = glad_glXWaitX;
}

#ifdef GLAD_GLX

#ifndef GLAD_LOADER_LIBRARY_C_
#define GLAD_LOADER_LIBRARY_C_

#include <stddef.h>
#include <stdlib.h>

#if GLAD_PLATFORM_WIN32
#include <windows.h>
#else
#include <dlfcn.h>
#endif


static void* glad_get_dlopen_handle(const char *lib_names[], int length) {
    void *handle = NULL;
    int i;

    for (i = 0; i < length; ++i) {
#if GLAD_PLATFORM_WIN32
  #if GLAD_PLATFORM_UWP
        size_t buffer_size = (strlen(lib_names[i]) + 1) * sizeof(WCHAR);
        LPWSTR buffer = (LPWSTR) malloc(buffer_size);
        if (buffer != NULL) {
            int ret = MultiByteToWideChar(CP_ACP, 0, lib_names[i], -1, buffer, buffer_size);
            if (ret != 0) {
                handle = (void*) LoadPackagedLibrary(buffer, 0);
            }
            free((void*) buffer);
        }
  #else
        handle = (void*) LoadLibraryA(lib_names[i]);
  #endif
#else
        handle = dlopen(lib_names[i], RTLD_LAZY | RTLD_LOCAL);
#endif
        if (handle != NULL) {
            return handle;
        }
    }

    return NULL;
}

static void glad_close_dlopen_handle(void* handle) {
    if (handle != NULL) {
#if GLAD_PLATFORM_WIN32
        FreeLibrary((HMODULE) handle);
#else
        dlclose(handle);
#endif
    }
}

static GLADapiproc glad_dlsym_handle(void* handle, const char *name) {
    if (handle == NULL) {
        return NULL;
    }

#if GLAD_PLATFORM_WIN32
    return (GLADapiproc) GetProcAddress((HMODULE) handle, name);
#else
    return GLAD_GNUC_EXTENSION (GLADapiproc) dlsym(handle, name);
#endif
}

#endif /* GLAD_LOADER_LIBRARY_C_ */

typedef void* (GLAD_API_PTR *GLADglxprocaddrfunc)(const char*);

static GLADapiproc glad_glx_get_proc(void *userptr, const char *name) {
    return GLAD_GNUC_EXTENSION ((GLADapiproc (*)(const char *name)) userptr)(name);
}

static void* _glx_handle;

static void* glad_glx_dlopen_handle(void) {
    static const char *NAMES[] = {
#if defined __CYGWIN__
        "libGL-1.so",
#endif
        "libGL.so.1",
        "libGL.so"
    };

    if (_glx_handle == NULL) {
        _glx_handle = glad_get_dlopen_handle(NAMES, sizeof(NAMES) / sizeof(NAMES[0]));
    }

    return _glx_handle;
}

int gladLoaderLoadGLX(Display *display, int screen) {
    int version = 0;
    void *handle = NULL;
    int did_load = 0;
    GLADglxprocaddrfunc loader;

    did_load = _glx_handle == NULL;
    handle = glad_glx_dlopen_handle();
    if (handle != NULL) {
        loader = (GLADglxprocaddrfunc) glad_dlsym_handle(handle, "glXGetProcAddressARB");
        if (loader != NULL) {
            version = gladLoadGLXUserPtr(display, screen, glad_glx_get_proc, GLAD_GNUC_EXTENSION (void*) loader);
        }

        if (!version && did_load) {
            gladLoaderUnloadGLX();
        }
    }

    return version;
}


void gladLoaderUnloadGLX() {
    if (_glx_handle != NULL) {
        glad_close_dlopen_handle(_glx_handle);
        _glx_handle = NULL;
    }
}

#endif /* GLAD_GLX */

#ifdef __cplusplus
}
#endif

#endif /* GLAD_GLX_IMPLEMENTATION */

